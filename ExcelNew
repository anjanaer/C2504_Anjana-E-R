nihu<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Upload and Filter Section -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="Browse" Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Load" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />
    
            <ComboBox x:Name="FilteringComboBox" Width="140" Margin="5" Text="{Binding FilterStatus}">
                <ComboBoxItem Content="Project"/>
                <ComboBoxItem Content="Category"/>
                <ComboBoxItem Content="Status"/>
                <ComboBoxItem Content="Resolution"/>
            </ComboBox>

        </StackPanel>

        <DataGrid x:Name="dataGrid" Grid.Row="1" ItemsSource="{Binding Data}" AutoGenerateColumns="True" >
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100"/>
                <DataGridTextColumn Header="Project" Binding="{Binding Project}"  Width="150"/>
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150"/>
                <DataGridTextColumn Header="Category" Binding="{Binding Category}"  Width="150"/>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}"  Width="150"/>
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150"/>
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}"  Width="150"/>

            </DataGrid.Columns>
        </DataGrid>

    </Grid>



  

    
</Window>    


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using ExcelProject;
using ExcelProject.Repo;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private MainViewModel viewModel { get; set; } = null;
        public MainWindow()
        {
            InitializeComponent();
            viewModel = new MainViewModel();
            DataContext = this.viewModel;

        }
    }

    
}


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        private string filePath;
        public string FilePath
        {
            get { return filePath; }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand FilterCommand { get; }

        public ICommand ShowDialogCommand { get; }

        public MainViewModel()
        {
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            _repository = new ExcelRepository();
        }

        private void LoadData()
        {
            if(!string.IsNullOrEmpty(filePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); ; // Initially, no filter is applied
            }
            
        }

        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                this.FilePath = dialog.FileName;
                //this.FileName = Path.GetFileName(FilePath);
            }
        }
        private string filterStatus { get; set; }
        public string FilterStatus
        {
            get { return filterStatus; }
            set
            {
                filterStatus = value;
                OnPropertyChanged(nameof(FilterStatus));
            }
        }

        private void FilterData(object parameter)
        {
            if (!string.IsNullOrWhiteSpace(FilterCategory))
            {
                FilteredData = new ObservableCollection<ExcelData>(
                    Data.Where(row => row.Category != null &&
                                      row.Category.IndexOf(FilterCategory, StringComparison.OrdinalIgnoreCase) >= 0));
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data); ; // Reset to original data
            }
        }
     
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelData> ReadExcelFile(string filePath);
    }
}


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;
using ExcelProject.Repo;
using ClosedXML.Excel;


namespace ExcelProject.ExcelRepo
{
    public class ExcelRepository : IRepo
    {
        public List<ExcelData> ReadExcelFile(string filePath)
        {
            var data = new List<ExcelData>();

            if (File.Exists(filePath))
            {
                using (var workbook = new XLWorkbook(filePath))
                {
                    var worksheet = workbook.Worksheet(1); // Read the first worksheet
                    foreach (var row in worksheet.RowsUsed().Skip(1)) // Skip header row
                    {
                        data.Add(new ExcelData
                        {
                            Id = row.Cell(1).Value.ToString(),
                            Project = row.Cell(2).Value.ToString(),
                            Reporter = row.Cell(3).Value.ToString(),
                            Category = row.Cell(9).Value.  ToString(),
                            Status = row.Cell(17).Value.ToString(),
                            Summary = row.Cell(16).Value.ToString(),
                            Resolution = row.Cell(18).Value.ToString(),
                            

                        });
                    }
                }
            }

            return data;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExcelProject.Model
{
    public class ExcelData
    {
        public string Id {  get; set; }
        public string Project { get; set; }
        public string Reporter { get; set; }
        public string Category { get; set; }

        public string Status { get; set; }
        public string Summary { get; set; }
        public string Resolution { get; set; }
        


    }
}
Give the xaml code for this project that include two comboboxes for filtering corresponding to the Status such as assigned,resolved,new,feedback and Resolution such as open,fixed,reopened,unable to reproduce,no change required,duplicate,suspended

private string filterResolution;
public string FilterResolution
{
    get { return filterResolution; }
    set
    {
        filterResolution = value;
        OnPropertyChanged(nameof(FilterResolution));
        FilterData();
    }
}

private void FilterData()
{
    var filtered = Data.AsEnumerable();

    if (!string.IsNullOrWhiteSpace(FilterStatus))
    {
        filtered = filtered.Where(row => row.Status != null &&
                                         row.Status.IndexOf(FilterStatus, StringComparison.OrdinalIgnoreCase) >= 0);
    }

    if (!string.IsNullOrWhiteSpace(FilterResolution))
    {
        filtered = filtered.Where(row => row.Resolution != null &&
                                         row.Resolution.IndexOf(FilterResolution, StringComparison.OrdinalIgnoreCase) >= 0);
    }

    FilteredData = new ObservableCollection<ExcelData>(filtered);
}

<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Upload and Filter Section -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="Browse" Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Load" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />

            <!-- ComboBox for Status -->
            <ComboBox Width="140" Margin="5" SelectedValue="{Binding FilterStatus}">
                <ComboBoxItem Content="Assigned" />
                <ComboBoxItem Content="Resolved" />
                <ComboBoxItem Content="New" />
                <ComboBoxItem Content="Feedback" />
            </ComboBox>

            <!-- ComboBox for Resolution -->
            <ComboBox Width="140" Margin="5" SelectedValue="{Binding FilterResolution}">
                <ComboBoxItem Content="Open" />
                <ComboBoxItem Content="Fixed" />
                <ComboBoxItem Content="Reopened" />
                <ComboBoxItem Content="Unable to Reproduce" />
                <ComboBoxItem Content="No Change Required" />
                <ComboBoxItem Content="Duplicate" />
                <ComboBoxItem Content="Suspended" />
            </ComboBox>
        </StackPanel>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="1" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>

<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Upload Section -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="Browse" Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Load" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Section in Border -->
        <Border Grid.Row="1" Margin="10" Padding="10" BorderBrush="Gray" BorderThickness="1" CornerRadius="5">
            <StackPanel Orientation="Horizontal">
                <!-- ComboBox for Status -->
                <StackPanel Margin="0,0,10,0">
                    <TextBlock Text="Status:" Margin="0,0,0,5" />
                    <ComboBox Width="140" SelectedValue="{Binding FilterStatus}">
                        <ComboBoxItem Content="Assigned" />
                        <ComboBoxItem Content="Resolved" />
                        <ComboBoxItem Content="New" />
                        <ComboBoxItem Content="Feedback" />
                    </ComboBox>
                </StackPanel>

                <!-- ComboBox for Resolution -->
                <StackPanel Margin="0,0,10,0">
                    <TextBlock Text="Resolution:" Margin="0,0,0,5" />
                    <ComboBox Width="140" SelectedValue="{Binding FilterResolution}">
                        <ComboBoxItem Content="Open" />
                        <ComboBoxItem Content="Fixed" />
                        <ComboBoxItem Content="Reopened" />
                        <ComboBoxItem Content="Unable to Reproduce" />
                        <ComboBoxItem Content="No Change Required" />
                        <ComboBoxItem Content="Duplicate" />
                        <ComboBoxItem Content="Suspended" />
                    </ComboBox>
                </StackPanel>
            </StackPanel>
        </Border>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        private string filePath;
        public string FilePath
        {
            get { return filePath; }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand FilterCommand { get; }

        public ICommand ShowDialogCommand { get; }

        public MainViewModel()
        {
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            _repository = new ExcelRepository();
        }

        private void LoadData()
        {
            if(!string.IsNullOrEmpty(filePath))
            {
                TempData = new ObservableCollection<ExcelData>(_repository.ReadExcelFile(FilePath));
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); ; // Initially, no filter is applied
            }
            
        }

        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                this.FilePath = dialog.FileName;
                //this.FileName = Path.GetFileName(FilePath);
            }
        }

        private string filterResolution;
        public string FilterResolution
        {
            get { return filterResolution; }
            set
            {
                filterResolution = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }
        private string filterStatus;
        public string FilterStatus
        {
            get { return filterStatus; }
            set
            {
                filterStatus = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        private void FilterData()
        {
            IsFilterApplied = true;

            var filteredList = new ObservableCollection<ExcelData>();
            //FilteredClarifications.Clear();
            foreach (var data in TempData)
            {
                // Check status and module filters
                bool matchesStatus = string.IsNullOrEmpty(FilterStatus) ||
                                     data.Status.Equals(FilterStatus, StringComparison.OrdinalIgnoreCase) ||
                                     FilterStatus.Equals("All", StringComparison.OrdinalIgnoreCase);
                bool matchesResolution = string.IsNullOrEmpty(FilterResolution) ||
                                     data.Resolution.Equals(FilterResolution, StringComparison.OrdinalIgnoreCase) ||
                                     FilterResolution.Equals("All", StringComparison.OrdinalIgnoreCase);
                // If all conditions are met, add the clarification to the filtered list
                if (matchesStatus && matchesResolution)
                {
                    filteredList.Add(data);
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}


//

<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Upload Section -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="Browse" Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Load" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Section in Border -->
        <Border Grid.Row="1" Margin="10" Padding="10" BorderBrush="Gray" BorderThickness="1" CornerRadius="5">
            
            <StackPanel Orientation="Horizontal">
                
                <!-- ComboBox for Status -->
                <StackPanel Margin="0,0,10,0">
                    <TextBlock Text="Status:" Margin="0,0,0,5" />
                    <ComboBox Width="140" SelectedValue="{Binding FilterStatus}">
                        <ComboBoxItem Content="assigned" />
                        <ComboBoxItem Content="resolved" />
                        <ComboBoxItem Content="new" />
                        <ComboBoxItem Content="feedback" />
                    </ComboBox>
                </StackPanel>

                <!-- ComboBox for Resolution -->
                <StackPanel Margin="0,0,10,0">
                    <TextBlock Text="Resolution:" Margin="0,0,0,5" />
                    <ComboBox Width="140" SelectedValue="{Binding FilterResolution}">
                        <ComboBoxItem Content="open" />
                        <ComboBoxItem Content="fixed" />
                        <ComboBoxItem Content="reopened" />
                        <ComboBoxItem Content="unable to reproduce" />
                        <ComboBoxItem Content="no change required" />
                        <ComboBoxItem Content="duplicate" />
                        <ComboBoxItem Content="suspended" />
                    </ComboBox>
                </StackPanel>
            </StackPanel>
        </Border>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>

</Window>    





using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        private string filePath;
        public string FilePath
        {
            get { return filePath; }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand FilterCommand { get; }

        public ICommand ShowDialogCommand { get; }

        public MainViewModel()
        {
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            _repository = new ExcelRepository();
        }

        private void LoadData()
        {
            if(!string.IsNullOrEmpty(filePath))
            {
                TempData = new ObservableCollection<ExcelData>(_repository.ReadExcelFile(FilePath));
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); ; // Initially, no filter is applied
            }
            
        }

        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                this.FilePath = dialog.FileName;
                //this.FileName = Path.GetFileName(FilePath);
            }
        }

        private string filterResolution;
        public string FilterResolution
        {
            get { return filterResolution; }
            set
            {
                filterResolution = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }
        private string filterStatus;
        public string FilterStatus
        {
            get { return filterStatus; }
            set
            {
                filterStatus = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        private void FilterData()
        {
            IsFilterApplied = true;

            var filteredList = new ObservableCollection<ExcelData>();
            //FilteredClarifications.Clear();
            foreach (var data in TempData)
            {
                // Check status and module filters
                bool matchesStatus = string.IsNullOrEmpty(FilterStatus) ||
                                     data.Status.Equals(FilterStatus, StringComparison.OrdinalIgnoreCase) ||
                                     FilterStatus.Equals("All", StringComparison.OrdinalIgnoreCase);
                bool matchesResolution = string.IsNullOrEmpty(FilterResolution) ||
                                     data.Resolution.Equals(FilterResolution, StringComparison.OrdinalIgnoreCase) ||
                                     FilterResolution.Equals("All", StringComparison.OrdinalIgnoreCase);
                // If all conditions are met, add the clarification to the filtered list
                if (matchesStatus && matchesResolution)
                {
                    filteredList.Add(data);
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}


what is the mistake in this code filtering is not working


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        private string filePath;
        public string FilePath
        {
            get { return filePath; }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand FilterCommand { get; }

        public ICommand ShowDialogCommand { get; }

        public MainViewModel()
        {
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            _repository = new ExcelRepository();
        }

        private void LoadData()
        {
            if(!string.IsNullOrEmpty(filePath))
            {
                TempData = new ObservableCollection<ExcelData>(_repository.ReadExcelFile(FilePath));
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); ; // Initially, no filter is applied
            }
            
        }

        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                this.FilePath = dialog.FileName;
                //this.FileName = Path.GetFileName(FilePath);
            }
        }

        private string filterResolution;
        public string FilterResolution
        {
            get { return filterResolution; }
            set
            {
                filterResolution = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }
        private string filterStatus;
        public string FilterStatus
        {
            get { return filterStatus; }
            set
            {
                filterStatus = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        private void FilterData()
        {
            IsFilterApplied = true;

            var filteredList = new ObservableCollection<ExcelData>();
            //FilteredClarifications.Clear();
            foreach (var data in TempData)
            {
                // Check status and module filters
                bool matchesStatus = string.IsNullOrEmpty(FilterStatus) ||
                                     data.Status.Equals(FilterStatus, StringComparison.OrdinalIgnoreCase) ||
                                     FilterStatus.Equals("All", StringComparison.OrdinalIgnoreCase);
                bool matchesResolution = string.IsNullOrEmpty(FilterResolution) ||
                                     data.Resolution.Equals(FilterResolution, StringComparison.OrdinalIgnoreCase) ||
                                     FilterResolution.Equals("All", StringComparison.OrdinalIgnoreCase);
                // If all conditions are met, add the clarification to the filtered list
                if (matchesStatus && matchesResolution)
                {
                    filteredList.Add(data);
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}



//
// ----------------------------------------------------------------------------------------
// Project Name: ClarificationDetailsProject
// File Name: ClarificationViewModel.cs
// Description: This file contains the implementation of the ClarificationViewModel class,
// which serves as a ViewModel for the Clarification Details feature in the 
// application. It inherits from ViewModelBase and is responsible for 
// managing the state and behavior of the user interface related to 
// clarifications.
// Author: Yahkoob P
// Date: 27-10-2024
// ----------------------------------------------------------------------------------------
using ClarificationDetailsProject.Commands;
using ClarificationDetailsProject.ExcelRepo;
using ClarificationDetailsProject.Models;
using ClarificationDetailsProject.Repo;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace ClarificationDetailsProject.ViewModels
{
    /// <summary>
    /// Represents the ViewModel for the Clarification Details feature.
    /// </summary>
    /// <remarks>
    /// This class inherits from ViewModelBase and provides properties and 
    /// methods to manage the state of the user interface for clarifications.
    /// It may include commands for user actions and properties for data binding.
    /// </remarks>
    public class ClarificationViewModel : ViewModelBase
    {
        //Constant to store successfull message
        private const string successfullMessageBoxText = "Exported successfully.";
        //Constant to store intial button text
        private const string initialButtonText = "Show Details";
        //Constant to store details tab text
        private const string detailsTab = "Details";
        //Constant to store summary tab text
        private const string summaryTab = "Summary";
        //Constant to store loading text
        private const string loadingText = "Loading...";

        private IRepo repo = new ExcelDataRepo();

        /// <summary>
        /// Initializes a new instance of the <see cref="ClarificationViewModel"/> class.
        /// </summary>
        public ClarificationViewModel()
        {
            LoadExcelCommand = new RelayCommand(LoadExcelAsync);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilters);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ExportToExcelCommand = new RelayCommand(ExportToExcel);

            // Initialize properties with default values
            FilePath = string.Empty;
            Clarifications = new ObservableCollection<Clarification>();
            Summaries = new ObservableCollection<Summary>();
            FilteredClarifications = new ObservableCollection<Clarification>();
            FilterFromDate = null;
            FilterToDate = null;
            TempClarifications = new ObservableCollection<Clarification>();
            Modules = new ObservableCollection<Models.Module>();
            selectedModules = new List<string>();
            SelectedTab = new TabItem();
            SelectedTab.Header = detailsTab;
            //SelectedTab = new TabItem();
            buttonText = initialButtonText;
        }

        /// <summary>
        /// Indicates if a filter is currently applied.
        /// </summary>
        public bool IsFilterApplied { get; set; } = false;

        /// <summary>
        /// Indicates if a search is currently applied.
        /// </summary>
        public bool IsSearchApplied { get; set; } = false;

        /// <summary>
        /// Indicates if data is currently loading.
        /// </summary>
        public bool IsLoading { get; set; } = false;

        /// <summary>
        /// Collection of clarifications loaded from the data source.
        /// </summary>
        public ObservableCollection<Clarification> Clarifications
        {
            get { return clarifications; }
            set
            {
                clarifications = value;
                OnPropertyChanged(nameof(Clarifications));
            }
        }

        /// <summary>
        /// Temporary collection to hold clarifications for filtering purposes.
        /// </summary>
        public ObservableCollection<Clarification> TempClarifications { get; set; }

        /// <summary>
        /// Collection of summaries generated based on loaded data.
        /// </summary>
        public ObservableCollection<Summary> Summaries
        {
            get { return summaries; }
            set
            {
                summaries = value;
                OnPropertyChanged(nameof(Summaries));
            }
        }

        /// <summary>
        /// Collection of clarifications filtered based on user-selected criteria.
        /// </summary>
        public ObservableCollection<Clarification> FilteredClarifications
        {
            get { return filteredClarifications; }
            set
            {
                filteredClarifications = value;
                OnPropertyChanged(nameof(FilteredClarifications));
            }
        }

        /// <summary>
        /// Path to the selected file.
        /// </summary>
        public string FilePath
        {
            get { return filePath; }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        /// <summary>
        /// Name of the selected file.
        /// </summary>
        public string FileName
        {
            get { return fileName; }
            set
            {
                fileName = value;
                OnPropertyChanged(nameof(FileName));
            }
        }

        /// <summary>
        /// Collection of modules available for filtering.
        /// </summary>
        public ObservableCollection<Models.Module> Modules
        {
            get { return modules; }
            set
            {
                modules = value;
                OnPropertyChanged(nameof(Modules));
            }
        }

        /// <summary>
        /// List of selected module names used for filtering.
        /// </summary>
        public List<string> SelectedModules
        {
            get { return selectedModules; }
            set
            {
                selectedModules = value;
                OnPropertyChanged(nameof(SelectedModules));
            }
        }

        /// <summary>
        /// Indicates whether all modules are selected.
        /// </summary>
        public bool IsAllChecked
        {
            get => isAllChecked;
            set
            {
                isAllChecked = value;
                OnPropertyChanged(nameof(IsAllChecked));

                foreach (var item in Modules)
                {
                    item.IsChecked = value;
                }
            }
        }

        /// <summary>
        /// Status filter applied to the clarifications.
        /// </summary>
        public string FilterStatus
        {
            get { return filterStatus; }
            set
            {
                filterStatus = value;
                OnPropertyChanged(nameof(FilterStatus));
            }
        }

        /// <summary>
        /// Start date for date filtering.
        /// </summary>
        public DateTime? FilterFromDate
        {
            get { return filterFromDate; }
            set
            {
                filterFromDate = value;
                OnPropertyChanged(nameof(FilterFromDate));
            }
        }

        /// <summary>
        /// End date for date filtering.
        /// </summary>
        public DateTime? FilterToDate
        {
            get { return filterToDate; }
            set
            {
                filterToDate = value;
                OnPropertyChanged(nameof(FilterToDate));
            }
        }

        /// <summary>
        /// Currently selected tab (Details or Summary).
        /// </summary>
        public TabItem SelectedTab
        {
            get => selectedTab;
            set
            {
                selectedTab = value;
                OnPropertyChanged(nameof(SelectedTab));
            }
        }

        /// <summary>
        /// Text input for searching clarifications.
        /// </summary>
        public string SearchText
        {
            get { return searchText; }
            set
            {
                searchText = value;
                OnPropertyChanged(nameof(SearchText));
                ApplyFilters();
            }
        }


        /// <summary>
        /// Text displayed on the action button.
        /// </summary>
        public string ButtonText
        {
            get { return buttonText; }
            set
            {
                buttonText = value;
                OnPropertyChanged(nameof(ButtonText));
            }
        }

        // Command for loading data from excel
        public ICommand LoadExcelCommand { get; }
        //Command to show the fileOpen dialog
        public ICommand ShowDialogCommand { get; }
        //Command to apply filters
        public ICommand ApplyFilterCommand { get; }
        //command to reset filters
        public ICommand ResetFilterCommand { get; }
        //commands to export data to excel
        public ICommand ExportToExcelCommand { get; }

        private ObservableCollection<Clarification> clarifications;
        private ObservableCollection<Models.Module> modules;
        private ObservableCollection<Summary> summaries;
        private ObservableCollection<Clarification> filteredClarifications;
        private string filePath;
        private string fileName;
        private List<string> selectedModules;      
        private bool isAllChecked;      
        private string filterStatus;
        private DateTime? filterFromDate;     
        private DateTime? filterToDate;
        private TabItem selectedTab;   
        private string searchText;
        private string buttonText;
       
        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                this.FilePath = dialog.FileName;
                this.FileName = Path.GetFileName(FilePath);
            }
        }

        /// <summary>
        /// Loads clarifications data from the specified Excel file asynchronously.
        /// </summary>
        private async void LoadExcelAsync()
        {
           
            if (string.IsNullOrWhiteSpace(FilePath))
            {
                MessageBox.Show(messageBoxText: "Please select a file.",
                caption: "Alert",
                button: MessageBoxButton.OK,
                icon: MessageBoxImage.Warning);
                return;
            }

            IsLoading = true;
            ButtonText = loadingText;
            string filePath = this.FilePath;

            try
            {
                // Clear all collections before loading new data
                Clarifications.Clear();
                TempClarifications.Clear();
                Summaries.Clear();
                Modules.Clear();
                // Load data asynchronously
                Clarifications = await repo.LoadDataAsync(filePath);
                TempClarifications = Clarifications;
                // Load summaries and modules
                Summaries = repo.GetSummaries();
                Modules = repo.GetModules();
            }
            catch (InvalidOperationException ex)
            {
                MessageBox.Show($"Operation error: {ex.Message}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An unexpected error occurred: {ex.Message}");
            }
            finally
            {
                // Ensure loading state is reset
                IsLoading = false;
                ButtonText = initialButtonText;
            }
        }

        /// <summary>
        /// Updates the selected modules based on user selection.
        /// </summary>
        public void UpdateSelectedModules()
        {
            var SelectedModules = Modules.Where(m => m.IsChecked).ToList(); // Get selected modules
            this.SelectedModules.Clear();
            foreach (var module in SelectedModules)
            {
                this.SelectedModules.Add(module.Name);
            }
        }

        /// <summary>
        /// Applies filters based on user-selected criteria.
        /// </summary>
        private void ApplyFilters()
        {
            IsFilterApplied = true;
            IsSearchApplied = !string.IsNullOrWhiteSpace(SearchText); // Check if search is needed

            var filteredList = new ObservableCollection<Clarification>();
            //FilteredClarifications.Clear();

            // Convert SearchText to lowercase for case-insensitive search if applicable
            var searchTextLower = SearchText?.ToLower();

            foreach (var clarification in TempClarifications)
            {
                // Check status and module filters
                bool matchesStatus = string.IsNullOrEmpty(FilterStatus) ||
                                     clarification.Status.Equals(FilterStatus, StringComparison.OrdinalIgnoreCase) ||
                                     FilterStatus.Equals("All", StringComparison.OrdinalIgnoreCase);
                bool matchesModule = !selectedModules.Any() || selectedModules.Contains(clarification.Module);
                bool matchesDate = (FilterFromDate == null || clarification.Date >= FilterFromDate) &&
                                   (FilterToDate == null || clarification.Date <= FilterToDate);

                // Check if it matches search criteria if SearchText is not empty
                bool matchesSearch = true;
                if (IsSearchApplied)
                {
                    matchesSearch = clarification.Number.ToString().Contains(searchTextLower) ||
                                    (clarification.DocumentName?.ToLower().Contains(searchTextLower) ?? false) ||
                                    (clarification.Module?.ToLower().Contains(searchTextLower) ?? false) ||
                                    (clarification.Status?.ToLower().Contains(searchTextLower) ?? false) ||
                                    clarification.Date.ToString("yyyy-MM-dd").Contains(searchTextLower) ||
                                    (clarification.Question?.ToLower().Contains(searchTextLower) ?? false) ||
                                    (clarification.Answer?.ToLower().Contains(searchTextLower) ?? false);
                }

                // If all conditions are met, add the clarification to the filtered list
                if (matchesStatus && matchesModule && matchesDate && matchesSearch)
                {
                    filteredList.Add(clarification);
                }
            }

            // Update the collections
            FilteredClarifications = filteredList;
            Clarifications = filteredList;
        }
        /// <summary>
        /// Resets all filters and clears filtered data.
        /// </summary>
        private void ResetFilter()
        {
            IsFilterApplied = false;
            IsSearchApplied = false;
            IsAllChecked = false;            
            FilterFromDate = null;
            FilterToDate = null;
            FilterStatus = null;
            FilteredClarifications.Clear();
            Clarifications = TempClarifications;
            SearchText = null;
        }

        /// <summary>
        /// Exports data to Excel based on the selected tab.
        /// </summary>
        private void ExportToExcel()
        {
            if (SelectedTab is TabItem tabItem)
            {
                if (tabItem.Header.ToString() == detailsTab)
                {
                    ExportClarificationToExcel();
                }
                else if (tabItem.Header.ToString() == summaryTab)
                {
                    ExportSummaryToExcel();
                }
            }
        }

        /// <summary>
        /// Exports the clarifications data to an Excel file.
        /// </summary>
        private void ExportClarificationToExcel()
        {
            //check if there is no clarifications
            if(filteredClarifications.Count == 0 || clarifications.Count == 0)
            {
                MessageBox.Show(messageBoxText: "No clarifications to export.",
                caption: "Alert",
                button: MessageBoxButton.OK,
                icon: MessageBoxImage.Warning);
                return;
            }
            // Open a SaveFileDialog to specify the file path
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx",
                Title = "Save Clarifications File",
                FileName = "Clarifications.xlsx" // Default file name
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                if (IsFilterApplied)
                {
                    try
                    {
                        repo.ExportClarificationsToExcel(FilteredClarifications, saveFileDialog.FileName);
                        MessageBox.Show(successfullMessageBoxText ,
                        caption: "Success",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                    }
                    catch (COMException ex)
                    {

                        MessageBox.Show($"{ex.Message}");
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                        MessageBox.Show($"{ex.Message}");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"{ex.Message}");
                    }
                }
                else
                {
                    try
                    {
                        repo.ExportClarificationsToExcel(Clarifications, saveFileDialog.FileName);
                        MessageBox.Show(successfullMessageBoxText,
                        caption: "Success",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                    }
                    catch (COMException ex)
                    {

                        MessageBox.Show($"{ex.Message}");
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                        MessageBox.Show($"{ex.Message}");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"{ex.Message}");
                    }
                }
                
            }
        }

        /// <summary>
        /// Exports the summaries data to an Excel file.
        /// </summary>
        private void ExportSummaryToExcel()
        {
            //check if there is no summmaries to export
            if (Summaries.Count == 0)
            {
                MessageBox.Show(messageBoxText: "No summaries to export.",
                caption: "Alert",
                button: MessageBoxButton.OK,
                icon: MessageBoxImage.Warning);
                return;
            }
            // Open a SaveFileDialog to specify the file path
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx",
                Title = "Save Summary File",
                FileName = "Summaries.xlsx" // Default file name
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                try
                {
                    repo.ExportSummaryToExcel(Summaries, saveFileDialog.FileName);
                    MessageBox.Show(successfullMessageBoxText,
                    caption: "Success",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                }
                catch (COMException ex)
                {

                    MessageBox.Show($"{ex.Message}");
                }
                catch (UnauthorizedAccessException ex)
                {
                    MessageBox.Show($"{ex.Message}");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"{ex.Message}");
                }
            }
        }

    }
}
