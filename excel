using System.Collections.Generic;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelDataRow> GetData(string filePath);  // Get data from the Excel file
        List<ExcelDataRow> ApplyFilter(List<ExcelDataRow> data, string column, List<string> selectedValues);  // Apply a filter to the data
    }
}


using OfficeOpenXml;
using ExcelProject.Model;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace ExcelProject.Repo
{
    public class ExcelRepo : IRepo
    {
        public List<ExcelDataRow> GetData(string filePath)
        {
            var result = new List<ExcelDataRow>();

            // Open the Excel file using EPPlus
            using (var package = new ExcelPackage(new FileInfo(filePath)))
            {
                var worksheet = package.Workbook.Worksheets[0];  // Get the first worksheet

                // Read the header row (column names)
                var headerRow = worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column]
                    .Select(cell => cell.Text).ToList();

                // Read each row of data
                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                {
                    var rowData = new ExcelDataRow();

                    // Map columns from Excel to the ExcelDataRow object
                    for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                    {
                        var columnName = headerRow[col - 1];

                        // Use reflection to set the property corresponding to the column name
                        var property = rowData.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(rowData, worksheet.Cells[row, col].Text);
                        }
                    }

                    result.Add(rowData);
                }
            }

            return result;
        }

        public List<ExcelDataRow> ApplyFilter(List<ExcelDataRow> data, string column, List<string> selectedValues)
        {
            if (selectedValues == null || !selectedValues.Any())
                return data;

            return data.Where(row =>
            {
                var property = row.GetType().GetProperty(column);
                if (property != null)
                {
                    var value = property.GetValue(row)?.ToString();
                    return selectedValues.Contains(value);
                }
                return false;
            }).ToList();
        }
    }
}


namespace ExcelProject
{
    public class FilterItem
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }
}

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Repo;
using ExcelProject.Model;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<ExcelDataRow> _data;
        private ObservableCollection<ExcelDataRow> _filteredData;
        private string _filePath;
        private string _selectedColumnFilter;
        private ObservableCollection<string> _columnFilters;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;
        private bool _isFilterApplied;

        private readonly IRepo _repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo repo)
        {
            _repo = repo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelDataRow>();
            _data = new ObservableCollection<ExcelDataRow>();
        }

        public ObservableCollection<ExcelDataRow> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelDataRow> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedColumnFilter
        {
            get => _selectedColumnFilter;
            set { _selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => _columnFilters;
            set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }

        public bool IsFilterApplied
        {
            get => _isFilterApplied;
            set { _isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand CloseCommand { get; }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = _repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelDataRow>(excelData);
                FilteredData = new ObservableCollection<ExcelDataRow>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(
                Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter).GetValue(row)?.ToString())
                    .Distinct()
                    .OrderBy(value => value)
                    .Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

            if (selectedValues.Any())
            {
                var filteredData = _repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
                FilteredData = new ObservableCollection<ExcelDataRow>(filteredData);
                IsFilterApplied = true;
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelDataRow>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelDataRow>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}


using System;
using System.Windows.Input;

namespace ExcelProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute)
            : this(execute, null)
        {
        }

        public RelayCommand(Action execute, Func<bool> canExecute)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}


<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
            <StackPanel Orientation="Horizontal" Margin="10">
                <!-- Dynamic Filter Rows -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="100" SelectedItem="{Binding SelectedColumnFilter}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Vertical" Margin="10">
                    <!-- Select All Checkbox -->
                    <CheckBox Content="Select All" 
                              IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                              Command="{Binding SelectAllCommand}" />

                    <!-- Dynamic Checkbox Filters -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="100">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </StackPanel>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>


public MainWindow()
{
    InitializeComponent();
    DataContext = new MainViewModel(new ExcelRepo());
}


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;
using System.Runtime.InteropServices;
using DocumentFormat.OpenXml.Office2010.Excel;
using System.Reflection;
using System.Xml.Serialization;
using System.Data.Common;

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string _selectedColumnFilter;
        private ObservableCollection<string> _columnFilters;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;
        private bool _isFilterApplied;

        private readonly IRepo _repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo repo)
        {
            _repo = repo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            _data = new ObservableCollection<ExcelData>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedColumnFilter
        {
            get => _selectedColumnFilter;
            set { _selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => _columnFilters;
            set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }

        public bool IsFilterApplied
        {
            get => _isFilterApplied;
            set { _isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand CloseCommand { get; }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = _repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(
                Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter).GetValue(row)?.ToString())
                    .Distinct()
                    .OrderBy(value => value)
                    .Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

            if (selectedValues.Any())
            {
                var filteredData = _repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
                FilteredData = new ObservableCollection<ExcelData>(filteredData);
                IsFilterApplied = true;
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

}


all dfhjkkkkkkk
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string _selectedColumnFilter;
        private ObservableCollection<string> _columnFilters;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;
        private bool _isFilterApplied;

        private readonly IRepo _repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo repo)
        {
            _repo = repo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            _data = new ObservableCollection<ExcelData>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedColumnFilter
        {
            get => _selectedColumnFilter;
            set { _selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => _columnFilters;
            set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }

        public bool IsFilterApplied
        {
            get => _isFilterApplied;
            set { _isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand CloseCommand { get; }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = _repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(
                    excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name)
                );
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(
                Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter).GetValue(row)?.ToString())
                    .Distinct()
                    .OrderBy(value => value)
                    .Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

            if (selectedValues.Any())
            {
                var filteredData = _repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
                FilteredData = new ObservableCollection<ExcelData>(filteredData);
                IsFilterApplied = true;
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class FilterItem : INotifyPropertyChanged
    {
        private string _value;
        private bool _isSelected;

        public string Value
        {
            get => _value;
            set { _value = value; OnPropertyChanged(nameof(Value)); }
        }

        public bool IsSelected
        {
            get => _isSelected;
            set { _isSelected = value; OnPropertyChanged(nameof(IsSelected)); }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}



<Window x:Class="BugTracker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Bug Tracker" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" />
        </Border>

        <!-- File Selection Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="File Name: " VerticalAlignment="Center" Width="80" />
            <TextBox Width="400" Height="30" Margin="5,0,0,0" Padding="4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="50" Margin="5,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" Margin="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="200" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!-- Column Names List -->
                <ListBox ItemsSource="{Binding ColumnFilters}" 
                         SelectedItem="{Binding SelectedColumnFilter}" 
                         Grid.Column="0" Height="150">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <!-- Filter Options -->
                <ListBox ItemsSource="{Binding FilterValues}" Grid.Column="1" Margin="10,0,0,0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.HeaderTemplate>
                        <DataTemplate>
                            <CheckBox Content="Select All" 
                                      IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                                      Command="{Binding SelectAllCommand}" />
                        </DataTemplate>
                    </ListBox.HeaderTemplate>
                </ListBox>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True" Margin="10">
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Width="100" Height="30" HorizontalAlignment="Right" Margin="10" Background="Teal" Command="{Binding CloseCommand}" />
    </Grid>
</Window>











