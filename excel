hu<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Upload Section -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />
        </StackPanel>

        

        <!-- DataGrid Section -->
      
            <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                    <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                    <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                    <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                    <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                    <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                    <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                    <DataGridTextColumn Header="ProductVersion" Binding="{Binding ProductVersion}" Width="100" />
                    <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                    <DataGridTextColumn Header="OSVersion" Binding="{Binding OSVersion}" Width="150" />
                    <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                    <DataGridTextColumn Header="ViewStatus" Binding="{Binding ViewStatus}" Width="150" />
                    <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                    <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                    <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                    <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                    <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                    <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                    <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                    <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                    <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                    <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                    <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                    <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                    <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                    <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                    <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                    <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                    <DataGridTextColumn Header="Binding Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                    <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                    <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                    <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                    <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                    <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                    <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                    <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                    <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                    <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                    <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                    <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                    <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />

                </DataGrid.Columns>
            </DataGrid>
        

    </Grid>

</Window>    


Here's the modified XAML code with a close button added below the DataGrid:
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="Bug Tracker" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="File name: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Command="{Binding LoadCommand}" />
        </StackPanel>

        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="10">
            <TextBlock Text="<Column name 1>" VerticalAlignment="Center" Width="100" />
            <TextBlock Text="<Column name 2>" VerticalAlignment="Center" Width="100" />
            <TextBlock Text="<Column name N>" VerticalAlignment="Center" Width="100" />
        </StackPanel>

        <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.Columns>
                </DataGrid.Columns>
        </DataGrid>

        <StackPanel Orientation="Horizontal" Grid.Row="3" HorizontalAlignment="Right" Margin="10">
            <Button Content="Close" Width="70" Margin="10,0,0,0" Command="{Binding CloseCommand}" />
        </StackPanel>
    </Grid>
</Window>

Changes made:
 * Added a new RowDefinition to the Grid.RowDefinitions to accommodate the close button.
 * Added a new StackPanel in the Grid.Row="3" to hold the close button.
 * Added a Close button within the StackPanel with a Command binding for the close operation (you'll need to implement the CloseCommand in your ViewModel).
This updated XAML code now includes a close button at the bottom of the window, matching the desired format.
Remember to implement the CloseCommand in your ViewModel to handle the close button's click event.
 * https://github.com/Matazoro-Kemtari/ExcelDnaPrismExample
 * https://en.wikipedia.org/wiki/DotNetBrowser
 * https://github.com/clovett/tools
 * https://github.com/samueldjack/VirtualCollection

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Input;

namespace BugTracker
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _filePath;
        private string _errorMessage;
        private bool _isShowDetailsEnabled;
        private ObservableCollection<DataRow> _bugDetails;
        private DataTable _dataTable;

        public string FilePath
        {
            get => _filePath;
            set
            {
                _filePath = value;
                OnPropertyChanged(nameof(FilePath));
                IsShowDetailsEnabled = !string.IsNullOrEmpty(value);
            }
        }

        public string ErrorMessage
        {
            get => _errorMessage;
            set
            {
                _errorMessage = value;
                OnPropertyChanged(nameof(ErrorMessage));
            }
        }

        public bool IsShowDetailsEnabled
        {
            get => _isShowDetailsEnabled;
            set
            {
                _isShowDetailsEnabled = value;
                OnPropertyChanged(nameof(IsShowDetailsEnabled));
            }
        }

        public ObservableCollection<DataRow> BugDetails
        {
            get => _bugDetails;
            set
            {
                _bugDetails = value;
                OnPropertyChanged(nameof(BugDetails));
            }
        }

        public ICommand BrowseFileCommand { get; }
        public ICommand ShowDetailsCommand { get; }
        public ICommand CloseCommand { get; }

        public MainViewModel()
        {
            BrowseFileCommand = new RelayCommand(BrowseFile);
            ShowDetailsCommand = new RelayCommand(ShowDetails, () => IsShowDetailsEnabled);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            BugDetails = new ObservableCollection<DataRow>();
        }

        private void BrowseFile()
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "CSV Files (*.csv)|*.csv",
                Title = "Select CSV File"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePath = openFileDialog.FileName;
                ErrorMessage = string.Empty;
            }
        }

        private void ShowDetails()
        {
            if (!File.Exists(FilePath))
            {
                ErrorMessage = "File not found.";
                return;
            }

            if (Path.GetExtension(FilePath).ToLower() != ".csv")
            {
                ErrorMessage = "Invalid file type. Please select a CSV file.";
                return;
            }

            try
            {
                var lines = File.ReadAllLines(FilePath);
                if (lines.Length == 0)
                {
                    ErrorMessage = "The file is empty.";
                    return;
                }

                ErrorMessage = string.Empty;

                // Process CSV
                var headers = lines[0].Split(',');
                _dataTable = new DataTable();

                foreach (var header in headers)
                    _dataTable.Columns.Add(header);

                for (int i = 1; i < lines.Length; i++)
                {
                    var rowValues = lines[i].Split(',');
                    _dataTable.Rows.Add(rowValues);
                }

                BugDetails = new ObservableCollection<DataRow>(_dataTable.AsEnumerable().ToList());
            }
            catch
            {
                ErrorMessage = "An error occurred while reading the CSV file.";
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}





