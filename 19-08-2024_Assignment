1.EMPLOYEE using selection sor
---------------------------------------------
abstract class Employee
{
    public abstract decimal CalculateSalary();
    public abstract void PrintDetails();
}

class FullTimeEmployee : Employee
{
    public decimal BaseSalary { get; set; }
    public decimal BonusPercentage { get; set; }

    public FullTimeEmployee(decimal baseSalary, decimal bonusPercentage)
    {
        BaseSalary = baseSalary;
        BonusPercentage = bonusPercentage;
    }

    public override decimal CalculateSalary()
    {
        return BaseSalary + (BaseSalary * BonusPercentage);
    }

    public override void PrintDetails()
    {
        Console.WriteLine($"Full-Time Employee | Salary: {CalculateSalary()}");
    }
}

class PartTimeEmployee : Employee
{
    public decimal HourlyRate { get; set; }
    public int HoursWorked { get; set; }

    public PartTimeEmployee(decimal hourlyRate, int hoursWorked)
    {
        HourlyRate = hourlyRate;
        HoursWorked = hoursWorked;
    }

    public override decimal CalculateSalary()
    {
        return HourlyRate * HoursWorked;
    }

    public override void PrintDetails()
    {
        Console.WriteLine($"Part-Time Employee | Salary: {CalculateSalary()}");
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of employees: ");
        int n = int.Parse(Console.ReadLine());

        Employee[] employees = new Employee[n];

        for (int i = 0; i < n; i++)
        {
            Console.WriteLine($"Enter details for Employee {i + 1}:");
            Console.Write("Is the employee Full-Time (y/n)? ");
            string type = Console.ReadLine().ToLower();

            if (type == "y")
            {
                Console.Write("Enter Base Salary: ");
                decimal baseSalary = decimal.Parse(Console.ReadLine());
                Console.Write("Enter Bonus Percentage: ");
                decimal bonusPercentage = decimal.Parse(Console.ReadLine());
                employees[i] = new FullTimeEmployee(baseSalary, bonusPercentage);
            }
            else
            {
                Console.Write("Enter Hourly Rate: ");
                decimal hourlyRate = decimal.Parse(Console.ReadLine());
                Console.Write("Enter Hours Worked: ");
                int hoursWorked = int.Parse(Console.ReadLine());
                employees[i] = new PartTimeEmployee(hourlyRate, hoursWorked);
            }
        }

        Console.WriteLine("\nEmployees before sorting:");
        PrintEmployees(employees);

        SelectionSort(employees);

        Console.WriteLine("\nEmployees after sorting:");
        PrintEmployees(employees);
    }

    static void PrintEmployees(Employee[] employees)
    {
        foreach (Employee employee in employees)
        {
            employee.PrintDetails();
        }
    }

    static void SelectionSort(Employee[] employees)
    {
        int n = employees.Length;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i;
            for (int j = i + 1; j < n; j++)
            {
                if (employees[j].CalculateSalary() < employees[minIndex].CalculateSalary())
                {
                    minIndex = j;
                }
            }

            Employee temp = employees[minIndex];
            employees[minIndex] = employees[i];
            employees[i] = temp;
        }
    }
}
2.SHAPES using selection sort
--------------------------------------------------------------

namespace Interface
{
    public abstract class Shape
    {
        // Abstract method to calculate the area
        public abstract double CalculateArea();

        // Methods to compare shapes based on area
        public bool Gt(Shape other)
        {
            return this.CalculateArea() > other.CalculateArea();
        }

        public bool Eq(Shape other)
        {
            return this.CalculateArea() == other.CalculateArea();
        }

        public bool Lt(Shape other)
        {
            return this.CalculateArea() < other.CalculateArea();
        }

        // Abstract method to read shape-specific data
        public abstract void Read();
    }

    public class Rectangle : Shape
    {
        // Properties for Length and Width
        public double Length { get; set; }
        public double Width { get; set; }

        // Constructor to initialize Length and Width
        public Rectangle(double length, double width)
        {
            Length = length;
            Width = width;
        }

        public Rectangle()
        {
            Length = 0;
            Width = 0;
        }

        // Override the CalculateArea method to return the area of the rectangle
        public override double CalculateArea()
        {
            return Length * Width;
        }

        public override void Read()
        {
            Console.Write("Length: ");
            Length = double.Parse(Console.ReadLine());
            Console.Write("Width: ");
            Width = double.Parse(Console.ReadLine());
        }

        public override string ToString()
        {
            return $"[Rectangle, Length = {Length}, Width = {Width}, Area = {CalculateArea()}]";
        }
    }

    public class Circle : Shape
    {
        // Property for Radius
        public double Radius { get; set; }

        // Constructor to initialize Radius
        public Circle(double radius)
        {
            Radius = radius;
        }

        public Circle()
        {
            Radius = 0;
        }

        // Override the CalculateArea method to return the area of the circle
        public override double CalculateArea()
        {
            return Math.PI * Radius * Radius;
        }

        public override void Read()
        {
            Console.Write("Radius: ");
            Radius = double.Parse(Console.ReadLine());
        }

        public override string ToString()
        {
            return $"[Circle, Radius = {Radius}, Area = {CalculateArea()}]";
        }
    }

    enum ShapeType
    {
        Rectangle = 1,
        Circle = 2
    }

    internal class Program
    {
        static void SelectionSort(Shape[] ar)
        {
            int N = ar.Length;

            for (int I = 0; I < N - 1; I++) // Traverse through the array
            {
                int minIndex = I; // Assume the current element is the minimum

                for (int J = I + 1; J < N; J++) // Find the minimum element in the unsorted portion
                {
                    if (ar[J].Lt(ar[minIndex])) // Compare using the Lt (less than) method
                    {
                        minIndex = J; // Update minIndex if a smaller element is found
                    }
                }

                // Swap the found minimum element with the first element of the unsorted portion
                if (minIndex != I)
                {
                    Shape temp = ar[I];
                    ar[I] = ar[minIndex];
                    ar[minIndex] = temp;
                }
            }
        }

        static void ReadShapes(Shape[] shapes)
        {
            for (int I = 0; I < shapes.Length; I++)
            {
                Console.Write("Shape Type (1-Rectangle, 2-Circle): ");
                ShapeType shapeType = (ShapeType)int.Parse(Console.ReadLine());
                switch (shapeType)
                {
                    case ShapeType.Rectangle:
                        shapes[I] = new Rectangle();
                        break;
                    case ShapeType.Circle:
                        shapes[I] = new Circle();
                        break;
                }
                shapes[I].Read();
            }
        }

        static void PrintShapes(Shape[] shapes)
        {
            foreach (Shape shape in shapes)
            {
                Console.WriteLine(shape);
            }
        }

        static void ProcessShapes()
        {
            Console.Write("Number of shapes: ");
            int N = int.Parse(Console.ReadLine());
            Shape[] shapes = new Shape[N];

            ReadShapes(shapes);
            Console.WriteLine("Before sorting:");
            PrintShapes(shapes);

            // Sorting
            SelectionSort(shapes);

            Console.WriteLine("After sorting:");
            PrintShapes(shapes);
        }

        static void Main(string[] args)
        {
            ProcessShapes();
        }
    }
}
3.SHAPES using insertion sort using list
------------------------------------------------------------------------

        public abstract class Shape
        {
            public abstract double CalculateArea();

            public bool Gt(Shape other)
            {
                return this.CalculateArea() > other.CalculateArea();
            }

            public bool Eq(Shape other)
            {
                return this.CalculateArea() == other.CalculateArea();
            }

            public bool Lt(Shape other)
            {
                return this.CalculateArea() < other.CalculateArea();
            }

            public abstract void Read();
        }

        public class Rectangle : Shape
        {
            public double Length { get; set; }
            public double Width { get; set; }

            public Rectangle(double length, double width)
            {
                Length = length;
                Width = width;
            }

            public Rectangle()
            {
                Length = 0;
                Width = 0;
            }

            public override double CalculateArea()
            {
                return Length * Width;
            }

            public override void Read()
            {
                Console.Write("Length:");
                Length = double.Parse(Console.ReadLine());
                Console.Write("Width:");
                Width = double.Parse(Console.ReadLine());
            }

            public override string ToString()
            {
                return $"[Rectangle, Length = {Length}, Width = {Width}, Area = {CalculateArea()}]";
            }
        }

        public class Circle : Shape
        {
            public double Radius { get; set; }

            public Circle(double radius)
            {
                Radius = radius;
            }

            public Circle()
            {
                Radius = 0;
            }

            public override double CalculateArea()
            {
                return Math.PI * Radius * Radius;
            }

            public override void Read()
            {
                Console.Write("Radius:");
                Radius = double.Parse(Console.ReadLine());
            }

            public override string ToString()
            {
                return $"[Circle, Radius = {Radius}, Area = {CalculateArea()}]";
            }
        }

        enum ShapeType
        {
            Rectangle = 1,
            Circle = 2
        }

        internal class Program
        {
            static void InsertionSort(List<Shape> shapes)
            {
                int N = shapes.Count;
                for (int UI = 1; UI < N; UI++) // unsorted list, forward traversal 
                {
                    Shape target = shapes[UI];
                    int TI = UI; // init target index
                    int SI = UI - 1; // init for sorted list, backward traversal 
                    while (SI >= 0 && shapes[SI].Gt(target)) // sorted list condition and greater comparison
                    {
                        shapes[SI + 1] = shapes[SI]; // shift right parallel to sorted list traversal
                        TI = SI; // change TI if any greater element in the sorted list
                        SI--; // decrement for sorted list 
                    }
                    if (TI != UI)
                    {
                        shapes[TI] = target;
                    }
                }
            }

            static void ReadShapes(List<Shape> shapes)
            {
                Console.Write("Number of shapes:");
                int N = int.Parse(Console.ReadLine());

                for (int I = 0; I < N; I++)
                {
                    Console.Write("Shape Type (1-Rectangle, 2-Circle):");
                    ShapeType shapeType = (ShapeType)int.Parse(Console.ReadLine());
                    Shape shape;
                    switch (shapeType)
                    {
                        case ShapeType.Rectangle:
                            shape = new Rectangle();
                            break;
                        case ShapeType.Circle:
                            shape = new Circle();
                            break;
                        default:
                            throw new InvalidOperationException("Invalid shape type.");
                    }
                    shape.Read();
                    shapes.Add(shape);
                }
            }

            static void PrintShapes(List<Shape> shapes)
            {
                foreach (Shape shape in shapes)
                {
                    Console.Write($"{shape} ");
                }
                Console.WriteLine(); // Ensure it ends with a new line
            }

            static void ProcessShapes()
            {
                List<Shape> shapes = new List<Shape>();

                ReadShapes(shapes);
                Console.WriteLine("Before sorting:");
                PrintShapes(shapes);

                // Sorting
                InsertionSort(shapes);

                Console.WriteLine("After sorting:");
                PrintShapes(shapes);
            }

            static void Main(string[] args)
            {
                ProcessShapes();
            }
        }
    }
