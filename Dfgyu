. Model
The model represents a row in the CSV file. Each property corresponds to a column in the CSV file.

csharp
Copy code
public class BugDetail
{
    public List<string> Columns { get; set; } = new List<string>();
}
2. Repository Interface and Implementation
IRepo
Defines the interface for reading the CSV file.

csharp
Copy code
public interface IRepo
{
    IEnumerable<BugDetail> ReadCsv(string filePath, out List<string> headers);
}
CSVRepo
Implements the CSV file reading logic.

csharp
Copy code
using System.Collections.Generic;
using System.IO;

public class CSVRepo : IRepo
{
    public IEnumerable<BugDetail> ReadCsv(string filePath, out List<string> headers)
    {
        headers = new List<string>();
        var bugDetails = new List<BugDetail>();

        if (!File.Exists(filePath))
        {
            throw new FileNotFoundException("The file does not exist.");
        }

        var lines = File.ReadAllLines(filePath);
        if (lines.Length < 1)
        {
            throw new InvalidDataException("The file is empty.");
        }

        // Read headers
        headers.AddRange(lines[0].Split(','));

        // Read rows
        for (int i = 1; i < lines.Length; i++)
        {
            var values = lines[i].Split(',');
            var bugDetail = new BugDetail();
            bugDetail.Columns.AddRange(values);
            bugDetails.Add(bugDetail);
        }

        return bugDetails;
    }
}
3. ViewModel
The ViewModel manages the business logic and bindings.

csharp
Copy code
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;

public class BugTrackerViewModel : INotifyPropertyChanged
{
    private readonly IRepo _repo;
    private string _filePath;
    private List<string> _headers;

    public event PropertyChangedEventHandler PropertyChanged;

    public string FilePath
    {
        get => _filePath;
        set
        {
            _filePath = value;
            OnPropertyChanged(nameof(FilePath));
            ShowDetailsCommand.RaiseCanExecuteChanged();
        }
    }

    public ObservableCollection<string> Headers { get; set; } = new ObservableCollection<string>();
    public ObservableCollection<BugDetail> BugDetails { get; set; } = new ObservableCollection<BugDetail>();

    public RelayCommand BrowseCommand { get; }
    public RelayCommand ShowDetailsCommand { get; }

    public BugTrackerViewModel(IRepo repo)
    {
        _repo = repo;

        BrowseCommand = new RelayCommand(BrowseFile);
        ShowDetailsCommand = new RelayCommand(ShowDetails, CanShowDetails);
    }

    private void BrowseFile()
    {
        var dialog = new Microsoft.Win32.OpenFileDialog
        {
            Filter = "CSV Files (*.csv)|*.csv|All Files (*.*)|*.*"
        };

        if (dialog.ShowDialog() == true)
        {
            FilePath = dialog.FileName;
        }
    }

    private bool CanShowDetails() => !string.IsNullOrWhiteSpace(FilePath);

    private void ShowDetails()
    {
        try
        {
            BugDetails.Clear();
            Headers.Clear();

            var bugDetails = _repo.ReadCsv(FilePath, out var headers);
            headers.ForEach(h => Headers.Add(h));
            foreach (var bugDetail in bugDetails)
            {
                BugDetails.Add(bugDetail);
            }
        }
        catch (Exception ex)
        {
            System.Windows.MessageBox.Show($"Error: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
        }
    }

    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
4. RelayCommand
The RelayCommand binds UI actions to ViewModel logic.

csharp
Copy code
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public event EventHandler CanExecuteChanged;

    public bool CanExecute(object parameter) => _canExecute == null || _canExecute();

    public void Execute(object parameter) => _execute();

    public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
}
5. View (MainWindow.xaml)
Dynamically generates DataGrid columns based on the headers.

xml
Copy code
<Window x:Class="BugTracker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Bug Tracker" Height="350" Width="600">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0 0 0 10">
            <TextBox Width="400" Text="{Binding FilePath, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" />
            <Button Content="..." Command="{Binding BrowseCommand}" Margin="5 0" />
            <Button Content="Show Details" Command="{Binding ShowDetailsCommand}" Margin="5 0" />
        </StackPanel>

        <DataGrid Grid.Row="1" AutoGenerateColumns="False" ItemsSource="{Binding BugDetails}">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Dynamic Columns">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{Binding Columns}">
                                <TextBlock Text="{Binding}" />
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <Button Content="Close" Command="ApplicationCommands.Close" Grid.Row="2" HorizontalAlignment="Right" Width="100" />
    </Grid>
</Window>
6. Application Startup
Set the data context in MainWindow.xaml.cs:

csharp
Copy code
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new BugTrackerViewModel(new CSVRepo());
    }
}
Key Features
Dynamic Columns without Dictionary: The Columns property is a List<string>, and each element represents a column value.
Dynamic Headers: Dynamically binds DataGrid columns to CSV file headers.
MVVM Structure: Clean separation of concerns.
Let me know if you have any specific questions about this implementation!










ChatGPT can make mistakes. Check important
