public class MainViewModel : INotifyPropertyChanged
{
    private ObservableCollection<ExcelData> data;
    private ObservableCollection<ExcelData> filteredData;
    private ObservableCollection<FilterItem> filterValues;
    private Dictionary<string, ObservableCollection<FilterItem>> columnFiltersDictionary;
    private string selectedColumnFilter;
    private bool isSelectAllChecked;
 // File path of the selected Excel file
    private string filePath;
    private readonly IRepo repo;

    public MainViewModel(IRepo excelRepo)
    {
        repo = excelRepo;
        Data = new ObservableCollection<ExcelData>();
        FilteredData = new ObservableCollection<ExcelData>();
        FilterValues = new ObservableCollection<FilterItem>();
        columnFiltersDictionary = new Dictionary<string, ObservableCollection<FilterItem>>();

        LoadCommand = new RelayCommand(LoadData);
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);
        ExportFilterCommand = new RelayCommand(ExportFilter);
        ImportFilterCommand = new RelayCommand(ImportFilter);
    }
       public string FilePath
  {
      get 
      {
          return filePath;
      } 
      set
      {
          filePath = value; 
          OnPropertyChanged(nameof(FilePath)); 
      }
  }

    public ObservableCollection<ExcelData> Data
    {
        get => data;
        set { data = value; OnPropertyChanged(nameof(Data)); }
    }

    public ObservableCollection<ExcelData> FilteredData
    {
        get => filteredData;
        set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
    }

    public ObservableCollection<FilterItem> FilterValues
    {
        get => filterValues;
        set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
    }

    public string SelectedColumnFilter
    {
        get => selectedColumnFilter;
        set
        {
            if (selectedColumnFilter != value)
            {
                SaveCurrentFilters();
                selectedColumnFilter = value;
                LoadFilterValues();
                OnPropertyChanged(nameof(SelectedColumnFilter));
            }
        }
    }

    public bool IsSelectAllChecked
    {
        get => isSelectAllChecked;
        set
        {
            isSelectAllChecked = value;
            OnPropertyChanged(nameof(IsSelectAllChecked));
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = value;
            }
        }
    }

    public ICommand LoadCommand { get; }
    public ICommand ApplyFilterCommand { get; }
    public ICommand ResetFilterCommand { get; }
    public ICommand ExportFilterCommand { get; }
    public ICommand ImportFilterCommand { get; }

    private void LoadData()
    {
        OpenFileDialog openFileDialog = new OpenFileDialog
        {
            Filter = "Excel Files (*.xlsx)|*.xlsx"
        };

        if (openFileDialog.ShowDialog() == true)
        {
            var filePath = openFileDialog.FileName;
            var excelData = repo.GetData(filePath);
            Data = new ObservableCollection<ExcelData>(excelData);
            FilteredData = new ObservableCollection<ExcelData>(excelData);
            columnFiltersDictionary.Clear();
        }
    }

    private void LoadFilterValues()
    {
        if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

        if (columnFiltersDictionary.ContainsKey(SelectedColumnFilter))
        {
            FilterValues = columnFiltersDictionary[SelectedColumnFilter];
        }
        else
        {
            var distinctValues = Data
                .Select(d => d.GetType().GetProperty(SelectedColumnFilter)?.GetValue(d)?.ToString())
                .Distinct()
                .OrderBy(v => v)
                .ToList();

            FilterValues = new ObservableCollection<FilterItem>(
                distinctValues.Select(v => new FilterItem { Value = v, IsSelected = true })
            );
        }

        IsSelectAllChecked = FilterValues.All(f => f.IsSelected);
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

        var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

        if (selectedValues.Any())
        {
            var filteredData = repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
            FilteredData = new ObservableCollection<ExcelData>(filteredData);

            columnFiltersDictionary[SelectedColumnFilter] = new ObservableCollection<FilterItem>(FilterValues);
        }
        else
        {
            FilteredData = new ObservableCollection<ExcelData>(Data);
        }
    }

    private void ResetFilter()
    {
        FilterValues.ToList().ForEach(f => f.IsSelected = false);
        FilteredData = new ObservableCollection<ExcelData>(Data);
        IsSelectAllChecked = false;
    }

    private void ExportFilter()
    {
        SaveFileDialog saveFileDialog = new SaveFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (saveFileDialog.ShowDialog() == true)
        {
            var filePath = saveFileDialog.FileName;

            var serializer = new XmlSerializer(typeof(Dictionary<string, ObservableCollection<FilterItem>>));
            using (var writer = new StreamWriter(filePath))
            {
                serializer.Serialize(writer, columnFiltersDictionary);
            }
        }
    }

    private void ImportFilter()
    {
        OpenFileDialog openFileDialog = new OpenFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (openFileDialog.ShowDialog() == true)
        {
            var filePath = openFileDialog.FileName;

            var serializer = new XmlSerializer(typeof(Dictionary<string, ObservableCollection<FilterItem>>));
            using (var reader = new StreamReader(filePath))
            {
                columnFiltersDictionary = (Dictionary<string, ObservableCollection<FilterItem>>)serializer.Deserialize(reader);
            }

            if (!string.IsNullOrEmpty(SelectedColumnFilter) && columnFiltersDictionary.ContainsKey(SelectedColumnFilter))
            {
                FilterValues = columnFiltersDictionary[SelectedColumnFilter];
            }
        }
    }

    private void SaveCurrentFilters()
    {
        if (!string.IsNullOrEmpty(SelectedColumnFilter))
        {
            columnFiltersDictionary[SelectedColumnFilter] = new ObservableCollection<FilterItem>(FilterValues);
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

System.NotSupportedException: 'The type System.Collections.Generic.Dictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.ObjectModel.ObservableCollection`1[[ExcelProject.Model.FilterItem, ExcelProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] is not supported because it implements IDictionary.'
What is the changes

[Serializable]
public class SerializableDictionary<TKey, TValue> : List<KeyValuePair<TKey, TValue>>
{
    public SerializableDictionary() { }

    public SerializableDictionary(IDictionary<TKey, TValue> dictionary)
        : base(dictionary.Select(kv => new KeyValuePair<TKey, TValue>(kv.Key, kv.Value)))
    { }

    public IDictionary<TKey, TValue> ToDictionary()
    {
        return this.ToDictionary(kv => kv.Key, kv => kv.Value);
    }
}


private void ExportFilter()
{
    SaveFileDialog saveFileDialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (saveFileDialog.ShowDialog() == true)
    {
        var filePath = saveFileDialog.FileName;

        var serializableDictionary = new SerializableDictionary<string, ObservableCollection<FilterItem>>(columnFiltersDictionary);

        var serializer = new XmlSerializer(typeof(SerializableDictionary<string, ObservableCollection<FilterItem>>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, serializableDictionary);
        }
    }
}



