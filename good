<GroupBox Header="Column Filters" Grid.Row="2" Margin="10" BorderBrush="Gray" BorderThickness="1">
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- Dynamic Checkbox Filters -->
            <ItemsControl ItemsSource="{Binding ColumnFilterOptions}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="{Binding ColumnName}" FontWeight="Bold" />
                            <ItemsControl ItemsSource="{Binding FilterValues}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding Value}" 
                                                  IsChecked="{Binding IsSelected, Mode=TwoWay}" 
                                                  Command="{Binding DataContext.ApplyColumnFilterCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                  CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
    </ScrollViewer>
</GroupBox>


using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;

public class FilterConditionViewModel : INotifyPropertyChanged
{
    public string ColumnName { get; set; }
    public ObservableCollection<FilterValue> FilterValues { get; set; }
}

public class FilterValue : INotifyPropertyChanged
{
    public string Value { get; set; }
    private bool _isSelected;

    public bool IsSelected
    {
        get => _isSelected;
        set
        {
            _isSelected = value;
            OnPropertyChanged(nameof(IsSelected));
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

public class MainViewModel : INotifyPropertyChanged
{
    private ObservableCollection<FilterConditionViewModel> _columnFilterOptions;
    private ObservableCollection<object> _filteredData;
    private ObservableCollection<object> _originalData;

    public ObservableCollection<FilterConditionViewModel> ColumnFilterOptions
    {
        get => _columnFilterOptions;
        set
        {
            _columnFilterOptions = value;
            OnPropertyChanged(nameof(ColumnFilterOptions));
        }
    }

    public ObservableCollection<object> FilteredData
    {
        get => _filteredData;
        set
        {
            _filteredData = value;
            OnPropertyChanged(nameof(FilteredData));
        }
    }

    public ICommand ApplyColumnFilterCommand { get; }

    public MainViewModel()
    {
        _originalData = new ObservableCollection<object>(); // Load original data here.
        FilteredData = new ObservableCollection<object>(_originalData);

        ColumnFilterOptions = new ObservableCollection<FilterConditionViewModel>
        {
            new FilterConditionViewModel
            {
                ColumnName = "Status",
                FilterValues = new ObservableCollection<FilterValue>
                {
                    new FilterValue { Value = "Open" },
                    new FilterValue { Value = "Closed" },
                    new FilterValue { Value = "In Progress" }
                }
            },
            new FilterConditionViewModel
            {
                ColumnName = "Priority",
                FilterValues = new ObservableCollection<FilterValue>
                {
                    new FilterValue { Value = "High" },
                    new FilterValue { Value = "Medium" },
                    new FilterValue { Value = "Low" }
                }
            }
        };

        ApplyColumnFilterCommand = new RelayCommand(ApplyFilters);
    }

    private void ApplyFilters(object parameter)
    {
        var filters = ColumnFilterOptions
            .SelectMany(f => f.FilterValues.Where(v => v.IsSelected).Select(v => new { f.ColumnName, v.Value }))
            .ToList();

        if (!filters.Any())
        {
            FilteredData = new ObservableCollection<object>(_originalData);
            return;
        }

        FilteredData = new ObservableCollection<object>(_originalData.Where(item =>
        {
            foreach (var filter in filters)
            {
                var property = item.GetType().GetProperty(filter.ColumnName);
                if (property == null || property.GetValue(item)?.ToString() != filter.Value)
                    return false;
            }
            return true;
        }));
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

public class RelayCommand : ICommand
{
    private readonly Action<object> _execute;
    private readonly Predicate<object> _canExecute;

    public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter) => _canExecute?.Invoke(parameter) ?? true;
    public void Execute(object parameter) => _execute(parameter);
    public event EventHandler CanExecuteChanged;
    public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
}
