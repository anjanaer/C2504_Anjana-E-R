private void LoadFilterValues()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Check if the column filter already exists
    var existingFilter = ColumnFilterConditions.FirstOrDefault(f => f.ColumnName == SelectedColumnFilter);

    if (existingFilter == null)
    {
        // If no filter condition exists for this column, create a new one
        var newFilter = new FilterCondition
        {
            ColumnName = SelectedColumnFilter,
            FilterItems = new ObservableCollection<FilterItem>(
                Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            )
        };

        // Add the new filter condition to the collection
        ColumnFilterConditions.Add(newFilter);
    }

    // Update IsSelectAllChecked for the newly selected column's filter
    IsSelectAllChecked = existingFilter?.FilterItems.All(f => f.IsSelected) ?? true;
}


private void ApplyFilter()
{
    var filteredData = new ObservableCollection<ExcelData>(Data);

    // Apply filters for each column filter condition
    foreach (var columnFilter in ColumnFilterConditions)
    {
        var selectedValues = columnFilter.FilterItems
            .Where(f => f.IsSelected)
            .Select(f => f.Value)
            .ToList();

        if (selectedValues.Count > 0)
        {
            filteredData = new ObservableCollection<ExcelData>(
                filteredData.Where(dataItem =>
                {
                    var propertyValue = dataItem.GetType().GetProperty(columnFilter.ColumnName)?.GetValue(dataItem)?.ToString();
                    return selectedValues.Contains(propertyValue);
                })
            );
        }
    }

    FilteredData = filteredData;
    IsFilterApplied = FilteredData.Any();
}
private void ResetFilter()
{
    // Reset each column filter condition
    foreach (var columnFilter in ColumnFilterConditions)
    {
        foreach (var filter in columnFilter.FilterItems)
        {
            filter.IsSelected = false;
        }
    }

    FilteredData = new ObservableCollection<ExcelData>(Data);
    IsSelectAllChecked = false;
}


private void ImportFilter()
{
    var dialog = new OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Deserialize XML to filter conditions
        var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
        using (var reader = new StreamReader(filePath))
        {
            var importedFilters = (ObservableCollection<FilterCondition>)serializer.Deserialize(reader);
            ColumnFilterConditions = importedFilters;
        }
    }
}
private void ExportFilter()
{
    var dialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Serialize filter conditions to XML
        var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, ColumnFilterConditions);
        }
    }
}



<ListBox ItemsSource="{Binding ColumnFilterConditions}">
    <ListBox.ItemTemplate>
        <DataTemplate>
            <StackPanel>
                <TextBlock Text="{Binding ColumnName}" />
                <CheckBox Content="Select All" IsChecked="{Binding FilterItems.IsSelected}" />
                <ItemsControl ItemsSource="{Binding FilterItems}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </DataTemplate>
    </ListBox.ItemTemplate>
</ListBox>
private void LoadData()
{
    // Show a file dialog to allow the user to select an Excel file
    var dialog = new OpenFileDialog
    {
        Filter = "Excel Files (*.xlsx;*.xls)|*.xlsx;*.xls"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        try
        {
            // Load the data from the Excel file using the repository
            var data = repo.LoadExcelData(filePath);

            // If data was successfully loaded
            if (data != null && data.Any())
            {
                // Set the Data collection
                Data = new ObservableCollection<ExcelData>(data);

                // Set the FilteredData collection to the full data initially
                FilteredData = new ObservableCollection<ExcelData>(data);

                // Generate the columns for filtering (based on the first data item)
                GenerateColumnFilters(data.First());

                // Update the UI to show the loaded data
                IsFileValid = true; // File is valid
            }
            else
            {
                // Handle the case where data is empty or null
                IsFileValid = false;
                MessageBox.Show("No valid data found in the Excel file.");
            }
        }
        catch (Exception ex)
        {
            // Handle any errors (e.g., file read errors, data parsing errors)
            IsFileValid = false;
            MessageBox.Show($"Error loading data: {ex.Message}");
        }
    }
}

/// <summary>
/// Generates a list of column filters from the first row of the data.
/// </summary>
/// <param name="sampleData">The first data row to extract columns for filtering.</param>
private void GenerateColumnFilters(ExcelData sampleData)
{
    // Assuming the ExcelData class has properties for each column
    ColumnFilters.Clear();

    foreach (var property in sampleData.GetType().GetProperties())
    {
        // Add the property name to the ColumnFilters collection
        ColumnFilters.Add(property.Name);
    }

    // If necessary, you can set the initial selected column filter for UI purposes
    if (ColumnFilters.Any())
    {
        SelectedColumnFilter = ColumnFilters.First(); // Set the default selected filter column
    }
}

---------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using ExcelBugTracker.Model;
using ExcelBugTracker.Repository;
using Microsoft.Win32;
using System.Windows.Input;
using ExcelBugTracker.Command;
using System.Windows;
using System.IO;
using System.Xml.Serialization;
using System.Windows.Controls;
using System.Windows.Data;

namespace ExcelBugTracker.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        // File path of the selected Excel file
        private string filePath;

        // The column currently selected for filtering
        private string selectedColumnFilter;

        // Indicates whether the "Select All" checkbox for filters is checked
        private bool isSelectAllChecked;

        // Indicates whether a filter has been applied to the data
        private bool isFilterApplied;

        // Indicates whether the selected file is a valid Excel file
        private bool isFileValid;

        // Error message to show if the selected file is invalid
        private string fileNameErrorMessage;

        // Holds all the Excel data loaded from the file
        private ObservableCollection<ExcelData> data;

        // Holds the filtered data after applying filters
        private ObservableCollection<ExcelData> filteredData;

        // List of available columns for filtering, based on the Excel data
        private ObservableCollection<string> columnFilters;

        // List of filter options for the selected column
        private ObservableCollection<FilterItem> filterValues;

        private ObservableCollection<FilterCondition> columnFilterConditions;



        // private List<string, ObservableCollection<FilterItem>> columnFiltersDictionary;


        // Repository interface to fetch and manage Excel data
        private IRepo repo;

        ///<summary>
        ///Constructor for initializing commands and properties
        ///</summary>

        public MainViewModel(IRepo excelrepo)
        {
            // Initialize repository interface for interacting with Excel data
            repo = excelrepo;

            // Initialize commands

          //  columnFiltersDictionary = new Dictionary<string, ObservableCollection<FilterItem>>();
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties

            // List of available columns for filtering
            ColumnFilters = new ObservableCollection<string>();
            // Filter options for the selected column
            FilterValues = new ObservableCollection<FilterItem>();
            // Data after filters have been applied
            FilteredData = new ObservableCollection<ExcelData>();
            // All loaded Excel data
            Data = new ObservableCollection<ExcelData>();
           
            // Flag indicating whether the selected file is a valid Excel file
            isFileValid = true;
        }


        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        public string FilePath
        {
            get
            {
                return filePath;
            }
            set
            {
                filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the selected file is valid.
        /// This property indicates whether the Excel file has a valid format.
        /// </summary>
        public bool IsFileValid
        {
            get
            {
                return isFileValid;
            }
            set
            {
                isFileValid = value;
                OnPropertyChanged(nameof(IsFileValid));
            }
        }

        /// <summary>
        /// Gets or sets the error message when the selected file is invalid.
        /// This property holds an error message if the file is not a valid Excel file.
        /// </summary>
        public string FileNameErrorMessage
        {
            get
            {
                return fileNameErrorMessage;

            }

            set
            {
                fileNameErrorMessage = value;
                OnPropertyChanged(nameof(FileNameErrorMessage));
            }
        }


        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>  
        public ObservableCollection<ExcelData> Data
        {
            get
            {
                return data;
            }
            set
            {
                data = value;
                OnPropertyChanged(nameof(Data));
            }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get
            {
                return filteredData;
            }
            set
            {
                filteredData = value;
                OnPropertyChanged(nameof(FilteredData));
            }
        }



        /// <summary>
        /// Gets or sets the collection of available column filters.
        /// This collection holds the list of column names available for filtering the data.
        /// </summary>
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;
            }
            set
            {
                columnFilters = value;
                OnPropertyChanged(nameof(ColumnFilters));
            }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedColumnFilter
        {
            get
            {
                return selectedColumnFilter;

            }
            set
            {
                selectedColumnFilter = value;
                OnPropertyChanged(nameof(SelectedColumnFilter));
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get
            {
                return isSelectAllChecked;

            }
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }
        public ObservableCollection<FilterCondition>ColumnFilterConditions
        {
            get
            {
                return columnFilterConditions;
            }
            set
            {
                columnFilterConditions = value;
                OnPropertyChanged(nameof(ColumnFilterConditions));  
            }
        }





        /// <summary>
        /// Gets or sets a value indicating whether a filter has been applied to the data.
        /// This property indicates if any filter has been applied to the data set.
        /// </summary>
        public bool IsFilterApplied
        {
            get
            {
                return isFilterApplied;
            }
            set
            {
                isFilterApplied = value;
                OnPropertyChanged(nameof(IsFilterApplied));
            }
        }


        // Command to load data from the Excel file
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }

        // Command to import filter settings from an XML file
        public ICommand ImportFilterCommand { get; }

        // Command to export current filter settings to an XML file
        public ICommand ExportFilterCommand { get; }

        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        //// <summary>
        /// Loads data from the Excel file and populates the Data and FilteredData collections.
        /// It also dynamically generates the column filters based on the first row's property names.
        /// </summary>
        private void LoadData()
        {
            // Show a file dialog to allow the user to select an Excel file
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx;*.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                try
                {
                    // Load the data from the Excel file using the repository
                    var data = repo.ReadExcelFile(filePath);

                    // If data was successfully loaded
                    if (data != null && data.Any())
                    {
                        // Set the Data collection
                        Data = new ObservableCollection<ExcelData>(data);

                        // Set the FilteredData collection to the full data initially
                        FilteredData = new ObservableCollection<ExcelData>(data);

                        // Generate the columns for filtering (based on the first data item)
                        GenerateColumnFilters(data.First());

                        // Update the UI to show the loaded data
                        IsFileValid = true; // File is valid
                    }
                    else
                    {
                        // Handle the case where data is empty or null
                        IsFileValid = false;
                        MessageBox.Show("No valid data found in the Excel file.");
                    }
                }
                catch (Exception ex)
                {
                    // Handle any errors (e.g., file read errors, data parsing errors)
                    IsFileValid = false;
                    MessageBox.Show($"Error loading data: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// Generates a list of column filters from the first row of the data.
        /// </summary>
        /// <param name="sampleData">The first data row to extract columns for filtering.</param>
        private void GenerateColumnFilters(ExcelData sampleData)
        {
            // Assuming the ExcelData class has properties for each column
            ColumnFilters.Clear();

            foreach (var property in sampleData.GetType().GetProperties())
            {
                // Add the property name to the ColumnFilters collection
                ColumnFilters.Add(property.Name);
            }

            // If necessary, you can set the initial selected column filter for UI purposes
            if (ColumnFilters.Any())
            {
                SelectedColumnFilter = ColumnFilters.First(); // Set the default selected filter column
            }
        }

        /// <summary>
        /// Determines if the "Show Details" command can execute. It returns true if a file is loaded, otherwise false.
        /// </summary>
        /// <returns>True if a file is loaded, otherwise false.</returns>
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }

        /// <summary>
        /// Loads the distinct filter values from the selected column to be used in the filter options.
        /// It populates the FilterValues collection with the available distinct values and marks them as selected by default.
        /// </summary>
        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Check if the column filter already exists
            var existingFilter = ColumnFilterConditions.FirstOrDefault(f => f.ColumnName == SelectedColumnFilter);

            if (existingFilter == null)
            {
                // If no filter condition exists for this column, create a new one
                var newFilter = new FilterCondition
                {
                    ColumnName = SelectedColumnFilter,
                    FilterItems = new ObservableCollection<FilterItem>(
                        Data
                        .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                        .Distinct()
                        .OrderBy(value => value)
                        .Select(value => new FilterItem { Value = value, IsSelected = true })
                    )
                };

                // Add the new filter condition to the collection
                ColumnFilterConditions.Add(newFilter);
            }

            // Update IsSelectAllChecked for the newly selected column's filter
            IsSelectAllChecked = existingFilter?.FilterItems.All(f => f.IsSelected) ?? true;
        }
        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }



        /// <summary>
        /// Applies the selected filters to the data. It filters the Data collection based on the selected filter values
        /// and updates the FilteredData collection with the filtered results.
        /// </summary>
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        /// <summary>
        /// Resets the filters to their default state, unselecting all filters and restoring the original data to FilteredData.
        /// It also unchecks the "Select All" checkbox.
        /// </summary>
        private void ResetFilter()
        {
            // Reset each column filter condition
            foreach (var columnFilter in ColumnFilterConditions)
            {
                foreach (var filter in columnFilter.FilterItems)
                {
                    filter.IsSelected = false;
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;

        }

        /// <summary>
        /// Opens a file dialog to import filter conditions from an XML file.
        /// The filter conditions are deserialized from the XML file and applied to the FilterValues collection.
        /// It also updates the "Select All" checkbox based on the imported data.
        /// </summary>
        private void ImportFilter()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (ObservableCollection<FilterCondition>)serializer.Deserialize(reader);
                    ColumnFilterConditions = importedFilters;
                }
            }
        }

        /// <summary>
        /// Opens a file dialog to export the current filter conditions to an XML file.
        /// The filter conditions are serialized and saved to the selected XML file.
        /// </summary>
        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, ColumnFilterConditions);
                }
            }
        }


        /// <summary>
        /// Event triggered when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event for a given property name.
        /// </summary>
        /// <param name="propertyName">Name of the property that changed.</param>
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

