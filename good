using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Linq;

public class ExcelRepository
{
    public List<Dictionary<string, string>> ReadExcel(string filePath)
    {
        var rowsData = new List<Dictionary<string, string>>();

        using (var workbook = new XLWorkbook(filePath))
        {
            var worksheet = workbook.Worksheet(1); // Get the first worksheet
            var rows = worksheet.RowsUsed(); // Get all used rows

            // Get the headers (first row)
            var headerRow = rows.First();
            var headers = headerRow.Cells().Select(cell => cell.Value.ToString().Trim()).ToList();

            // Iterate through the rows (excluding the header row)
            foreach (var row in rows.Skip(1))
            {
                var rowData = new Dictionary<string, string>();

                // For each column, use the header value as the key
                for (int i = 0; i < headers.Count; i++)
                {
                    var cellValue = row.Cell(i + 1).Value.ToString(); // Read the cell value
                    rowData[headers[i]] = cellValue; // Map the column header to cell value
                }

                rowsData.Add(rowData); // Add row data to the list
            }
        }

        return rowsData;
    }
}


public class FilterItem
{
    public string ColumnName { get; set; }
    public List<string> FilterValues { get; set; } = new List<string>();
    public bool IsSelected { get; set; }
}



using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Windows.Input;
using System.Xml.Serialization;

public class ExcelViewModel : BaseViewModel
{
    private readonly ExcelRepository _excelRepository;
    public ObservableCollection<FilterItem> ColumnFilters { get; set; } = new ObservableCollection<FilterItem>();
    public ObservableCollection<string> FilteredData { get; set; } = new ObservableCollection<string>();
    public ObservableCollection<string> FilterValues { get; set; } = new ObservableCollection<string>();
    public FilterItem SelectedColumnFilter { get; set; }
    public string FilePath { get; set; }
    public bool IsSelectAllChecked { get; set; }
    public ICommand ApplyFilterCommand { get; set; }
    public ICommand ResetFilterCommand { get; set; }
    public ICommand ImportFilterCommand { get; set; }
    public ICommand ExportFilterCommand { get; set; }

    public ExcelViewModel()
    {
        _excelRepository = new ExcelRepository();
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);
        ImportFilterCommand = new RelayCommand(ImportFilter);
        ExportFilterCommand = new RelayCommand(ExportFilter);
    }

    public void LoadExcelData(string filePath)
    {
        FilePath = filePath;
        var rowsData = _excelRepository.ReadExcel(filePath);

        // Assuming the first row is headers
        var headers = rowsData.First().Keys.ToList();

        // Populate ColumnFilters with columns from Excel
        foreach (var header in headers)
        {
            ColumnFilters.Add(new FilterItem { ColumnName = header });
        }

        // Filter values for the selected column (for example)
        var firstColumn = headers.First();
        var filterValues = rowsData.Select(row => row[firstColumn]).Distinct().ToList();

        foreach (var value in filterValues)
        {
            FilterValues.Add(value);
        }
    }

    public void ApplyFilter()
    {
        if (SelectedColumnFilter != null && SelectedColumnFilter.FilterValues.Any())
        {
            var rowsData = _excelRepository.ReadExcel(FilePath);

            // Filter the data based on the selected column and its filter values
            var filteredData = rowsData.Where(row =>
                SelectedColumnFilter.FilterValues.Contains(row[SelectedColumnFilter.ColumnName]))
                .Select(row => row[SelectedColumnFilter.ColumnName]);

            FilteredData.Clear();
            foreach (var data in filteredData)
            {
                FilteredData.Add(data);
            }
        }
    }

    public void ResetFilter()
    {
        SelectedColumnFilter = null;
        FilterValues.Clear();
        FilteredData.Clear();
    }

    public void ImportFilter()
    {
        var dialog = new Microsoft.Win32.OpenFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (dialog.ShowDialog() == true)
        {
            var filePath = dialog.FileName;

            var serializer = new XmlSerializer(typeof(ObservableCollection<FilterItem>));
            using (var reader = new StreamReader(filePath))
            {
                var importedFilters = (ObservableCollection<FilterItem>)serializer.Deserialize(reader);
                ColumnFilters = importedFilters;

                // If you want to update selected column filter
                SelectedColumnFilter = ColumnFilters.FirstOrDefault();
            }
        }
    }

    public void ExportFilter()
    {
        var dialog = new Microsoft.Win32.SaveFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (dialog.ShowDialog() == true)
        {
            var filePath = dialog.FileName;

            var serializer = new XmlSerializer(typeof(ObservableCollection<FilterItem>));
            using (var writer = new StreamWriter(filePath))
            {
                serializer.Serialize(writer, ColumnFilters);
            }
        }
    }
}



using System.ComponentModel;

public class BaseViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
