private void LoadFilterValues()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Check if the column filter already exists
    var existingFilter = ColumnFilterConditions.FirstOrDefault(f => f.ColumnName == SelectedColumnFilter);

    if (existingFilter == null)
    {
        // If no filter condition exists for this column, create a new one
        var newFilter = new FilterCondition
        {
            ColumnName = SelectedColumnFilter,
            FilterItems = new ObservableCollection<FilterItem>(
                Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            )
        };

        // Add the new filter condition to the collection
        ColumnFilterConditions.Add(newFilter);
    }

    // Update IsSelectAllChecked for the newly selected column's filter
    IsSelectAllChecked = existingFilter?.FilterItems.All(f => f.IsSelected) ?? true;
}


private void ApplyFilter()
{
    var filteredData = new ObservableCollection<ExcelData>(Data);

    // Apply filters for each column filter condition
    foreach (var columnFilter in ColumnFilterConditions)
    {
        var selectedValues = columnFilter.FilterItems
            .Where(f => f.IsSelected)
            .Select(f => f.Value)
            .ToList();

        if (selectedValues.Count > 0)
        {
            filteredData = new ObservableCollection<ExcelData>(
                filteredData.Where(dataItem =>
                {
                    var propertyValue = dataItem.GetType().GetProperty(columnFilter.ColumnName)?.GetValue(dataItem)?.ToString();
                    return selectedValues.Contains(propertyValue);
                })
            );
        }
    }

    FilteredData = filteredData;
    IsFilterApplied = FilteredData.Any();
}
private void ResetFilter()
{
    // Reset each column filter condition
    foreach (var columnFilter in ColumnFilterConditions)
    {
        foreach (var filter in columnFilter.FilterItems)
        {
            filter.IsSelected = false;
        }
    }

    FilteredData = new ObservableCollection<ExcelData>(Data);
    IsSelectAllChecked = false;
}


private void ImportFilter()
{
    var dialog = new OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Deserialize XML to filter conditions
        var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
        using (var reader = new StreamReader(filePath))
        {
            var importedFilters = (ObservableCollection<FilterCondition>)serializer.Deserialize(reader);
            ColumnFilterConditions = importedFilters;
        }
    }
}
private void ExportFilter()
{
    var dialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Serialize filter conditions to XML
        var serializer = new XmlSerializer(typeof(ObservableCollection<FilterCondition>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, ColumnFilterConditions);
        }
    }
}



<ListBox ItemsSource="{Binding ColumnFilterConditions}">
    <ListBox.ItemTemplate>
        <DataTemplate>
            <StackPanel>
                <TextBlock Text="{Binding ColumnName}" />
                <CheckBox Content="Select All" IsChecked="{Binding FilterItems.IsSelected}" />
                <ItemsControl ItemsSource="{Binding FilterItems}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </DataTemplate>
    </ListBox.ItemTemplate>
</ListBox>


