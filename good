<GroupBox Header="Filter Conditions" Grid.Row="2" Margin="10">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- Column Names List -->
        <ListBox ItemsSource="{Binding ColumnFilters}" 
                 SelectedItem="{Binding SelectedColumnFilter}" 
                 Grid.Column="0" Height="150">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Filter Options List -->
        <ListBox ItemsSource="{Binding FilterValues}" 
                 Grid.Column="1" Margin="10,0,0,0">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <!-- "Select All" Checkbox -->
                        <CheckBox Content="Select All" 
                                  IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                                  Command="{Binding SelectAllCommand}" />
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Buttons -->
        <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
            <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
        </StackPanel>
    </Grid>
</GroupBox>

public class MainViewModel : INotifyPropertyChanged
{
    private ObservableCollection<string> _columnFilters;
    private ObservableCollection<FilterValueModel> _filterValues;
    private string _selectedColumnFilter;
    private bool _isSelectAllChecked;

    public MainViewModel()
    {
        ColumnFilters = new ObservableCollection<string> { "Project", "Reporter", "Priority", "Severity" };
        FilterValues = new ObservableCollection<FilterValueModel>();
        SelectAllCommand = new RelayCommand(ExecuteSelectAllCommand);
    }

    public ObservableCollection<string> ColumnFilters
    {
        get => _columnFilters;
        set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
    }

    public ObservableCollection<FilterValueModel> FilterValues
    {
        get => _filterValues;
        set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
    }

    public string SelectedColumnFilter
    {
        get => _selectedColumnFilter;
        set
        {
            _selectedColumnFilter = value;
            OnPropertyChanged(nameof(SelectedColumnFilter));
            UpdateFilterValues(); // Dynamically populate FilterValues
        }
    }

    public bool IsSelectAllChecked
    {
        get => _isSelectAllChecked;
        set
        {
            _isSelectAllChecked = value;
            OnPropertyChanged(nameof(IsSelectAllChecked));
            UpdateSelectAllState(); // Automatically select all filters
        }
    }

    public ICommand SelectAllCommand { get; }

    private void ExecuteSelectAllCommand(object parameter)
    {
        foreach (var filterValue in FilterValues)
        {
            filterValue.IsSelected = IsSelectAllChecked;
        }
    }

    private void UpdateFilterValues()
    {
        // Example logic to populate FilterValues based on SelectedColumnFilter
        FilterValues.Clear();
        if (SelectedColumnFilter == "Project")
        {
            FilterValues.Add(new FilterValueModel { Value = "XRD Measurement", IsSelected = true });
            FilterValues.Add(new FilterValueModel { Value = "Powder XRD", IsSelected = true });
        }
        else if (SelectedColumnFilter == "Reporter")
        {
            FilterValues.Add(new FilterValueModel { Value = "Anza.An", IsSelected = true });
            FilterValues.Add(new FilterValueModel { Value = "Swetha.Ashok", IsSelected = true });
        }

        // Automatically check "Select All"
        IsSelectAllChecked = true;
    }

    private void UpdateSelectAllState()
    {
        foreach (var filterValue in FilterValues)
        {
            filterValue.IsSelected = IsSelectAllChecked;
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public class FilterValueModel : INotifyPropertyChanged
{
    private bool _isSelected;

    public string Value { get; set; }

    public bool IsSelected
    {
        get => _isSelected;
        set { _isSelected = value; OnPropertyChanged(nameof(IsSelected)); }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}


