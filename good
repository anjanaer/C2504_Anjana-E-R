<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
            <StackPanel Orientation="Horizontal" Margin="10">
                <!-- Dynamic Filter Rows -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="100" SelectedItem="{Binding SelectedFilter}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Vertical" Margin="10">
                    <!-- Select All Checkbox -->
                    <CheckBox Content="Select All" IsChecked="{Binding AreAllFiltersSelected, Mode=TwoWay}" />
                    
                    <!-- Dynamic Checkbox Filters -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="100">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </StackPanel>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>


using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<FilterItem> _filterValues;
        private bool _areAllFiltersSelected;

        public ObservableCollection<ExcelData> Data { get; set; }
        public ObservableCollection<ExcelData> FilteredData { get; set; }
        public ObservableCollection<string> ColumnFilters { get; set; }
        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public string SelectedFilter { get; set; }
        public bool AreAllFiltersSelected
        {
            get => _areAllFiltersSelected;
            set
            {
                _areAllFiltersSelected = value;
                foreach (var item in FilterValues)
                {
                    item.IsSelected = _areAllFiltersSelected;
                }
                OnPropertyChanged(nameof(AreAllFiltersSelected));
            }
        }

        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }

        public MainViewModel()
        {
            ColumnFilters = new ObservableCollection<string> { "Column1", "Column2", "Column3" }; // Example
            FilterValues = new ObservableCollection<FilterItem>();
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
        }

        private void ApplyFilter()
        {
            if (SelectedFilter == null || !FilterValues.Any(f => f.IsSelected))
            {
                MessageBox.Show("Select a filter and at least one value.");
                return;
            }

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
            FilteredData = new ObservableCollection<ExcelData>(Data.Where(d => selectedValues.Contains(d.GetType().GetProperty(SelectedFilter).GetValue(d)?.ToString())));
            OnPropertyChanged(nameof(FilteredData));
        }

        private void ResetFilter()
        {
            FilteredData = new ObservableCollection<ExcelData>(Data);
            foreach (var item in FilterValues)
            {
                item.IsSelected = false;
            }
            AreAllFiltersSelected = false;
            OnPropertyChanged(nameof(FilteredData));
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class FilterItem
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }
}


