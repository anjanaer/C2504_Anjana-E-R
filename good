using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;

public class MainViewModel : INotifyPropertyChanged
{
    public ObservableCollection<ColumnFilterOption> ColumnFilters { get; set; }
    public ObservableCollection<Bug> FilteredData { get; set; }
    public ObservableCollection<Bug> OriginalData { get; set; }

    public ICommand ApplyFilterCommand { get; set; }

    public MainViewModel()
    {
        ColumnFilters = new ObservableCollection<ColumnFilterOption>();
        FilteredData = new ObservableCollection<Bug>();
        OriginalData = new ObservableCollection<Bug>
        {
            new Bug { Id = 1, Priority = "High", Summary = "Issue 1" },
            new Bug { Id = 2, Priority = "Low", Summary = "Issue 2" },
            new Bug { Id = 3, Priority = "Immediate", Summary = "Issue 3" },
        };

        // Initialize filters
        var priorityFilter = new ColumnFilterOption { ColumnName = "Priority" };
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Select All", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "High", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Immediate", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Low", IsSelected = true });

        ColumnFilters.Add(priorityFilter);

        // Copy original data
        foreach (var item in OriginalData)
            FilteredData.Add(item);

        // Command to apply filters
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
    }

    private void ApplyFilter(object parameter)
    {
        var selectedFilters = ColumnFilters.FirstOrDefault(c => c.ColumnName == "Priority")?.FilterValues
            .Where(f => f.IsSelected && f.Value != "Select All")
            .Select(f => f.Value)
            .ToList();

        if (selectedFilters != null)
        {
            FilteredData.Clear();
            foreach (var bug in OriginalData.Where(b => selectedFilters.Contains(b.Priority)))
                FilteredData.Add(bug);
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public class Bug
{
    public int Id { get; set; }
    public string Priority { get; set; }
    public string Summary { get; set; }
}
