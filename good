<StackPanel Orientation="Vertical" Margin="10">
    <!-- Select All Checkbox -->
    <CheckBox Content="Select All"
              IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}"
              Margin="0,0,0,5"/>

    <!-- Dynamic Checkbox Filters -->
    <ListBox ItemsSource="{Binding FilterValues}" Height="100">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <CheckBox Content="{Binding Name}" IsChecked="{Binding IsSelected, Mode=TwoWay}"/>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>
</StackPanel>

public class YourViewModel : INotifyPropertyChanged
{
    private bool _isSelectAllChecked;

    public ObservableCollection<FilterValue> FilterValues { get; set; }

    public bool IsSelectAllChecked
    {
        get => _isSelectAllChecked;
        set
        {
            if (_isSelectAllChecked != value)
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                UpdateFilterValuesSelection(_isSelectAllChecked);
            }
        }
    }

    public YourViewModel()
    {
        // Initialize your FilterValues
        FilterValues = new ObservableCollection<FilterValue>
        {
            new FilterValue { Name = "Option 1", IsSelected = false },
            new FilterValue { Name = "Option 2", IsSelected = false },
            // Add more items here
        };

        // Subscribe to individual selections to update Select All status
        foreach (var filterValue in FilterValues)
        {
            filterValue.PropertyChanged += (s, e) =>
            {
                if (e.PropertyName == nameof(FilterValue.IsSelected))
                {
                    UpdateSelectAllStatus();
                }
            };
        }
    }

    private void UpdateFilterValuesSelection(bool isSelected)
    {
        foreach (var filterValue in FilterValues)
        {
            filterValue.IsSelected = isSelected;
        }
    }

    private void UpdateSelectAllStatus()
    {
        IsSelectAllChecked = FilterValues.All(f => f.IsSelected);
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
