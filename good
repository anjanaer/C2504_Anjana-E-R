using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;
        private string _filePath;
        private string selectedFilter;
        private ObservableCollection<FilterItem> filterValues;

        public ObservableCollection<string> ColumnNames { get; set; }
        public ObservableCollection<ExcelData> OriginalData { get; set; }

        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            SelectAllCommand = new RelayCommand(SelectAllFilters);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            ColumnFilters = new ObservableCollection<string>();
            ColumnNames = new ObservableCollection<string>();
            FilteredData = new ObservableCollection<ExcelData>();
            selectedFilter = string.Empty;
            filterValues = new ObservableCollection<FilterItem>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string SelectedFilter
        {
            get => selectedFilter;
            set
            {
                selectedFilter = value;
                LoadFilterValues();
                OnPropertyChanged(nameof(SelectedFilter));
            }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => filterValues;
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand SelectAllCommand { get; }
        public ICommand CloseCommand { get; }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // No filter initially
                OriginalData = new ObservableCollection<ExcelData>(data);

                // Initialize filters
                LoadFilterValues();
            }
        }

        private void LoadFilterValues()
        {
            if (!string.IsNullOrEmpty(SelectedFilter) && Data != null)
            {
                var columnValues = BugTrackerDatas.GetColumnData(SelectedFilter, Data); // Unique column values
                FilterValues = new ObservableCollection<FilterItem>(
                    columnValues.Select(value => new FilterItem { Value = value, IsSelected = false }));
            }
        }

        private void ApplyFilter()
        {
            if (FilterValues.Any(f => f.IsSelected))
            {
                var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

                FilteredData = new ObservableCollection<ExcelData>(
                    Data.Where(d => selectedValues.Contains(d.GetPropertyValue(SelectedFilter)?.ToString())));

                MessageBox.Show("Filters applied successfully!");
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data); // Reset to original data if no filter is selected
                MessageBox.Show("No filters selected. Showing all data.");
            }
        }

        private void SelectAllFilters()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = true;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public ObservableCollection<string> ColumnFilters { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class FilterItem
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }
}

