using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;

public class MainViewModel : INotifyPropertyChanged
{
    public ObservableCollection<ColumnFilterOption> ColumnFilters { get; set; }
    public ObservableCollection<Bug> FilteredData { get; set; }
    public ObservableCollection<Bug> OriginalData { get; set; }

    public ICommand ApplyFilterCommand { get; set; }

    public MainViewModel()
    {
        ColumnFilters = new ObservableCollection<ColumnFilterOption>();
        FilteredData = new ObservableCollection<Bug>();
        OriginalData = new ObservableCollection<Bug>
        {
            new Bug { Id = 1, Priority = "High", Summary = "Issue 1" },
            new Bug { Id = 2, Priority = "Low", Summary = "Issue 2" },
            new Bug { Id = 3, Priority = "Immediate", Summary = "Issue 3" },
        };

        // Initialize filters
        var priorityFilter = new ColumnFilterOption { ColumnName = "Priority" };
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Select All", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "High", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Immediate", IsSelected = true });
        priorityFilter.FilterValues.Add(new FilterValue { Value = "Low", IsSelected = true });

        ColumnFilters.Add(priorityFilter);

        // Copy original data
        foreach (var item in OriginalData)
            FilteredData.Add(item);

        // Command to apply filters
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
    }

    private void ApplyFilter(object parameter)
    {
        var selectedFilters = ColumnFilters.FirstOrDefault(c => c.ColumnName == "Priority")?.FilterValues
            .Where(f => f.IsSelected && f.Value != "Select All")
            .Select(f => f.Value)
            .ToList();

        if (selectedFilters != null)
        {
            FilteredData.Clear();
            foreach (var bug in OriginalData.Where(b => selectedFilters.Contains(b.Priority)))
                FilteredData.Add(bug);
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public class Bug
{
    public int Id { get; set; }
    public string Priority { get; set; }
    public string Summary { get; set; }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>


        <!-- Filter Conditions Section -->

        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
            <StackPanel Orientation="Horizontal" Margin="10" >
                <!-- Dynamic Filter Rows -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="100">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Vertical" Margin="10">
                    <!-- Dynamic Checkbox Filters -->
                    <ItemsControl ItemsSource="{Binding ColumnFilterOptions}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <TextBlock Text="{Binding ColumnNames}" FontWeight="Bold" />
                                    <ItemsControl ItemsSource="{Binding FilterValues}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <CheckBox Content="{Binding Value}" 
                          IsChecked="{Binding IsSelected, Mode=TwoWay}" 
                          Command="{Binding DataContext.ApplyColumnFilterCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                          CommandParameter="{Binding}" />
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
                <!-- Buttons -->
                <StackPanel Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </StackPanel>

        </GroupBox>




        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <!-- Set Background and Foreground Colors -->
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="Product Version" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="100" />
                <DataGridTextColumn Header="Date Submitted" Binding="{Binding DateSubmitted}" Width="150" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OS Version" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="View Status" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                <DataGridTextColumn Header=" Iteration(DB Browser)" Binding="{Binding IterationDBBrowser}" Width="150" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>
</Window>    



Based on the xamlcode add  required code for mainviewmodel
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {

        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;
        private string _filePath;
        public ObservableCollection<string> ColumnNames { get; set; } // List of 44 column names
        public ObservableCollection<ExcelData> OriginalData { get; set; }

        public ObservableCollection<FilterValue> FilterValues { get; set; }
        public ObservableCollection<ColumnFilter> ColumnFilterOptions { get; set; }

        public bool IsFilterApplied { get; private set; }
        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            //ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ColumnFilters = new ObservableCollection<string>(BugTrackerDatas.ColumnNames);
            ColumnNames = new ObservableCollection<string>();
            ColumnFilterOptions = new ObservableCollection<ColumnFilter>();
            FilteredData = new ObservableCollection<ExcelData>();
            OriginalData = new ObservableCollection<ExcelData>
             {
            new ExcelData { Id = "101", Priority = "High", Summary = "Issue 1" },
            new ExcelData { Id = "102", Priority = "Low", Summary = "Issue 2" },
            new ExcelData { Id = "103", Priority = "Immediate", Summary = "Issue 3" },
        };

        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }


        public ObservableCollection<ExcelData> TempData { get; private set; }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }


        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                TempData = new ObservableCollection<ExcelData>(data);
                OriginalData = new ObservableCollection<ExcelData>(data);

                // Initialize column filters after loading data
                //InitializeFilters();
            }
        }



        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private ObservableCollection<string> columnFilters;
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;

            }
            set
            {
                columnFilters = value;
                OnPropertyChanged(nameof(columnFilters));
            }
        }

        public class FilterItem
        {
            public string Value { get; set; } // Display value
            public bool IsSelected { get; set; } // Whether the item is checked

        }
        private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
        {
            // Use reflection to get values for the specified column
            return OriginalData
                .Select(item =>
                {
                    var property = item.GetType().GetProperty(columnName);
                    return property?.GetValue(item)?.ToString();
                })
                .Where(value => !string.IsNullOrEmpty(value)) // Exclude null or empty values
                .Distinct() // Get unique values
                .OrderBy(value => value) // Optional: sort the values
                .ToList();
        }


        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}  



using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using Microsoft.Win32;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _filePath;
        private ObservableCollection<ExcelData> _originalData;
        private ObservableCollection<ExcelData> _filteredData;

        public ObservableCollection<string> ColumnNames { get; set; }
        public ObservableCollection<ExcelData> OriginalData
        {
            get => _originalData;
            set { _originalData = value; OnPropertyChanged(nameof(OriginalData)); }
        }
        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }
        public ObservableCollection<ColumnFilter> ColumnFilterOptions { get; set; }
        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }

        public MainViewModel()
        {
            // Commands
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ExportFilterCommand = new RelayCommand(ExportFilters);
            ImportFilterCommand = new RelayCommand(ImportFilters);

            // Initialize properties
            OriginalData = new ObservableCollection<ExcelData>();
            FilteredData = new ObservableCollection<ExcelData>();
            ColumnNames = new ObservableCollection<string>(); // Populate with actual column names
            ColumnFilterOptions = new ObservableCollection<ColumnFilter>();
        }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (string.IsNullOrEmpty(FilePath)) return;

            // Simulating data loading
            OriginalData = new ObservableCollection<ExcelData>
            {
                new ExcelData { Id = "1", Priority = "High", Summary = "Bug A" },
                new ExcelData { Id = "2", Priority = "Low", Summary = "Bug B" },
                new ExcelData { Id = "3", Priority = "Immediate", Summary = "Bug C" }
            };

            FilteredData = new ObservableCollection<ExcelData>(OriginalData);

            InitializeFilters();
        }

        private void InitializeFilters()
        {
            ColumnFilterOptions.Clear();
            foreach (var columnName in ColumnNames)
            {
                var uniqueValues = GetUniqueValuesForColumn(columnName);
                var filter = new ColumnFilter { ColumnName = columnName };

                foreach (var value in uniqueValues)
                {
                    filter.FilterValues.Add(new FilterValue { Value = value, IsSelected = true });
                }

                ColumnFilterOptions.Add(filter);
            }
        }

        private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
        {
            return OriginalData
                .Select(item =>
                {
                    var property = item.GetType().GetProperty(columnName);
                    return property?.GetValue(item)?.ToString();
                })
                .Where(value => !string.IsNullOrEmpty(value))
                .Distinct()
                .OrderBy(value => value)
                .ToList();
        }

        private void ApplyFilter()
        {
            var filteredData = OriginalData.ToList();

            foreach (var filter in ColumnFilterOptions)
            {
                var selectedValues = filter.FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
                if (selectedValues.Any())
                {
                    filteredData = filteredData.Where(item =>
                    {
                        var property = item.GetType().GetProperty(filter.ColumnName);
                        var value = property?.GetValue(item)?.ToString();
                        return selectedValues.Contains(value);
                    }).ToList();
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(filteredData);
        }

        private void ResetFilter()
        {
            foreach (var filter in ColumnFilterOptions)
            {
                foreach (var filterValue in filter.FilterValues)
                {
                    filterValue.IsSelected = true;
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(OriginalData);
        }

        private void ExportFilters()
        {
            // Export filter logic
        }

        private void ImportFilters()
        {
            // Import filter logic
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ColumnFilter
    {
        public string ColumnName { get; set; }
        public ObservableCollection<FilterValue> FilterValues { get; set; } = new();
    }

    public class FilterValue
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }

    public class ExcelData
    {
        public string Id { get; set; }
        public string Priority { get; set; }
        public string Summary { get; set; }
        // Add other properties as needed
    }
}


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS8370	Feature 'target-typed object creation' is not available in C# 7.3. Please use language version 9.0 or greater.	ExcelProject	C:\Users\2021508\source\repos\ExcelProject\ExcelProject\ViewModel\MainViewModel.cs	176	
public ObservableCollection<FilterValue> FilterValues { get; set; } = new();Solve


Build started at 4:37 PM...
1>------ Build started: Project: ExcelProject, Configuration: Debug Any CPU ------
1>C:\Users\2021508\source\repos\ExcelProject\ExcelProject\ViewModel\MainViewModel.cs(186,18,186,29): error CS0101: The namespace 'ExcelProject.ViewModel' already contains a definition for 'FilterValue'
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
========== Build completed at 4:37 PM and took 00.855 seconds ==========
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _filePath;
        private ObservableCollection<ExcelData> _originalData;
        private ObservableCollection<ExcelData> _filteredData;

        public ObservableCollection<string> ColumnNames { get; set; }
        public ObservableCollection<ExcelData> OriginalData
        {
            get => _originalData;
            set { _originalData = value; OnPropertyChanged(nameof(OriginalData)); }
        }
        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }
        public ObservableCollection<ColumnFilter> ColumnFilterOptions { get; set; }
        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }

        public MainViewModel()
        {
            // Commands
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ExportFilterCommand = new RelayCommand(ExportFilters);
            ImportFilterCommand = new RelayCommand(ImportFilters);

            // Initialize properties
            OriginalData = new ObservableCollection<ExcelData>();
            FilteredData = new ObservableCollection<ExcelData>();
            ColumnNames = new ObservableCollection<string>(); // Populate with actual column names
            ColumnFilterOptions = new ObservableCollection<ColumnFilter>();
        }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (string.IsNullOrEmpty(FilePath)) return;

            // Simulating data loading
            OriginalData = new ObservableCollection<ExcelData>
            {
                new ExcelData { Id = "1", Priority = "High", Summary = "Bug A" },
                new ExcelData { Id = "2", Priority = "Low", Summary = "Bug B" },
                new ExcelData { Id = "3", Priority = "Immediate", Summary = "Bug C" }
            };

            FilteredData = new ObservableCollection<ExcelData>(OriginalData);

            InitializeFilters();
        }

        private void InitializeFilters()
        {
            ColumnFilterOptions.Clear();
            foreach (var columnName in ColumnNames)
            {
                var uniqueValues = GetUniqueValuesForColumn(columnName);
                var filter = new ColumnFilter { ColumnName = columnName };

                foreach (var value in uniqueValues)
                {
                    filter.FilterValues.Add(new FilterValue { Value = value, IsSelected = true });
                }

                ColumnFilterOptions.Add(filter);
            }
        }

        private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
        {
            return OriginalData
                .Select(item =>
                {
                    var property = item.GetType().GetProperty(columnName);
                    return property?.GetValue(item)?.ToString();
                })
                .Where(value => !string.IsNullOrEmpty(value))
                .Distinct()
                .OrderBy(value => value)
                .ToList();
        }

        private void ApplyFilter()
        {
            var filteredData = OriginalData.ToList();

            foreach (var filter in ColumnFilterOptions)
            {
                var selectedValues = filter.FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
                if (selectedValues.Any())
                {
                    filteredData = filteredData.Where(item =>
                    {
                        var property = item.GetType().GetProperty(filter.ColumnName);
                        var value = property?.GetValue(item)?.ToString();
                        return selectedValues.Contains(value);
                    }).ToList();
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(filteredData);
        }

        private void ResetFilter()
        {
            foreach (var filter in ColumnFilterOptions)
            {
                foreach (var filterValue in filter.FilterValues)
                {
                    filterValue.IsSelected = true;
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(OriginalData);
        }

        private void ExportFilters()
        {
            // Export filter logic
        }

        private void ImportFilters()
        {
            // Import filter logic
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ColumnFilter
    {
        public string ColumnName { get; set; }
        public ObservableCollection<FilterValue> FilterValues { get; set; } = new ObservableCollection<FilterValue>();
    }

    public class FilterValue
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }

   

}  

    




