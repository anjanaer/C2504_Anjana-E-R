<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" Margin="20">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300"/>
                    <ColumnDefinition Width="*" />
                    
                </Grid.ColumnDefinitions>

                <!-- Column Names List -->
                <ListBox ItemsSource="{Binding ColumnFilters}" 
                 SelectedItem="{Binding SelectedColumnFilter}" 
                 Grid.Column="0" Height="200">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <!-- Filter Options List -->
                <ListBox ItemsSource="{Binding FilterValues}" 
                 Grid.Column="1" Margin="10,0,0,0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!-- "Select All" Checkbox -->
                                <CheckBox Content="Select All" 
                                  IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                                  Command="{Binding SelectAllCommand}" />
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    
Based on this xaml make updations in the mainviewmodel for selecting a column in columfilters list box automatically select all thecheck boes inside the filtervalues checkbox like how an excel works

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string _selectedColumnFilter;
        private ObservableCollection<string> _columnFilters;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;
        private bool _isFilterApplied;

        private readonly IRepo _repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo repo)
        {
            _repo = repo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            _data = new ObservableCollection<ExcelData>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedColumnFilter
        {
            get => _selectedColumnFilter;
            set { _selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => _columnFilters;
            set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }

        public bool IsFilterApplied
        {
            get => _isFilterApplied;
            set { _isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand CloseCommand { get; }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = _repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(
                Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter).GetValue(row)?.ToString())
                    .Distinct()
                    .OrderBy(value => value)
                    .Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

            if (selectedValues.Any())
            {
                var filteredData = _repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
                FilteredData = new ObservableCollection<ExcelData>(filteredData);
                IsFilterApplied = true;
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }




// Constructor for initializing commands and properties
public MainViewModel(IRepo excelRepo)
{
    // Initialize repository interface for interacting with Excel data
    repo = excelRepo;

    // Initialize commands with appropriate methods and conditions
    LoadCommand = new RelayCommand(LoadData, CanShowDetails); // Command to load data from Excel file
    ShowDialogCommand = new RelayCommand(ShowDialog); // Command to open file dialog for selecting Excel file
    ApplyFilterCommand = new RelayCommand(ApplyFilter); // Command to apply selected filter on data
    ResetFilterCommand = new RelayCommand(ResetFilter); // Command to reset all applied filters
    ImportFilterCommand = new RelayCommand(ImportFilter); // Command to import filter settings from an XML file
    ExportFilterCommand = new RelayCommand(ExportFilter); // Command to export filter settings to an XML file
    CloseCommand = new RelayCommand(() => Application.Current.Shutdown()); // Command to close the application

    // Initialize properties with default values
    ColumnFilters = new ObservableCollection<string>(); // List of available columns for filtering
    FilterValues = new ObservableCollection<FilterItem>(); // Filter options for the selected column
    FilteredData = new ObservableCollection<ExcelData>(); // Data after filters have been applied
    data = new ObservableCollection<ExcelData>(); // All loaded Excel data
    IsFileValid = true; // Flag indicating whether the selected file is a valid Excel file
}
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Command to load data from the Excel file
public ICommand LoadCommand { get; }

// Command to open a file dialog for selecting an Excel file
public ICommand ShowDialogCommand { get; }

// Command to close the application
public ICommand CloseCommand { get; }

// Command to apply the selected filter to the data
public ICommand ApplyFilterCommand { get; }

// Command to reset all applied filters and show unfiltered data
public ICommand ResetFilterCommand { get; }

// Command to import filter settings from an XML file
public ICommand ImportFilterCommand { get; }

// Command to export current filter settings to an XML file
public ICommand ExportFilterCommand { get; }


