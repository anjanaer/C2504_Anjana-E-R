<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" Margin="20">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300"/>
                    <ColumnDefinition Width="*" />
                    
                </Grid.ColumnDefinitions>

                <!-- Column Names List -->
                <ListBox ItemsSource="{Binding ColumnFilters}" 
                 SelectedItem="{Binding SelectedColumnFilter}" 
                 Grid.Column="0" Height="200">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <!-- Filter Options List -->
                <ListBox ItemsSource="{Binding FilterValues}" 
                 Grid.Column="1" Margin="10,0,0,0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!-- "Select All" Checkbox -->
                                <CheckBox Content="Select All" 
                                  IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                                  Command="{Binding SelectAllCommand}" />
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    
Based on this xaml make updations in the mainviewmodel for selecting a column in columfilters list box automatically select all thecheck boes inside the filtervalues checkbox like how an excel works

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string _selectedColumnFilter;
        private ObservableCollection<string> _columnFilters;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;
        private bool _isFilterApplied;

        private readonly IRepo _repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo repo)
        {
            _repo = repo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            _data = new ObservableCollection<ExcelData>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedColumnFilter
        {
            get => _selectedColumnFilter;
            set { _selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => _columnFilters;
            set { _columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set { _filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }

        public bool IsFilterApplied
        {
            get => _isFilterApplied;
            set { _isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }
        public ICommand CloseCommand { get; }

        private void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = _repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(
                Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter).GetValue(row)?.ToString())
                    .Distinct()
                    .OrderBy(value => value)
                    .Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

            if (selectedValues.Any())
            {
                var filteredData = _repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
                FilteredData = new ObservableCollection<ExcelData>(filteredData);
                IsFilterApplied = true;
            }
            else
            {
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }




// Constructor for initializing commands and properties
public MainViewModel(IRepo excelRepo)
{
    // Initialize repository interface for interacting with Excel data
    repo = excelRepo;

    // Initialize commands with appropriate methods and conditions
    LoadCommand = new RelayCommand(LoadData, CanShowDetails); // Command to load data from Excel file
    ShowDialogCommand = new RelayCommand(ShowDialog); // Command to open file dialog for selecting Excel file
    ApplyFilterCommand = new RelayCommand(ApplyFilter); // Command to apply selected filter on data
    ResetFilterCommand = new RelayCommand(ResetFilter); // Command to reset all applied filters
    ImportFilterCommand = new RelayCommand(ImportFilter); // Command to import filter settings from an XML file
    ExportFilterCommand = new RelayCommand(ExportFilter); // Command to export filter settings to an XML file
    CloseCommand = new RelayCommand(() => Application.Current.Shutdown()); // Command to close the application

    // Initialize properties with default values
    ColumnFilters = new ObservableCollection<string>(); // List of available columns for filtering
    FilterValues = new ObservableCollection<FilterItem>(); // Filter options for the selected column
    FilteredData = new ObservableCollection<ExcelData>(); // Data after filters have been applied
    data = new ObservableCollection<ExcelData>(); // All loaded Excel data
    IsFileValid = true; // Flag indicating whether the selected file is a valid Excel file
}
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Holds all the Excel data loaded from the file
private ObservableCollection<ExcelData> data;

// Holds the filtered data after applying filters
private ObservableCollection<ExcelData> filteredData;

// File path of the selected Excel file
private string filePath;

// The column currently selected for filtering
private string selectedColumnFilter;

// List of available columns for filtering, based on the Excel data
private ObservableCollection<string> columnFilters;

// List of filter options for the selected column
private ObservableCollection<FilterItem> filterValues;

// Indicates whether the "Select All" checkbox for filters is checked
private bool isSelectAllChecked;

// Indicates whether a filter has been applied to the data
private bool isFilterApplied;

// Indicates whether the selected file is a valid Excel file
private bool isFileValid;

// Error message to show if the selected file is invalid
private string fileNameErrorMessage;

// Repository interface to fetch and manage Excel data
private readonly IRepo repo;
// Command to load data from the Excel file
public ICommand LoadCommand { get; }

// Command to open a file dialog for selecting an Excel file
public ICommand ShowDialogCommand { get; }

// Command to close the application
public ICommand CloseCommand { get; }

// Command to apply the selected filter to the data
public ICommand ApplyFilterCommand { get; }

// Command to reset all applied filters and show unfiltered data
public ICommand ResetFilterCommand { get; }

// Command to import filter settings from an XML file
public ICommand ImportFilterCommand { get; }

// Command to export current filter settings to an XML file
public ICommand ExportFilterCommand { get; }




/// <summary>
/// Gets or sets the collection of Excel data.
/// This collection holds all the data loaded from the Excel file.
/// </summary>
public ObservableCollection<ExcelData> Data
{
    get => data;
    set { data = value; OnPropertyChanged(nameof(Data)); }
}

/// <summary>
/// Gets or sets the collection of filtered Excel data.
/// This collection holds the data after applying any filters.
/// </summary>
public ObservableCollection<ExcelData> FilteredData
{
    get => filteredData;
    set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
}

/// <summary>
/// Gets or sets the file path of the selected Excel file.
/// This property holds the path to the file selected by the user.
/// </summary>
public string FilePath
{
    get => filePath;
    set { filePath = value; OnPropertyChanged(nameof(FilePath)); }
}

/// <summary>
/// Gets or sets a value indicating whether the selected file is valid.
/// This property indicates whether the Excel file has a valid format.
/// </summary>
public bool IsFileValid
{
    get => isFileValid;
    set { isFileValid = value; OnPropertyChanged(nameof(IsFileValid)); }
}

/// <summary>
/// Gets or sets the error message when the selected file is invalid.
/// This property holds an error message if the file is not a valid Excel file.
/// </summary>
public string FileNameErrorMessage
{
    get => fileNameErrorMessage;
    set { fileNameErrorMessage = value; OnPropertyChanged(nameof(FileNameErrorMessage)); }
}

/// <summary>
/// Gets or sets the selected column for filtering.
/// This property holds the name of the column chosen for filtering the data.
/// </summary>
public string SelectedColumnFilter
{
    get => selectedColumnFilter;
    set { selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
}

/// <summary>
/// Gets or sets the collection of available column filters.
/// This collection holds the list of column names available for filtering the data.
/// </summary>
public ObservableCollection<string> ColumnFilters
{
    get => columnFilters;
    set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
}

/// <summary>
/// Gets or sets a value indicating whether a filter has been applied to the data.
/// This property indicates if any filter has been applied to the data set.
/// </summary>
public bool IsFilterApplied
{
    get => isFilterApplied;
    set { isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
}

/// <summary>
/// Gets or sets the collection of filter values for the selected column.
/// This collection holds the filter options available for the selected column.
/// </summary>
public ObservableCollection<FilterItem> FilterValues
{
    get => filterValues;
    set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
}

/// <summary>
/// Gets or sets a value indicating whether the "Select All" checkbox is checked.
/// This property controls whether all filter options are selected or not.
/// </summary>
public bool IsSelectAllChecked
{
    get => isSelectAllChecked;
    set
    {
        isSelectAllChecked = value;
        OnPropertyChanged(nameof(IsSelectAllChecked));
        SelectAllFilters(value);
    }
}



/// <summary>
/// Opens a file dialog to select an Excel file and checks its validity.
/// If a valid Excel file is selected, the file path is set and any previous error messages are cleared.
/// If the file is invalid, an error message is displayed.
/// </summary>
private void ShowDialog()
{
    var dialog = new OpenFileDialog
    {
        Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
    };

    // Show the file dialog and check if the user selected a file
    if (dialog.ShowDialog() == true)
    {
        FilePath = dialog.FileName;

        // Check if the file has a valid Excel extension (.xlsx or .xls)
        if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
        {
            IsFileValid = true;
            FileNameErrorMessage = string.Empty; // Clear any previous error message
        }
        else
        {
            IsFileValid = false;
            FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
        }
    }
}

/// <summary>
/// Loads data from the Excel file and populates the Data and FilteredData collections.
/// It also dynamically generates the column filters based on the first row's property names.
/// </summary>
private void LoadData()
{
    if (!string.IsNullOrEmpty(FilePath))
    {
        // Retrieve data from the repository
        var excelData = repo.GetData(FilePath);

        // Populate the Data and FilteredData collections
        Data = new ObservableCollection<ExcelData>(excelData);
        FilteredData = new ObservableCollection<ExcelData>(excelData);

        // Dynamically generate the column names from the first row's properties
        ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
    }
}

/// <summary>
/// Loads the distinct filter values from the selected column to be used in the filter options.
/// It populates the FilterValues collection with the available distinct values and marks them as selected by default.
/// </summary>
private void LoadFilterValues()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Get distinct values from the selected column for the filter
    FilterValues = new ObservableCollection<FilterItem>(Data
        .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
        .Distinct()
        .OrderBy(value => value)
        .Select(value => new FilterItem { Value = value, IsSelected = true })
    );

    IsSelectAllChecked = true; // Check the "Select All" checkbox by default
}

/// <summary>
/// Loads data and displays it in a Bug Details table, calling the LoadData method.
/// </summary>
private void ShowDetails()
{
    if (!string.IsNullOrEmpty(FilePath))
    {
        LoadData();
    }
}

/// <summary>
/// Determines if the "Show Details" command can execute. It returns true if a file is loaded, otherwise false.
/// </summary>
/// <returns>True if a file is loaded, otherwise false.</returns>
private bool CanShowDetails()
{
    return !string.IsNullOrEmpty(FilePath);
}

/// <summary>
/// Applies the selected filters to the data. It filters the Data collection based on the selected filter values
/// and updates the FilteredData collection with the filtered results.
/// </summary>
private void ApplyFilter()
{
    // Check if a filter is selected
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Get selected filter values
    List<string> selectedValues = new List<string>();
    foreach (var filter in FilterValues)
    {
        if (filter.IsSelected)
        {
            selectedValues.Add(filter.Value);
        }
    }

    // Check if there are any selected values
    if (selectedValues.Count > 0)
    {
        // Create a new ObservableCollection for filtered data
        ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

        // Filter the data based on the selected values
        foreach (var dataItem in Data)
        {
            // Get the value of the property specified by SelectedFilter
            var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

            // Check if the property value is in the selected values
            if (selectedValues.Contains(propertyValue))
            {
                filteredData.Add(dataItem);
            }
        }

        // Assign the filtered data to FilteredData
        FilteredData = filteredData;
        IsFilterApplied = true;
    }
    else
    {
        // If no filter values are selected, reset to original data
        FilteredData = new ObservableCollection<ExcelData>(Data);
        IsFilterApplied = false;
    }
}

/// <summary>
/// Resets the filters to their default state, unselecting all filters and restoring the original data to FilteredData.
/// It also unchecks the "Select All" checkbox.
/// </summary>
private void ResetFilter()
{
    foreach (var filter in FilterValues)
    {
        filter.IsSelected = false;
    }

    // Restore the original data to FilteredData
    FilteredData = new ObservableCollection<ExcelData>(Data);
    IsSelectAllChecked = false;
}

/// <summary>
/// Selects or unselects all filters in the FilterValues collection based on the "Select All" checkbox state.
/// </summary>
/// <param name="selectAll">True to select all filters, false to unselect them.</param>
private void SelectAllFilters(bool selectAll)
{
    foreach (var filter in FilterValues)
    {
        filter.IsSelected = selectAll;
    }

    OnPropertyChanged(nameof(FilterValues)); // Notify property change
}

/// <summary>
/// Opens a file dialog to import filter conditions from an XML file.
/// The filter conditions are deserialized from the XML file and applied to the FilterValues collection.
/// It also updates the "Select All" checkbox based on the imported data.
/// </summary>
private void ImportFilter()
{
    var dialog = new OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Deserialize XML to filter conditions
        var serializer = new XmlSerializer(typeof(List<FilterItem>));
        using (var reader = new StreamReader(filePath))
        {
            var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
            FilterValues = new ObservableCollection<FilterItem>(importedFilters);
        }

        // Update the "Select All" checkbox based on imported data
        IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
    }
}

/// <summary>
/// Opens a file dialog to export the current filter conditions to an XML file.
/// The filter conditions are serialized and saved to the selected XML file.
/// </summary>
private void ExportFilter()
{
    var dialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Serialize filter conditions to XML
        var serializer = new XmlSerializer(typeof(List<FilterItem>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, FilterValues.ToList());
        }
    }
}

/// <summary>
/// Raises the PropertyChanged event to notify the UI that a property value has changed.
/// </summary>
/// <param name="propertyName">The name of the property that has changed.</param>
protected virtual void OnPropertyChanged(string propertyName) =>
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));



namespace ExcelProject.Repo
{
    /// <summary>
    /// Defines the contract for a repository that interacts with Excel data.
    /// Provides methods for retrieving data from an Excel file and applying filters to it.
    /// </summary>
    public interface IRepo
    {
        /// <summary>
        /// Retrieves data from an Excel file at the specified file path.
        /// The data is returned as a list of ExcelData objects.
        /// </summary>
        /// <param name="filePath">The file path to the Excel file to retrieve data from.</param>
        /// <returns>A list of ExcelData objects representing the rows of data in the Excel file.</returns>
        List<ExcelData> GetData(string filePath);

        /// <summary>
        /// Applies a filter to the given data based on the selected column and filter values.
        /// Returns a new list of ExcelData objects that match the filter criteria.
        /// </summary>
        /// <param name="data">The list of ExcelData objects to filter.</param>
        /// <param name="column">The column name to apply the filter on.</param>
        /// <param name="selectedValues">The list of selected filter values to match against.</param>
        /// <returns>A list of filtered ExcelData objects.</returns>
        List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues);
    }
}


