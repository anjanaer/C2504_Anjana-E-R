1.Variables
--------------------------------
  public class Student
  {
      public string Name { get; set; }
      public static int Id = 12;
      public const float Pi = 3.14f;
      public readonly bool flag;


      public Student( string name, bool flag)
      {

          Name = name;
          this.flag = flag;
      }
  }
  class Program
  {
      public static void Main(string[] args)
      {
          Console.WriteLine($"id : {Student.Id}");
          Console.WriteLine($"{Student.Pi}");
          Student s = new Student( "Anju",true);
          Console.WriteLine($"name : {s.Name}");
          Console.WriteLine($"flag : {s.flag}");
      }
  }
  output

id : 12
3.14
name : Anju
flag : True
Press any key to continue . . .

2.Static methods

 public class Student
 {
     public string Name { get; set; }
     public int Id { get; set; }


     public Student( string name, int id)
     {

         Name = name;
         Id = id;
     }
     public static void Animal()
     {
         Console.WriteLine("Animal is sleeping");
     }
 }
 class Program
 {
     public static void Main(string[] args)
     {
         Student.Animal();
         Student s = new Student("Anju",3);
         Console.WriteLine($"name : {s.Name}   id : {s.Id}");

     }
 }
 3.Static constructor
 A static constructor is called only once, when the type is initialized.
A static constructor cannot be called explicitly.
A static constructor is thread-safe, meaning it is guaranteed to be called only once, even in a multi-threaded environment.
A static constructor can only access static members of the class.
    private static int _staticField;

    static MyClass()
    {
        _staticField = 10;
        Console.WriteLine("Static constructor called");
    }

    public static  void PrintStaticField()
    {
        Console.WriteLine($"Static field value: {_staticField}");
    }
    public  void PrintInstanceField()
    {
        Console.WriteLine("Hi");
    }

}

class Program
{
    public static void Main(string[] args)
    {
        MyClass.PrintStaticField();
        MyClass obj = new MyClass();
        obj.PrintInstanceField();

    }
}
4. static class


public static class MyClass
{
    private static int _staticField;

    static MyClass()
    {
        _staticField = 10;
        Console.WriteLine("Static constructor called");
    }

    public static void PrintStaticField()
    {
        Console.WriteLine($"Static field value: {_staticField}");
    }

    // Removed PrintInstanceField method, as it's not applicable in a static class
}

class Program
{
    public static void Main(string[] args)
    {
        MyClass.PrintStaticField();
        // Removed object creation, as MyClass is now a static class
    }
}

5.Inheritance
 public class Animal
 {
     public string Name { get; set; }
     public string Colour { get; set; }
     public Animal(string name, string colour) 
     {
         Name=name; 
         Colour=colour;
     }

     public void Sleep()
     {
         Console.WriteLine("Animal is Sleeping");
     }
 }
 class Dog : Animal
 {
     public int Age { get; set; }
     public Dog(string name, string colour,int age ) : base(name,colour)
     {
         Age = age;
     }
     public void Bark()
     {
         Console.WriteLine("Dog is Barking");
     }
 }
 class Program
 {
     public static void Main(string[] args)
     {
         Dog myDog = new Dog("Bruno","Black",6);
         myDog.Sleep();
         myDog.Bark();
         Console.WriteLine($"name :{myDog.Name} colour : {myDog.Colour} Age :{myDog.Age}");
     }
 }


 2.Abstraction 
  public abstract class Animal
 {
     public abstract void MakeSound();
     public void Sleep()
     {
         Console.WriteLine("Sleeping");
     }

 }
 public class Dog : Animal
 {
     public override void MakeSound()
     {
         Console.WriteLine("Bow bow");
     }
 }
 class Program
 {
     public static void Main(string[] args)
     {
         Animal MyDog = new Dog();
         MyDog.MakeSound();
         MyDog.Sleep();

         Dog dog = new Dog();
         dog.MakeSound();
         dog.Sleep();
     }

 }

 3.Polymorphism
 Method overriding
     public virtual void MakeSound()
    {
        Console.WriteLine("Meow");
    }
    public void Sleep()
    {
        Console.WriteLine("Sleeping");
    }

}
public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Bow bow");
    }
}
class Program
{
    public static void Main(string[] args)
    {
        Animal MyDog = new Dog();
        MyDog.MakeSound();
        MyDog.Sleep();

        Dog dog = new Dog();
        dog.MakeSound();
        dog.Sleep();

    }

}
Method overloading
public class Calculator
{
    public int Add(int x, int y)
    {
        return x + y;
    }
    public double Add(int x, double y)
    {
        return x + y;
    }
    public double Add(double x, int y)
    {
        return x + y;
    }
    public int Add(int x, int y, int z)
    {
        return x + y + z;
    }
}
class Program
{
    public static void Main(string[] args)
    {
        Calculator calculator = new Calculator();
        Console.WriteLine(calculator.Add(2, 3));
        Console.WriteLine(calculator.Add(3, 4.55));
        Console.WriteLine(calculator.Add(6.5, 2));
        Console.WriteLine(calculator.Add(1, 2, 3)); 

    }
}
4.Interface
 public interface IAnimal
 {
     void Sleep();
    
 }
 public interface IBird
 {
     void Fly();
 }
 class Animal : IAnimal, IBird
 {
     public void Sleep()
     {
         Console.WriteLine("Animal is sleeping");
     }
     public void Fly()
     {
         Console.WriteLine("Bird is Flying");
     }
 }
 class Program
 {
     static void Main(string[] args)
     {
         Animal animal = new Animal();
             animal.Fly();
             animal.Sleep();
         
     }
 }
 
6.FizzBuzz
 class Program
 {
     static void Main(string[] args)
     {
         for (int i = 1; i <= 100; i++)
         {
             if ((i % 3 == 0) && (i % 5 == 0))
             {
                 Console.WriteLine("Fizz Buzz");
             }
             else if (i % 3 == 0)
             {
                 Console.WriteLine("Fizz");
             }
             else if ((i % 5 == 0))
             {
                 Console.WriteLine("Buzz");
             }
             else
             {
                 Console.WriteLine(i);
             }
             
         }
     }
 }
 
7.Switch
 class Program
 {
     static void Main(string[] args)
     {
         int day = 3;
         switch (day)
         { 
            case 1:
                 Console.WriteLine("Monday");
                 break;

             case 2:
                 Console.WriteLine("Tuesday");
                 break;

             case 3:
                 Console.WriteLine("Wednesday");
                 break;

             case 4:
                 default:
                 Console.WriteLine("Another any day");
                 break;

         }
     }
 }
8.Even numbers up to 10
 class Program
 {
     static void Main(string[] args)
     {
         for (int i = 0; i <= 10; i++) 
         {
            if (i % 2 !=0)
             {
                continue;
             }
            Console.WriteLine(i);
         }
     }
 }
9.
class Program
{
    static void Main(string[] args)
    {
        int[] numbers = { 1, 2, 3, 4, 5 };
        foreach (var num in numbers)
        {
            Console.WriteLine(num);
        }

    }
10.
static void Main(string[] args)
{
    int i = 0;
    while(i<5)
    {
        Console.WriteLine(i);
        i++;
    }

}
11.
 static void Main(string[] args)
 {
     int i = 0;
     do
     {
         Console.WriteLine(i);
         i++;
     } while (i < 5);
}

12.find average

    static double Findaverage( double num1,double num2)
    {
        double sum = num1 + num2;
        double average = sum / 2;
        return average;
    }
    static void TestFindaverage()
    {
        Console.WriteLine("Enter num1:");
        double num1 = double.Parse(Console.ReadLine());
        Console.WriteLine("Enter num2:");
        double num2 = double.Parse(Console.ReadLine());
        double average = Findaverage(num1,num2);
        Console.WriteLine("average:"+ average);


    }

    static void Main(string[] args)
    {
        TestFindaverage();
    }
}
13.Cube
 internal class Program
 { 
     static int FindCube( int num)
     {
         int cube = num*num*num; 
         return cube;
     }
     static void TestFindCube()
     {
         Console.WriteLine("Enter num:");
         int num = int.Parse(Console.ReadLine());
         int cube = FindCube(num);
         Console.WriteLine("Cube:" + cube);


     }

     static void Main(string[] args)
     {
         TestFindCube();
     }
 }

14.Odd or Even



        static bool IsOddOrEven(int num)
        {
            if(num%2 == 0)
            {
                return true;
            }
            return false;
        }
        static void TestIsOddOrEven()
        {
            Console.WriteLine("Enter num");
            int num = int.Parse(Console.ReadLine());
            if (IsOddOrEven( num))
            {
                Console.WriteLine("Even");
            }
            else
            {
                Console.WriteLine("Odd");
            }
        }
        static void Main(string[] args)
        { 
            TestIsOddOrEven();
        }

    }

15.
    static void PrintNnaturalNumbers(int n)
    {
        for(int i = 1; i<=n; i++)
        {
            Console.WriteLine(i); ; 
        }
    }
    static void TestPrintNnaturalNumber()
    {
        Console.WriteLine("Enter n :");
        int n = int.Parse(Console.ReadLine());
        Console.WriteLine("Numbers :");
        PrintNnaturalNumbers(n);


    }
    static void Main(string[] args)
    {
        TestPrintNnaturalNumber();
    }

}   


16.
static bool IsArmstrong(int num)
{
    int temp = num;
    int sum = 0;
    while (num != 0)
    {
        int rem= num % 10;
        sum = sum+ (rem*rem*rem);
        num = num / 10;
    }
    return temp== sum;
    
   
}
static void TestIsArmstrong()
{
    Console.WriteLine("Enter the number:");
    int num=int.Parse(Console.ReadLine());
     if(IsArmstrong(num))
     {
         Console.WriteLine("The number is Armstrong");
     }
     else
     {
        Console.WriteLine("The number is not Armstrong");
     }

}
static void Main(string[] args)
{
    TestIsArmstrong();
}

17.


        static bool IsPalindrome(int num)
        {
            int temp = num;
            int reverse = 0;
            while (num != 0)
            {
                int remainder = num % 10;
                reverse = remainder + (reverse * 10);
                num = num / 10;
            }
            return temp== reverse;
            
           
        }
        static void TestIsPalindrome()
        {
            Console.WriteLine("Enter the number:");
            int num=int.Parse(Console.ReadLine());
             if(IsPalindrome(num))
             {
                 Console.WriteLine("The number is Palindrome");
             }
             else
             {
                Console.WriteLine("The number is not Palindrome");
             }

        }
        static void Main(string[] args)
        {
            TestIsPalindrome();
        }



    }   

***Reverse of a number
    static int FindReverse(int num)
    {
        
        int reverse = 0;
        while (num != 0)
        {
            int remainder = num % 10;
            reverse = remainder + (reverse * 10);
            num = num / 10;
        }
        return  reverse;


    }
    static void TestFindReverse()
    {
        Console.WriteLine("Enter the number:");
        int num = int.Parse(Console.ReadLine());
        int reverse = FindReverse(num);
        Console.WriteLine("Reverse: " + reverse);

    }
    static void Main(string[] args)
    {
        TestFindReverse();
    
    }



}
18.Factorial
  
        static void Main(string[] args)
        {
            int fact = 1;
            Console.WriteLine("Enter the number : ");
            int num=int.Parse(Console.ReadLine());
            for(int i = 1; i <=num; i++)
            {
                fact = fact * i;
               

            }
            Console.WriteLine("Factotial:" + fact);
        }
or
 internal class Program
 {
    
     static int FindFactorial(int num)
     {
         int fact = 1;
         for (int i = 1; i <=num; i++)
         {
            fact = fact * i;
         }
         return fact;
     }
     static void TestFindFactorial()
     {
         Console.WriteLine("Enter the num:");
         int num=int.Parse(Console.ReadLine());
         int factorial=FindFactorial( num);
         Console.WriteLine("Factorial :" + factorial);

     }



     static void Main(string[] args)
     {
         TestFindFactorial();
     }



 }   

19.   static bool IsPerfectNumber(int num)
   {
        int sum = 0;
        for(int i = 1; i <num; i++)
        {
            if(num%i == 0)
            {
                sum += i;
            }
           
        }
        return sum == num;

    }
    static void TestIsPerfectNumber()
    {
        Console.WriteLine("Enter the number");
        int num = int.Parse(Console.ReadLine());
        if(IsPerfectNumber(num))
        {
            Console.WriteLine("perfect");
        }
        else
        {
            Console.WriteLine("not perfect");
        }

    }


    static void Main(string[] args)
    {
        TestIsPerfectNumber();
    }



}   

20.Leapyear
internal class Program
{
   static bool IsLeapyear(int year)
    {
        if(year % 400==0)
        {
            return true;
        }
        else if ((year % 100 !=0) &&(year % 4==0) )
        {
            return true;
        }
        return false;
    }
    static void TestIsLeapyear()
    {
        Console.WriteLine("Enter the year :");
        int year = int.Parse(Console.ReadLine());
        if ((IsLeapyear( year)))
        {
            Console.WriteLine("Is Leap year");
        }
        else
        {
            Console.WriteLine("Not is  Leapyear");
        }
    }
    static void Main(string[] args)
    {
        TestIsLeapyear();
    }
}


21. Check prime
    static bool Isprime(int num)
    { 
        if(num <=1)
        {
            return false;
        }
        for(int i = 2; i < Math.Sqrt(num); i++)
        {
           if(num % i == 0)
            {
                return false;
            }
        }
        return true;
    }
    static void TestIsPrime()
    {
        Console.WriteLine("Enter the number:");
        int num = int.Parse (Console.ReadLine());
        if(Isprime(num))
        {
            Console.WriteLine("Number is Prime " );
        }
        else
        {
            Console.WriteLine("number is not Prime " );
        }
    }
   
    static void Main(string[] args)
    {
        TestIsPrime();
    }

}   

22.Fibanocci series
  static void PrintFibanocciseries(int numOfterms)
    {
        int firstTerm = 0;
        int secondTerm = 1;
        Console.Write(firstTerm +" "+ secondTerm + " ");
        for(int i = 2;i< numOfterms;i++)
        {
           int nextTerm = firstTerm+secondTerm;
            Console.Write(nextTerm + " ");
            firstTerm = secondTerm;
            secondTerm = nextTerm;
        }
      
    }
    static void TestPrintFibanocciseries()
    {
        Console.WriteLine("Enter the NumOfterms");
        int numOfterms=int.Parse(Console.ReadLine());
        PrintFibanocciseries(numOfterms);
        

    }
    static void Main(string[] args)
    {
        TestPrintFibanocciseries();
    }

}
   
