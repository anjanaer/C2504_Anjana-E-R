ExcelRepo

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;
using ExcelProject.Repo;
using ClosedXML.Excel;


namespace ExcelProject.ExcelRepo
{
    /// <summary>
    /// Repository for handling Excel file operations.
    /// </summary>
    public class ExcelRepository : IRepo
    {
         
        /// <summary>
        /// Reads data from an Excel file and maps it to a list of <see cref="ExcelData"/>.
        /// </summary>
        /// <param name="filePath">The path of the Excel file to read.</param>
        /// <returns>A list of <see cref="ExcelData"/> populated with data from the Excel file.</returns>
        public List<ExcelData> ReadExcelFile(string filePath)
        {
            var data = new List<ExcelData>();

            if (File.Exists(filePath))
            {
                using (var workbook = new XLWorkbook(filePath))
                {
                    var worksheet = workbook.Worksheet(1); // Read the first worksheet
                    foreach (var row in worksheet.RowsUsed().Skip(1)) // Skip header row
                    {
                        data.Add(new ExcelData
                        {
                            Id = row.Cell(1).Value.ToString(),
                            Project = row.Cell(2).Value.ToString(),
                            Reporter = row.Cell(3).Value.ToString(),
                            AssignedTo = row.Cell(4).Value.ToString(),
                            Priority = row.Cell(5).Value.ToString(),
                            Severity = row.Cell(6).Value.ToString(),
                            Reproducibility = row.Cell(7).Value.ToString(),
                            ProductVersion = row.Cell(8).Value.ToString(),
                            Category = row.Cell(9).Value.  ToString(),
                            DateSubmitted = row.Cell(10).Value.ToString(),
                            OS = row.Cell(11).Value.ToString(),
                            OSVersion = row.Cell(12).Value.ToString(),
                            Platform = row.Cell(13).Value.ToString(),
                            ViewStatus = row.Cell(14).Value.ToString(),
                            Updated = row.Cell(15).Value.ToString(),
                            Summary = row.Cell(16).Value.ToString(),
                            Status = row.Cell(17).Value.ToString(),
                            Resolution = row.Cell(18).Value.ToString(),
                            FixedInVersion = row.Cell(19).Value.ToString(),
                            Description = row.Cell(20).Value.ToString(),
                            StepsToReproduce = row.Cell(21).Value.ToString(),
                            CodeOwner = row.Cell(22).Value.ToString(),
                            DateResolved = row.Cell(23).Value.ToString(),
                            DefectImpactToUser = row.Cell(24).Value.ToString(),
                            DefectType = row.Cell(25).Value.ToString(),
                            Iteration = row.Cell(26).Value.ToString(),
                            IterationDataManager = row.Cell(27).Value.ToString(),
                            IterationXRDMeasurement = row.Cell(28).Value.ToString(),
                            Module = row.Cell(29).Value.ToString(),
                            ModuleCommonPlugins = row.Cell(30).Value.ToString(),
                            ODCPeriod = row.Cell(31).Value.ToString(),
                            PhaseOfOrigin = row.Cell(32).Value.ToString(),
                            Responsibility = row.Cell(33).Value.ToString(),
                            TestCaseId = row.Cell(34).Value.ToString(),
                            TestedBy = row.Cell(35).Value.ToString(),
                            TestingLevel = row.Cell(36).Value.ToString(),
                            Version = row.Cell(37).Value.ToString(),
                            IterationPowderXRD = row.Cell(38).Value.ToString(),
                            IterationSmartFlex = row.Cell(39).Value.ToString(),
                            IterationDBBrowser = row.Cell(40).Value.ToString(),
                            IterationMDA = row.Cell(41).Value.ToString(),
                            IterationXRDDSCAnalysis = row.Cell(42).Value.ToString(),
                            Scope = row.Cell(43).Value.ToString(),
                            BugAnalysisStatus = row.Cell(44).Value.ToString(),
                        });
                    }
                }
            }

            return data;
        }
    }
}
---------------------------------------------------------------------------------------------------------
Model
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DocumentFormat.OpenXml.Math;
using System.IO;

namespace ExcelProject.Model
{
    public class ExcelData
    {
        public string Id {  get; set; }
        public string Project { get; set; }
        public string Reporter { get; set; }

        public string AssignedTo { get; set; }

        public string Priority { get; set; }
        public string Severity { get; set; }
        public string Reproducibility { get; set; }
        public string ProductVersion { get; set; }
        public string Category { get; set; }

        public string DateSubmitted { get; set; }
        public string OS { get; set; }

        public string OSVersion { get; set; }

        public string Platform { get; set; }
        public string ViewStatus { get; set; }
        public string Updated { get; set; }
        public string Summary { get; set; }
        public string Status { get; set; }
        public string Resolution { get; set; }
        public string FixedInVersion { get; set; }
        public string Description { get; set; }
        public string StepsToReproduce { get; set; }

        public string CodeOwner { get; set; }
        public string DateResolved { get; set; }

        public string DefectImpactToUser { get; set; }
        public string DefectType { get; set; }

        public string Iteration { get; set; }
        public string IterationDataManager { get; set; }
        public string IterationXRDMeasurement { get; set; }
        public string Module { get; set; }

        public string ModuleCommonPlugins { get; set; }

        public string ODCPeriod { get; set; }
        public string PhaseOfOrigin { get; set; }
        public string Responsibility { get; set; }
        public string TestCaseId { get; set; }
        public string TestedBy { get; set; }
        public string TestingLevel { get; set; }
        public string Version { get; set; }
        public string IterationPowderXRD{ get; set; }
        public string IterationSmartFlex { get; set; }

        public string IterationDBBrowser { get; set; }
        public string IterationMDA { get; set; }

        public string IterationXRDDSCAnalysis { get; set; }

        public string Scope { get; set; }

        public string BugAnalysisStatus { get; set; }
 


    }

}
----------------------------------------------------------------------------
IRepo
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelData> ReadExcelFile(string filePath);
    }
}
--------------------------------------------------------------------------------------
MainViewmodel
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;
using System.Runtime.InteropServices;
using DocumentFormat.OpenXml.Office2010.Excel;

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {
        // Fields and Properties

        
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string selectedFilter;
        public bool IsFilterApplied { get; private set; }
        private IRepo _repository;
        private ObservableCollection<FilterItem> filterValues;
        public ObservableCollection<string> ColumnNames { get; set; } // List of 44 column names
        public ObservableCollection<ExcelData> OriginalData { get; set; }

        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ColumnFilters = new ObservableCollection<string>(BugTrackerDatas.ColumnNames);
            ColumnNames = new ObservableCollection<string>();
            FilteredData = new ObservableCollection<ExcelData>();
            selectedFilter = string.Empty;
            filterValues = new ObservableCollection<FilterItem>();
        }

        /// <summary>
        /// Gets or sets the selected filter category.
        /// </summary>
        public string SelectedFilter
        {
            get
            {
                return selectedFilter;
            }
            set
            {
                selectedFilter = value;
                LoadFilterValues();
                OnPropertyChanged(nameof(SelectedFilter));
            }
        }

        private ObservableCollection<string> columnFilters;
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;

            }
            set
            {
                columnFilters = value;
                OnPropertyChanged(nameof(columnFilters));
            }
        }



        /// <summary>
        /// Gets or sets the filter values for the selected filter category.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        // public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }



        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }


        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                LoadFilterValues();       
            }
        }

        private void LoadFilterValues()
        {
            // Get column data as strings
            var columnData = BugTrackerDatas.GetColumnData(selectedFilter, Data);

            // Convert to FilterItem objects
            FilterValues = new ObservableCollection<FilterItem>(
                columnData.Select(value => new FilterItem { Value = value, IsSelected = false })
            );
        }



        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }
        //private void ApplyFilter()
        //{
        //    if (string.IsNullOrEmpty(SelectedFilter)) return;

        //    // Get selected filter values
        //    var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

        //    if (selectedValues.Any())
        //    {
        //        // Filter the data based on the selected values
        //        FilteredData = new ObservableCollection<ExcelData>(
        //            Data.Where(d => selectedValues.Contains(d.GetType().GetProperty(SelectedFilter)?.GetValue(d)?.ToString()))
        //        );
        //        IsFilterApplied = true;
        //    }
        //    else
        //    {
        //        // If no filter values are selected, reset to original data
        //        FilteredData = new ObservableCollection<ExcelData>(Data);
        //        IsFilterApplied = false;
        //    }
        //}
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }
        public void ResetFilter()
        {
            // Clear the selection in FilterValues
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            // Reset the FilteredData to the original Data
            FilteredData = new ObservableCollection<ExcelData>(Data);

            // Indicate that the filter is no longer applied
            IsFilterApplied = false;

            // Notify that FilterValues and FilteredData have changed
            OnPropertyChanged(nameof(FilterValues));
            OnPropertyChanged(nameof(FilteredData));
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
  

}


----------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;
using System.Runtime.InteropServices;
using DocumentFormat.OpenXml.Office2010.Excel;
using System.Reflection;

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {
        // Fields and Properties
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string selectedFilter;
        private ObservableCollection<FilterItem> filterValues;
        private bool isSelectAllChecked;

        private readonly IRepo _repository;

        public MainViewModel()
        {
            _repository = new ExcelRepository();

            // Commands
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);

            // Initialize Collections
            ColumnFilters = new ObservableCollection<string>(BugTrackerDatas.ColumnNames);
            ColumnNames = new ObservableCollection<string>();
            FilteredData = new ObservableCollection<ExcelData>();
            filterValues = new ObservableCollection<FilterItem>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string SelectedFilter
        {
            get => selectedFilter;
            set
            {
                selectedFilter = value;
                LoadFilterValues();
                OnPropertyChanged(nameof(SelectedFilter));
            }
        }

        public ObservableCollection<string> ColumnFilters { get; set; }
        public ObservableCollection<string> ColumnNames { get; set; }

        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        public bool IsSelectAllChecked
        {
            get
            {
               return isSelectAllChecked;
            }
            set
            {
                isSelectAllChecked = value;
                SelectAllFilters(isSelectAllChecked);
                OnPropertyChanged(nameof(IsSelectAllChecked));
            }
        }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }

        // Methods
        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                LoadFilterValues();
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Get column data as strings
            var columnData = BugTrackerDatas.GetColumnData(SelectedFilter, Data);

            // Convert to FilterItem objects
            FilterValues = new ObservableCollection<FilterItem>(
                columnData.Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            // Reset the Select All checkbox when loading filter values
            IsSelectAllChecked = false;
        }

        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            var selectedValues = FilterValues
                .Where(filter => filter.IsSelected)
                .Select(filter => filter.Value)
                .ToList();

            if (selectedValues.Count > 0)
            {
                FilteredData = new ObservableCollection<ExcelData>(
                    Data.Where(dataItem =>
                    {
                        var propertyValue = dataItem.GetType().GetProperty(SelectedFilter)?.GetValue(dataItem)?.ToString();
                        return selectedValues.Contains(propertyValue);
                    })
                );
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        // INotifyPropertyChanged Implementation
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }


}


-------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DocumentFormat.OpenXml.Spreadsheet;
using ExcelProject.Model;

namespace ExcelProject
{
    /// <summary>
    /// Provides column names and helper methods for working with bug tracker data.
    /// </summary>
    public static class BugTrackerDatas
    {
        /// <summary>
        /// Gets or sets the list of column names used in the bug tracker data.
        /// </summary>
        public static List<string> ColumnNames { get; set; } = new List<string>
        {
            "Id",
            "Project",
            "Reporter",
            "AssignedTo",
            "Priority",
            "Severity",
            "Reproducibility",
            "ProductVersion",
            "Category",
            "DateSubmitted",
            "OS",
            "OSVersion",
            "Platform",
            "ViewStatus",
            "Updated",
            "Summary",
            "Resolution",
            "FixedInVersion",
            "Description",
            "StepsToReproduce",
            "CodeOwner",
            "DateResolved",
            "DefectImpactToUser",
            "DefectType",
            "Iteration",
            "IterationDataManager",
            "IterationXRDMeasurement",
            "Module",
            "ModuleCommonPlugins",
            "ODCPeriod",
            "PhaseOfOrigin",
            "Responsibility",
            "TestCaseId",
            "TestedBy",
            "TestingLevel",
            "Version",
            "IterationPowderXRD",
            "IterationSmartFlex",
            "IterationDBBrowser",
            "IterationMDA",
            "IterationXRDDSCAnalysis",
            "Scope",
            "BugAnalysisStatus"                            
                           
        };

        /// <summary>
        /// Retrieves unique data from a specified column in the provided data collection.
        /// </summary>
        /// <param name="columnName">The name of the column to retrieve data from.</param>
        /// <param name="originalData">The collection of Excel data.</param>
        /// <returns>A list of unique values from the specified column.</returns>

        public static List<string> GetColumnData(string columnName , ObservableCollection<ExcelData> OriginalData)
        {
            return OriginalData
              .Select(item =>
              {
                  var property = item.GetType().GetProperty(columnName);
                  return property?.GetValue(item)?.ToString();
              })
              .Where(value => !string.IsNullOrEmpty(value)) // Exclude null or empty values
              .Distinct() // Get unique values
              .OrderBy(value => value) // Optional: sort the values
              .ToList();
        }

        
    }
}
------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExcelProject
{
    public class FilterItem
    {
       
            public string Value { get; set; } // Display value
            public bool IsSelected { get; set; } // Whether the item is checked

        
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>


        <!-- Filter Conditions Section -->

        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
            <StackPanel Orientation="Horizontal" Margin="10" >
                <!-- Dynamic Filter Rows -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="100" SelectedItem="{Binding SelectedFilter}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Vertical" Margin="10">
                   
                    <!-- Select All Checkbox -->
                    <CheckBox Content="Select All" 
          IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
          Command="{Binding SelectAllCommand}" />
                    <!-- Dynamic Checkbox Filters -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="100">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}"/>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>
                <!-- Buttons -->
                <StackPanel Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                    <Button Content="Apply Filter" Width="100" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </StackPanel>

        </GroupBox>




        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <!-- Set Background and Foreground Colors -->
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="Product Version" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="100" />
                <DataGridTextColumn Header="Date Submitted" Binding="{Binding DateSubmitted}" Width="150" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OS Version" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="View Status" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                <DataGridTextColumn Header=" Iteration(DB Browser)" Binding="{Binding IterationDBBrowser}" Width="150" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>
</Window>    



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MainWindow.Xaml.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using ExcelProject;
using ExcelProject.Repo;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private MainViewModel viewModel { get; set; } = null;
        public MainWindow()
        {
            InitializeComponent();
            viewModel = new MainViewModel();
            DataContext = this.viewModel;

        }
    }

    
}


---------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows.Input;

namespace ExcelProject
{
    public class RelayCommand : ICommand
    {
        /// <summary>
        /// The action to execute when the command is invoked.
        /// </summary>
        private readonly Action _execute;

        /// <summary>
        /// A function that determines whether the command can be executed.
        /// </summary>
        private readonly Func<bool> _canExecute;

        /// <summary>
        /// Initializes a new instance of the RelayCommand class.
        /// </summary>
        /// <param name="execute">The action to execute when the command is invoked.</param>
        /// <param name="canExecute">A function that determines whether the command can be executed.</param>
        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        /// <summary>
        /// Occurs when the CanExecute method of the command changes.
        /// </summary>
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        /// <summary>
        /// Determines whether the command can be executed.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the CanExecute method.</param>
        /// <returns>True if the command can be executed; otherwise, false.</returns>
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the Execute method.</param>
        public void Execute(object parameter)
        {
            _execute();
        }
       
    }
}


public class MainViewModel : INotifyPropertyChanged
{
    private bool _isSelectAllChecked;

    // Property to bind to the "Select All" checkbox
    public bool IsSelectAllChecked
    {
        get => _isSelectAllChecked;
        set
        {
            if (_isSelectAllChecked != value)
            {
                _isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(_isSelectAllChecked); // Update individual filter selections
            }
        }
    }

    public ObservableCollection<FilterItem> FilterValues { get; set; }
    public ICommand SelectAllCommand { get; }

    public MainViewModel()
    {
        SelectAllCommand = new RelayCommand(SelectAllFilters);
    }

    // Command to handle "Select All" and "Deselect All"
    private void SelectAllFilters(bool selectAll)
    {
        foreach (var filter in FilterValues)
        {
            filter.IsSelected = selectAll; // Set all filter items to the same state as the "Select All" checkbox
        }

        // Notify that the filter items have changed
        OnPropertyChanged(nameof(FilterValues));
    }

    // For the "Select All" checkbox in the XAML
    private void SelectAllFilters()
    {
        IsSelectAllChecked = !IsSelectAllChecked; // Toggle the "Select All" checkbox
    }

    // Your other existing methods...
    public ICommand ResetFilterCommand { get; }
    private void LoadData()
    {
        if (!string.IsNullOrEmpty(FilePath))
        {
            var data = _repository.ReadExcelFile(FilePath);
            Data = new ObservableCollection<ExcelData>(data);
            FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
            LoadFilterValues();
        }
    }

    private void LoadFilterValues()
    {
        // Get column data as strings
        var columnData = BugTrackerDatas.GetColumnData(selectedFilter, Data);

        // Convert to FilterItem objects
        FilterValues = new ObservableCollection<FilterItem>(
            columnData.Select(value => new FilterItem { Value = value, IsSelected = false })
        );
    }

    public void ShowDialog()
    {
        var dialog = new OpenFileDialog
        {
            Filter = "Excel Files (*.xlsx)|*.xlsx"
        };

        if (dialog.ShowDialog() == true)
        {
            FilePath = dialog.FileName;
        }
    }

    private void ApplyFilter()
    {
        // Apply filter logic
    }

    public void ResetFilter()
    {
        // Reset filter logic
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

--------------***
private void ImportFilter()
{
    var dialog = new OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Deserialize XML to filter conditions
        var serializer = new XmlSerializer(typeof(List<FilterItem>));
        using (var reader = new StreamReader(filePath))
        {
            var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
            FilterValues = new ObservableCollection<FilterItem>(importedFilters);
        }

        // Update the "Select All" checkbox based on imported data
        IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
    }
}

private void ExportFilter()
{
    var dialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Serialize filter conditions to XML
        var serializer = new XmlSerializer(typeof(List<FilterItem>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, FilterValues.ToList());
        }
    }
}


// Commands
public ICommand ImportFilterCommand { get; }
public ICommand ExportFilterCommand { get; }

// Constructor
public YourViewModel()
{
    ImportFilterCommand = new RelayCommand(ImportFilter);
    ExportFilterCommand = new RelayCommand(ExportFilter);
}
















