Show all column names in the filter conditions. When selecting a column name, then show unique row content like Excel filter.
Apply Filter button
When [Apply Filter] button is clicked, update bug details table with all filter conditions.
Show all column names in the filter conditions. When selecting a column name, then show unique row content like Excel filter.
Reset Filter button
When [Reset Filter] button is clicked, update bug details table.
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>



        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <!-- Set Background and Foreground Colors -->
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="Product Version" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="100" />
                <DataGridTextColumn Header="Date Submitted" Binding="{Binding DateSubmitted}" Width="150" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OS Version" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="View Status" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                <DataGridTextColumn Header=" Iteration(DB Browser)" Binding="{Binding IterationDBBrowser}" Width="150" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>



</Window>    



using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;
using ExcelProject.Repo;
using ClosedXML.Excel;


namespace ExcelProject.ExcelRepo
{
    public class ExcelRepository : IRepo
    {
        public List<ExcelData> ReadExcelFile(string filePath)
        {
            var data = new List<ExcelData>();

            if (File.Exists(filePath))
            {
                using (var workbook = new XLWorkbook(filePath))
                {
                    var worksheet = workbook.Worksheet(1); // Read the first worksheet
                    foreach (var row in worksheet.RowsUsed().Skip(1)) // Skip header row
                    {
                        data.Add(new ExcelData
                        {
                            Id = row.Cell(1).Value.ToString(),
                            Project = row.Cell(2).Value.ToString(),
                            Reporter = row.Cell(3).Value.ToString(),
                            AssignedTo = row.Cell(4).Value.ToString(),
                            Priority = row.Cell(5).Value.ToString(),
                            Severity = row.Cell(6).Value.ToString(),
                            Reproducibility = row.Cell(7).Value.ToString(),
                            ProductVersion = row.Cell(8).Value.ToString(),
                            Category = row.Cell(9).Value.  ToString(),
                            DateSubmitted = row.Cell(10).Value.ToString(),
                            OS = row.Cell(11).Value.ToString(),
                            OSVersion = row.Cell(12).Value.ToString(),
                            Platform = row.Cell(13).Value.ToString(),
                            ViewStatus = row.Cell(14).Value.ToString(),
                            Updated = row.Cell(15).Value.ToString(),
                            Summary = row.Cell(16).Value.ToString(),
                            Status = row.Cell(17).Value.ToString(),
                            Resolution = row.Cell(18).Value.ToString(),
                            FixedInVersion = row.Cell(19).Value.ToString(),
                            Description = row.Cell(20).Value.ToString(),
                            StepsToReproduce = row.Cell(21).Value.ToString(),
                            CodeOwner = row.Cell(22).Value.ToString(),
                            DateResolved = row.Cell(23).Value.ToString(),
                            DefectImpactToUser = row.Cell(24).Value.ToString(),
                            DefectType = row.Cell(25).Value.ToString(),
                            Iteration = row.Cell(26).Value.ToString(),
                            IterationDataManager = row.Cell(27).Value.ToString(),
                            IterationXRDMeasurement = row.Cell(28).Value.ToString(),
                            Module = row.Cell(29).Value.ToString(),
                            ModuleCommonPlugins = row.Cell(30).Value.ToString(),
                            ODCPeriod = row.Cell(31).Value.ToString(),
                            PhaseOfOrigin = row.Cell(32).Value.ToString(),
                            Responsibility = row.Cell(33).Value.ToString(),
                            TestCaseId = row.Cell(34).Value.ToString(),
                            TestedBy = row.Cell(35).Value.ToString(),
                            TestingLevel = row.Cell(36).Value.ToString(),
                            Version = row.Cell(37).Value.ToString(),
                            IterationPowderXRD = row.Cell(38).Value.ToString(),
                            IterationSmartFlex = row.Cell(39).Value.ToString(),
                            IterationDBBrowser = row.Cell(40).Value.ToString(),
                            IterationMDA = row.Cell(41).Value.ToString(),
                            IterationXRDDSCAnalysis = row.Cell(42).Value.ToString(),
                            Scope = row.Cell(43).Value.ToString(),
                            BugAnalysisStatus = row.Cell(44).Value.ToString(),





                        });
                    }
                }
            }

            return data;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DocumentFormat.OpenXml.Math;
using System.IO;

namespace ExcelProject.Model
{
    public class ExcelData
    {
        public string Id {  get; set; }
        public string Project { get; set; }
        public string Reporter { get; set; }

        public string AssignedTo { get; set; }

        public string Priority { get; set; }
        public string Severity { get; set; }
        public string Reproducibility { get; set; }
        public string ProductVersion { get; set; }
        public string Category { get; set; }

        public string DateSubmitted { get; set; }
        public string OS { get; set; }

        public string OSVersion { get; set; }

        public string Platform { get; set; }
        public string ViewStatus { get; set; }
        public string Updated { get; set; }
        public string Summary { get; set; }
        public string Status { get; set; }
        public string Resolution { get; set; }
        public string FixedInVersion { get; set; }
        public string Description { get; set; }
        public string StepsToReproduce { get; set; }

        public string CodeOwner { get; set; }
        public string DateResolved { get; set; }

        public string DefectImpactToUser { get; set; }
        public string DefectType { get; set; }

        public string Iteration { get; set; }
        public string IterationDataManager { get; set; }
        public string IterationXRDMeasurement { get; set; }
        public string Module { get; set; }

        public string ModuleCommonPlugins { get; set; }

        public string ODCPeriod { get; set; }
        public string PhaseOfOrigin { get; set; }
        public string Responsibility { get; set; }
        public string TestCaseId { get; set; }
        public string TestedBy { get; set; }
        public string TestingLevel { get; set; }
        public string Version { get; set; }
        public string IterationPowderXRD{ get; set; }
        public string IterationSmartFlex { get; set; }

        public string IterationDBBrowser { get; set; }
        public string IterationMDA { get; set; }

        public string IterationXRDDSCAnalysis { get; set; }

        public string Scope { get; set; }

        public string BugAnalysisStatus { get; set; }
 


    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelData> ReadExcelFile(string filePath);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using ExcelProject;
using ExcelProject.Repo;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private MainViewModel viewModel { get; set; } = null;
        public MainWindow()
        {
            InitializeComponent();
            viewModel = new MainViewModel();
            DataContext = this.viewModel;

        }
    }

    
}


using System;
using System.Windows.Input;

namespace ExcelProject
{
    public class RelayCommand : ICommand
    {
        /// <summary>
        /// The action to execute when the command is invoked.
        /// </summary>
        private readonly Action _execute;

        /// <summary>
        /// A function that determines whether the command can be executed.
        /// </summary>
        private readonly Func<bool> _canExecute;

        /// <summary>
        /// Initializes a new instance of the RelayCommand class.
        /// </summary>
        /// <param name="execute">The action to execute when the command is invoked.</param>
        /// <param name="canExecute">A function that determines whether the command can be executed.</param>
        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        /// <summary>
        /// Occurs when the CanExecute method of the command changes.
        /// </summary>
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        /// <summary>
        /// Determines whether the command can be executed.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the CanExecute method.</param>
        /// <returns>True if the command can be executed; otherwise, false.</returns>
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the Execute method.</param>
        public void Execute(object parameter)
        {
            _execute();
        }
    }
}

