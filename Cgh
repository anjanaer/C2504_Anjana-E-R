Updated MainViewModel Class
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;
        private string _filePath;
        private string _filterResolution;
        private string _filterStatus;

        public MainViewModel()
        {
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            _repository = new CsvRepository();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public string FilterResolution
        {
            get => _filterResolution;
            set
            {
                _filterResolution = value;
                OnPropertyChanged(nameof(FilterResolution));
                FilterData();
            }
        }

        public string FilterStatus
        {
            get => _filterStatus;
            set
            {
                _filterStatus = value;
                OnPropertyChanged(nameof(FilterStatus));
                FilterData();
            }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadCsvFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                TempData = new ObservableCollection<ExcelData>(data);
            }
        }

        public void ShowDialog()
        {
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "CSV Files (*.csv)|*.csv"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        private void FilterData()
        {
            if (TempData == null || TempData.Count == 0) return;

            IsFilterApplied = true;
            var filteredList = new ObservableCollection<ExcelData>();

            foreach (var data in TempData)
            {
                bool matchesStatus = string.IsNullOrEmpty(FilterStatus) ||
                                     data.Status.Equals(FilterStatus, StringComparison.OrdinalIgnoreCase) ||
                                     FilterStatus.Equals("All", StringComparison.OrdinalIgnoreCase);

                bool matchesResolution = string.IsNullOrEmpty(FilterResolution) ||
                                         data.Resolution.Equals(FilterResolution, StringComparison.OrdinalIgnoreCase) ||
                                         FilterResolution.Equals("All", StringComparison.OrdinalIgnoreCase);

                if (matchesStatus && matchesResolution)
                {
                    filteredList.Add(data);
                }
            }

            FilteredData = filteredList;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
Updated IRepo Interface
csharp
Copy code
using System.Collections.Generic;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelData> ReadCsvFile(string filePath);
    }
}
New CsvRepository Class
csharp
Copy code
using System;
using System.Collections.Generic;
using System.IO;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public class CsvRepository : IRepo
    {
        public List<ExcelData> ReadCsvFile(string filePath)
        {
            var data = new List<ExcelData>();

            if (File.Exists(filePath))
            {
                using (var reader = new StreamReader(filePath))
                {
                    // Skip header row
                    var header = reader.ReadLine();

                    while (!reader.EndOfStream)
                    {
                        var line = reader.ReadLine();
                        var values = line.Split(',');

                        data.Add(new ExcelData
                        {
                            Id = values[0],
                            Project = values[1],
                            Reporter = values[2],
                            AssignedTo = values[3],
                            Priority = values[4],
                            Severity = values[5],
                            Reproducibility = values[6],
                            ProductVersion = values[7],
                            OS = values[8],
                            OSVersion = values[9],
                            Platform = values[10],
                            ViewStatus = values[11],
                            Updated = values[12],
                            Summary = values[13],
                            Status = values[14],
                            Resolution = values[15],
                            FixedInVersion = values[16],
                            StepsToReproduce = values[17],
                            CodeOwner = values[18],
                            DateResolved = values[19],
                            DefectImpactToUser = values[20],
                            DefectType = values[21],
                            Iteration = values[22],
                            Responsibility = values[23],
                            TestCaseId = values[24],
                            TestedBy = values[25],
                            TestingLevel = values[26],
                            Version = values[27],
                            Scope = values[28],
                            BugAnalysisStatus = values[29]
                        });
                    }
                }
            }

            return data;
        }
    }
}
This code now uses a CsvRepository to read data from CSV files and map it to ExcelData objects. The UI remains the same, and the DataGrid will automatically display the filtered data.




<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>



        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="2" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="ProductVersion" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OSVersion" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="ViewStatus" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Binding Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>



</Window>    










