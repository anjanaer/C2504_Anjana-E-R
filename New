<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ExcelProject"
        Title="Bug Tracker" Height="600" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItems="{Binding SelectedColumns}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Command="{Binding SelectAllCommand}" Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True" RowHeight="30">
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>
public class MainViewModel : INotifyPropertyChanged
{
    private ObservableCollection<ExcelData> data;
    private ObservableCollection<ExcelData> filteredData;
    private ObservableCollection<string> columnFilters;
    private ObservableCollection<FilterItem> filterValues;
    private ObservableCollection<string> selectedColumnFilters;  // Holds multiple selected columns
    private bool isSelectAllChecked;
    private bool isFilterApplied;
    private bool isFileValid;

    public event PropertyChangedEventHandler PropertyChanged;

    public MainViewModel(IRepo exlrepo)
    {
        repo = exlrepo;

        // Initialize commands
        LoadCommand = new RelayCommand(LoadData, CanShowDetails);
        ShowDialogCommand = new RelayCommand(ShowDialog);
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);
        CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

        // Initialize properties
        ColumnFilters = new ObservableCollection<string>();
        FilterValues = new ObservableCollection<FilterItem>();
        FilteredData = new ObservableCollection<ExcelData>();
        data = new ObservableCollection<ExcelData>();
        selectedColumnFilters = new ObservableCollection<string>();  // For storing selected columns
        isFileValid = true;
    }

    public ObservableCollection<ExcelData> Data
    {
        get => data;
        set { data = value; OnPropertyChanged(nameof(Data)); }
    }

    public ObservableCollection<ExcelData> FilteredData
    {
        get => filteredData;
        set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
    }

    public ObservableCollection<string> ColumnFilters
    {
        get => columnFilters;
        set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
    }

    public ObservableCollection<string> SelectedColumnFilters
    {
        get => selectedColumnFilters;
        set { selectedColumnFilters = value; OnPropertyChanged(nameof(SelectedColumnFilters)); LoadFilterValues(); }
    }

    public ObservableCollection<FilterItem> FilterValues
    {
        get => filterValues;
        set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
    }

    public bool IsSelectAllChecked
    {
        get => isSelectAllChecked;
        set
        {
            isSelectAllChecked = value;
            OnPropertyChanged(nameof(IsSelectAllChecked));
            SelectAllFilters(value);
        }
    }

    public ICommand LoadCommand { get; }
    public ICommand ShowDialogCommand { get; }
    public ICommand ApplyFilterCommand { get; }
    public ICommand ResetFilterCommand { get; }
    public ICommand CloseCommand { get; }

    private void LoadData()
    {
        if (!string.IsNullOrEmpty(FilePath))
        {
            var excelData = repo.GetData(FilePath);
            Data = new ObservableCollection<ExcelData>(excelData);
            FilteredData = new ObservableCollection<ExcelData>(excelData);

            ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
        }
    }

    private void LoadFilterValues()
    {
        // Clear previous filter values
        FilterValues.Clear();

        // For each selected column, load distinct values
        foreach (var selectedColumn in SelectedColumnFilters)
        {
            var columnValues = Data.Select(row => row.GetType().GetProperty(selectedColumn)?.GetValue(row)?.ToString())
                                   .Distinct()
                                   .OrderBy(value => value)
                                   .Select(value => new FilterItem { Value = value, IsSelected = true });

            // Add values for each selected column to FilterValues
            foreach (var item in columnValues)
            {
                FilterValues.Add(item);
            }
        }
    }

    private void ApplyFilter()
    {
        if (SelectedColumnFilters.Count == 0) return;

        var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
        if (selectedValues.Count == 0)
        {
            FilteredData = new ObservableCollection<ExcelData>(Data);
            return;
        }

        var filtered = Data.Where(row =>
        {
            var matchesFilter = false;

            foreach (var selectedColumn in SelectedColumnFilters)
            {
                var propertyValue = row.GetType().GetProperty(selectedColumn)?.GetValue(row)?.ToString();
                if (selectedValues.Contains(propertyValue))
                {
                    matchesFilter = true;
                    break;
                }
            }
            return matchesFilter;
        }).ToList();

        FilteredData = new ObservableCollection<ExcelData>(filtered);
    }

    private void ResetFilter()
    {
        foreach (var filter in FilterValues)
        {
            filter.IsSelected = false;
        }
        FilteredData = new ObservableCollection<ExcelData>(Data);
        IsSelectAllChecked = false;
    }

    private void SelectAllFilters(bool selectAll)
    {
        foreach (var filter in FilterValues)
        {
            filter.IsSelected = selectAll;
        }
        OnPropertyChanged(nameof(FilterValues));
    }

    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}
