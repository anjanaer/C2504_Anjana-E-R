04
"Read doctors' salaries (integer) from keyboard till we read -1 
    by using array / collection."
Find average salary (integer), 
prime salaries count(example: Rs.101, prime number salary), 
minimum 4 digit salaries count, 
maximum salary, 
odd salaries sum (example: Rs.5001), and
2nd minimum odd salary.  
Check maximum salary is also prime salary.
Use coding standards and best practices to write pseudo code and c# code.
Plan the task codes to make as reusable functions.


namespace salary
{
    internal class Program

    {
        static void Main(string[] args)
        {
            Console.WriteLine("-----TestReadDoctorSalaryTillMinus1-----");
            TestReadDoctorSalaryTillMinus1();
            Console.WriteLine("-----End TestReadDoctorSalaryTillMinus1-----");
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void ReadDoctorSalaryTillMinus1()
        {
            int[] salaries = new int[100]; // Assuming a max of 100 salaries to store.
            int count = 0;

            Console.WriteLine("Enter doctors' salaries (enter -1 to stop):");
            while (true)
            {
                if (int.TryParse(Console.ReadLine(), out int salary))
                {
                    if (salary == -1)
                    {
                        break;
                    }

                    if (salary < 0)
                    {
                        Console.WriteLine("Invalid salary");
                        continue;
                    }

                    if (count >= salaries.Length)
                    {
                        Console.WriteLine("Maximum salary limit reached. Can't accept more inputs.");
                        break;
                    }

                    salaries[count++] = salary;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter an integer salary.");
                }
            }

            if (count > 0)
            {
                int[] actualSalaries = new int[count];
                Array.Copy(salaries, actualSalaries, count);

                int averageSalary = CalculateAverageSalary(actualSalaries);
                int primeSalariesCount = CountPrimeSalaries(actualSalaries);
                int minFourDigitSalariesCount = CountMinFourDigitSalaries(actualSalaries);
                int maxSalary = MaxSalary(actualSalaries);
                int oddSalariesSum = CalculateOddSalariesSum(actualSalaries);
                int secondMinOddSalary = FindSecondMinOddSalary(actualSalaries);
                bool isMaxSalaryPrime = IsPrime(maxSalary);

                Console.WriteLine($"Average Salary: {averageSalary}");
                Console.WriteLine($"Prime Salaries Count: {primeSalariesCount}");
                Console.WriteLine($"Minimum Four Digits Salaries Count: {minFourDigitSalariesCount}");
                Console.WriteLine($"Maximum Salary: {maxSalary}");
                Console.WriteLine($"Odd Salaries Sum: {oddSalariesSum}");
                Console.WriteLine($"Second Minimum Odd Salary: {(secondMinOddSalary == int.MaxValue ? "Does not exist" : secondMinOddSalary.ToString())}");
                Console.WriteLine(isMaxSalaryPrime ? "Maximum salary is also prime" : "Maximum salary is not prime");
            }
            else
            {
                Console.WriteLine("No salaries were entered.");
            }
        }

        static int CalculateAverageSalary(int[] salaries)
        {
            int sum = 0;
            foreach (int salary in salaries)
            {
                sum += salary;
            }
            return sum / salaries.Length;
        }

        static int CountPrimeSalaries(int[] salaries)
        {
            int count = 0;
            foreach (int salary in salaries)
            {
                if (IsPrime(salary))
                {
                    count++;
                }
            }
            return count;
        }

        static int CountMinFourDigitSalaries(int[] salaries)
        {
            int count = 0;
            foreach (int salary in salaries)
            {
                if (salary >= 1000)
                {
                    count++;
                }
            }
            return count;
        }

        static int MaxSalary(int[] salaries)
        {
            int max = int.MinValue;
            foreach (int salary in salaries)
            {
                if (salary > max)
                {
                    max = salary;
                }
            }
            return max;
        }

        static int CalculateOddSalariesSum(int[] salaries)
        {
            int sum = 0;
            foreach (int salary in salaries)
            {
                if (IsOdd(salary))
                {
                    sum += salary;
                }
            }
            return sum;
        }

        static int FindSecondMinOddSalary(int[] salaries)
        {
            int minOdd = int.MaxValue, secondMinOdd = int.MaxValue;
            foreach (int salary in salaries)
            {
                if (IsOdd(salary))
                {
                    if (salary < minOdd)
                    {
                        secondMinOdd = minOdd;
                        minOdd = salary;
                    }
                    else if (salary < secondMinOdd && salary != minOdd)
                    {
                        secondMinOdd = salary;
                    }
                }
            }
            return secondMinOdd;
        }

        static bool IsPrime(int number)
        {
            if (number < 2)
                return false;

            int sqrt = (int)Math.Sqrt(number);
            for (int i = 2; i <= sqrt; i++)
            {
                if (number % i == 0)
                    return false;
            }
            return true;
        }

        static bool IsOdd(int number)
        {
            return number % 2 != 0;
        }

        static void TestReadDoctorSalaryTillMinus1()
        {
            ReadDoctorSalaryTillMinus1();
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------

05
"Read patients' ages (integer) from keyboard till we read less than zero 
    by using array / collection."
Find average age (integer), 
prime ages sum(example: 11, prime number age), 
teenager ages sum, 
minimum age, 
odd ages sum (example: 51), and
2nd maximum adult age.  
Check minimum age is also prime age.
Use coding standards and best practices to write pseudo code and c# code.
Plan the task codes to make as reusable functions.






static void Main(string[] args)
        {
            Console.WriteLine("-----TestReadPatientAgeTillBelowZero-----");
            TestReadPatientAgeTillBelowZero();
            Console.WriteLine("-----End TestReadPatientAgeTillBelowZero-----");
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void ReadPatientAgeTillBelowZero()
        {
            int[] ages = new int[100]; // Assuming a maximum of 100 ages to store.
            int count = 0;

            Console.WriteLine("Enter patient ages (enter a negative number to stop):");
            while (true)
            {
                if (int.TryParse(Console.ReadLine(), out int age))
                {
                    if (age < 0)
                    {
                        break;
                    }

                    if (age == 0)
                    {
                        Console.WriteLine("Invalid age");
                        continue;
                    }

                    if (count >= ages.Length)
                    {
                        Console.WriteLine("Maximum age limit reached. Can't accept more inputs.");
                        break;
                    }

                    ages[count++] = age;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter an integer age.");
                }
            }

            if (count > 0)
            {
                int[] actualAges = new int[count];
                Array.Copy(ages, actualAges, count);

                int averageAge = CalculateAverageAge(actualAges);
                int primeAgesSum = CalculatePrimeAgesSum(actualAges);
                int teenagerAgesSum = CalculateTeenagerAgesSum(actualAges);
                int minAge = FindMinAge(actualAges);
                int oddAgesSum = CalculateOddAgesSum(actualAges);
                int secondMaxAdultAge = FindSecondMaxAdultAge(actualAges);
                bool isMinAgePrime = IsPrime(minAge);

                Console.WriteLine($"Average Age: {averageAge}");
                Console.WriteLine($"Prime Ages Sum: {primeAgesSum}");
                Console.WriteLine($"Teenagers' Age Sum: {teenagerAgesSum}");
                Console.WriteLine($"Min Age: {minAge}");
                Console.WriteLine($"Odd Ages Sum: {oddAgesSum}");
                Console.WriteLine(secondMaxAdultAge == int.MinValue 
                    ? "Second Max Adult Age does not exist" 
                    : $"Second Max Adult Age: {secondMaxAdultAge}");
                Console.WriteLine(isMinAgePrime 
                    ? "Minimum age is also prime" 
                    : "Minimum age is not prime");
            }
            else
            {
                Console.WriteLine("No ages were entered.");
            }
        }

        static int CalculateAverageAge(int[] ages)
        {
            int sum = 0;
            foreach (int age in ages)
            {
                sum += age;
            }
            return sum / ages.Length;
        }

        static int CalculatePrimeAgesSum(int[] ages)
        {
            int sum = 0;
            foreach (int age in ages)
            {
                if (IsPrime(age))
                {
                    sum += age;
                }
            }
            return sum;
        }

        static int CalculateTeenagerAgesSum(int[] ages)
        {
            int sum = 0;
            foreach (int age in ages)
            {
                if (IsTeenager(age))
                {
                    sum += age;
                }
            }
            return sum;
        }

        static int FindMinAge(int[] ages)
        {
            int min = int.MaxValue;
            foreach (int age in ages)
            {
                if (age < min)
                {
                    min = age;
                }
            }
            return min;
        }

        static int CalculateOddAgesSum(int[] ages)
        {
            int sum = 0;
            foreach (int age in ages)
            {
                if (IsOdd(age))
                {
                    sum += age;
                }
            }
            return sum;
        }

        static int FindSecondMaxAdultAge(int[] ages)
        {
            int maxAdult = int.MinValue;
            int secondMaxAdult = int.MinValue;
            foreach (int age in ages)
            {
                if (IsAdult(age))
                {
                    if (age > maxAdult)
                    {
                        secondMaxAdult = maxAdult;
                        maxAdult = age;
                    }
                    else if (age > secondMaxAdult && age != maxAdult)
                    {
                        secondMaxAdult = age;
                    }
                }
            }
            return secondMaxAdult;
        }

        static bool IsPrime(int number)
        {
            if (number < 2)
                return false;

            int sqrt = (int)Math.Sqrt(number);
            for (int i = 2; i <= sqrt; i++)
            {
                if (number % i == 0)
                    return false;
            }
            return true;
        }

        static bool IsTeenager(int age)
        {
            return age >= 13 && age <= 19;
        }

        static bool IsAdult(int age)
        {
            return age > 19;
        }

        static bool IsOdd(int number)
        {
            return number % 2 != 0;
        }

        static void TestReadPatientAgeTillBelowZero()
        {
            ReadPatientAgeTillBelowZero();
        }
    }
---------------------------------------------------------------------------------------------------------------------------------------
    06
"Read patients' temperatures (integer) from keyboard till we read 0
    by using array / collection."
Find average temperature (integer), 
prime temperatures sum(example: 41, prime number temperature), 
minimum 3 digit temperatures sum, 
minimum temperature, 
odd temperatures sum (example: 31), and
2nd maximum odd temperature.  
Check minimum temperature is also prime temperature.
Use coding standards and best practices to write pseudo code and c# code.
Plan the task codes to make as reusable functions.


 static void Main(string[] args)
        {
            Console.WriteLine("-----TestReadPatientTemperatureTillZero-----");
            TestReadPatientTemperatureTillZero();
            Console.WriteLine("-----End TestReadPatientTemperatureTillZero-----");
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void ReadPatientTemperatureTillZero()
        {
            int[] temperatures = new int[100]; // Assuming a maximum of 100 temperatures to store
            int count = 0;

            Console.WriteLine("Enter patient temperatures (enter 0 to stop):");
            while (true)
            {
                if (int.TryParse(Console.ReadLine(), out int temperature))
                {
                    if (temperature == 0) // Stop input condition
                    {
                        break;
                    }
                    if (temperature < 0) // Validation
                    {
                        Console.WriteLine("Invalid temperature");
                        continue;
                    }

                    if (count >= temperatures.Length)
                    {
                        Console.WriteLine("Maximum temperature limit reached. Can't accept more inputs.");
                        break;
                    }

                    temperatures[count++] = temperature;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter an integer temperature.");
                }
            }

            if (count > 0)
            {
                int[] actualTemperatures = new int[count];
                Array.Copy(temperatures, actualTemperatures, count);

                int averageTemperature = CalculateAverageTemperature(actualTemperatures);
                int primeTemperaturesSum = CalculatePrimeTemperaturesSum(actualTemperatures);
                int min3DigitsTemperatureSum = CalculateMin3DigitsTemperatureSum(actualTemperatures);
                int minTemperature = FindMinTemperature(actualTemperatures);
                int oddTemperaturesSum = CalculateOddTemperaturesSum(actualTemperatures);
                int secondMaxOddTemperature = FindSecondMaxOddTemperature(actualTemperatures);
                bool isMinTemperaturePrime = IsPrime(minTemperature);

                Console.WriteLine($"Average Temperature: {averageTemperature}");
                Console.WriteLine($"Prime Temperatures Sum: {primeTemperaturesSum}");
                Console.WriteLine($"Minimum 3-Digit Temperature Sum: {min3DigitsTemperatureSum}");
                Console.WriteLine($"Min Temperature: {minTemperature}");
                Console.WriteLine($"Odd Temperatures Sum: {oddTemperaturesSum}");
                Console.WriteLine(secondMaxOddTemperature == int.MinValue
                    ? "Second Max Odd Temperature does not exist"
                    : $"Second Max Odd Temperature: {secondMaxOddTemperature}");
                Console.WriteLine(isMinTemperaturePrime
                    ? "Minimum temperature is also prime"
                    : "Minimum temperature is not prime");
            }
            else
            {
                Console.WriteLine("No temperatures were entered.");
            }
        }

        static int CalculateAverageTemperature(int[] temperatures)
        {
            int sum = 0;
            foreach (int temp in temperatures)
            {
                sum += temp;
            }
            return sum / temperatures.Length;
        }

        static int CalculatePrimeTemperaturesSum(int[] temperatures)
        {
            int sum = 0;
            foreach (int temp in temperatures)
            {
                if (IsPrime(temp))
                {
                    sum += temp;
                }
            }
            return sum;
        }

        static int CalculateMin3DigitsTemperatureSum(int[] temperatures)
        {
            int sum = 0;
            foreach (int temp in temperatures)
            {
                if (temp >= 100)
                {
                    sum += temp;
                }
            }
            return sum;
        }

        static int FindMinTemperature(int[] temperatures)
        {
            int min = int.MaxValue;
            foreach (int temp in temperatures)
            {
                if (temp < min)
                {
                    min = temp;
                }
            }
            return min;
        }

        static int CalculateOddTemperaturesSum(int[] temperatures)
        {
            int sum = 0;
            foreach (int temp in temperatures)
            {
                if (IsOdd(temp))
                {
                    sum += temp;
                }
            }
            return sum;
        }

        static int FindSecondMaxOddTemperature(int[] temperatures)
        {
            int maxOdd = int.MinValue;
            int secondMaxOdd = int.MinValue;
            foreach (int temp in temperatures)
            {
                if (IsOdd(temp))
                {
                    if (temp > maxOdd)
                    {
                        secondMaxOdd = maxOdd;
                        maxOdd = temp;
                    }
                    else if (temp > secondMaxOdd && temp != maxOdd)
                    {
                        secondMaxOdd = temp;
                    }
                }
            }
            return secondMaxOdd;
        }

        static bool IsPrime(int number)
        {
            if (number < 2)
                return false;

            int sqrt = (int)Math.Sqrt(number);
            for (int i = 2; i <= sqrt; i++)
            {
                if (number % i == 0)
                    return false;
            }
            return true;
        }

        static bool IsOdd(int number)
        {
            return number % 2 != 0;
        }

        static void TestReadPatientTemperatureTillZero()
        {
            ReadPatientTemperatureTillZero();
        }
    }
