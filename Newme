namespace BugTracker.Models
{
    public class FilterValue
    {
        public string ColumnName { get; set; }
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }
}
using BugTracker.Models;
using System.Collections.Generic;
using System.Data;

namespace BugTracker.Repositories
{
    public interface IRepo
    {
        DataTable ReadExcel(string filePath);
        List<string> GetColumnNames(string filePath);
    }
}
using BugTracker.Models;
using ClosedXML.Excel;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace BugTracker.Repositories
{
    public class ExcelRepo : IRepo
    {
        public DataTable ReadExcel(string filePath)
        {
            var workbook = new XLWorkbook(filePath);
            var worksheet = workbook.Worksheet(1);
            var dataTable = new DataTable();

            // Read headers (columns)
            foreach (var header in worksheet.Row(1).Cells())
            {
                dataTable.Columns.Add(header.Value.ToString());
            }

            // Read rows
            foreach (var row in worksheet.RowsUsed().Skip(1))
            {
                var dataRow = dataTable.NewRow();
                for (int i = 0; i < row.CellCount(); i++)
                {
                    dataRow[i] = row.Cell(i + 1).Value.ToString();
                }
                dataTable.Rows.Add(dataRow);
            }

            return dataTable;
        }

        public List<string> GetColumnNames(string filePath)
        {
            var workbook = new XLWorkbook(filePath);
            var worksheet = workbook.Worksheet(1);

            var columns = new List<string>();
            foreach (var header in worksheet.Row(1).Cells())
            {
                columns.Add(header.Value.ToString());
            }

            return columns;
        }
    }
}
using BugTracker.Models;
using BugTracker.Repositories;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Xml.Serialization;
using Microsoft.Win32;

namespace BugTracker.ViewModels
{
    public class MainWindowViewModel : INotifyPropertyChanged
    {
        private string filePath;
        private ObservableCollection<string> columnFilters = new ObservableCollection<string>();
        private ObservableCollection<FilterValue> filterValues = new ObservableCollection<FilterValue>();
        private DataTable filteredData = new DataTable();
        private DataTable originalData = new DataTable();

        private readonly IRepo excelRepo;

        public ICommand ShowDialogCommand { get; private set; }
        public ICommand LoadCommand { get; private set; }
        public ICommand ApplyFilterCommand { get; private set; }
        public ICommand ResetFilterCommand { get; private set; }
        public ICommand ImportFilterCommand { get; private set; }
        public ICommand ExportFilterCommand { get; private set; }
        public ICommand CloseCommand { get; private set; }

        public event PropertyChangedEventHandler PropertyChanged;

        public string FilePath
        {
            get => filePath;
            set => SetProperty(ref filePath, value);
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => columnFilters;
            set => SetProperty(ref columnFilters, value);
        }

        public ObservableCollection<FilterValue> FilterValues
        {
            get => filterValues;
            set => SetProperty(ref filterValues, value);
        }

        public DataTable FilteredData
        {
            get => filteredData;
            set => SetProperty(ref filteredData, value);
        }

        public bool IsFileSelected => !string.IsNullOrEmpty(FilePath);

        public MainWindowViewModel(IRepo repo)
        {
            excelRepo = repo;
            ShowDialogCommand = new RelayCommand(ShowDialogCommand_Executed);
            LoadCommand = new RelayCommand(LoadCommand_Executed, () => IsFileSelected);
            ApplyFilterCommand = new RelayCommand(ApplyFilterCommand_Executed);
            ResetFilterCommand = new RelayCommand(ResetFilterCommand_Executed);
            ImportFilterCommand = new RelayCommand(ImportFilterCommand_Executed);
            ExportFilterCommand = new RelayCommand(ExportFilterCommand_Executed);
            CloseCommand = new RelayCommand(CloseCommand_Executed);
        }

        private void ShowDialogCommand_Executed()
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xls;*.xlsx)|*.xls;*.xlsx"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                var filePath = openFileDialog.FileName;
                if (filePath.EndsWith(".xls") || filePath.EndsWith(".xlsx"))
                {
                    FilePath = filePath;
                }
                else
                {
                    MessageBox.Show("Please select a valid Excel file.", "Invalid File Type", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void LoadCommand_Executed()
        {
            if (string.IsNullOrEmpty(FilePath)) return;

            originalData = excelRepo.ReadExcel(FilePath);
            FilteredData = originalData.Copy();
            ColumnFilters.Clear();

            var columns = excelRepo.GetColumnNames(FilePath);
            foreach (var column in columns)
            {
                ColumnFilters.Add(column);
            }
        }

        private void ApplyFilterCommand_Executed()
        {
            var filteredRows = originalData.AsEnumerable();

            foreach (var filter in FilterValues.Where(f => f.IsSelected))
            {
                filteredRows = filteredRows.Where(row => row[filter.ColumnName].ToString() == filter.Value);
            }

            FilteredData = filteredRows.CopyToDataTable();
        }

        private void ResetFilterCommand_Executed()
        {
            FilteredData = originalData;
            FilterValues.Clear();
        }

        private void ImportFilterCommand_Executed()
        {
            var openFileDialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                var serializer = new XmlSerializer(typeof(List<FilterCondition>));
                using (var reader = new StreamReader(openFileDialog.FileName))
                {
                    var filters = (List<FilterCondition>)serializer.Deserialize(reader);
                    foreach (var filter in filters)
                    {
                        FilterValues.Add(new FilterValue
                        {
                            ColumnName = filter.ColumnName,
                            Value = filter.Value,
                            IsSelected = true
                        });
                    }
                }
            }
        }

        private void ExportFilterCommand_Executed()
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                var filters = FilterValues.Where(f => f.IsSelected).Select(f => new FilterCondition
                {
                    ColumnName = f.ColumnName,
                    Value = f.Value
                }).ToList();

                var serializer = new XmlSerializer(typeof(List<FilterCondition>));
                using (var writer = new StreamWriter(saveFileDialog.FileName))
                {
                    serializer.Serialize(writer, filters);
                }
            }
        }

        private void CloseCommand_Executed()
        {
            Application.Current.Shutdown();
        }

        protected virtual void SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
        {
            if (!EqualityComparer<T>.Default.Equals(field, value))
            {
                field = value;
                OnPropertyChanged(propertyName);
            }
        }

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class FilterCondition
    {
        public string ColumnName { get; set; }
        public string Value { get; set; }
    }
}
using System;
using System.Windows.Input;

namespace BugTracker
{
    public class RelayCommand : ICommand
    {
        private readonly Action execute;
        private readonly Func<bool> canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            this.execute = execute ?? throw new ArgumentNullException(nameof(execute));
            this.canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }

        public bool CanExecute(object parameter)
        {
            return canExecute == null || canExecute();
        }

        public void Execute(object parameter)
        {
            execute();
        }
    }
}
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainWindowViewModel();
    }
}
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainWindowViewModel();
    }
}
