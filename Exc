ko<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>
        <Border Grid.Row="2" BorderBrush="gray" BorderThickness="1" Margin="0 10 0 0">
            <StackPanel Orientation="Vertical">
                <TextBlock Text="Filter Conditons" Margin="10 10 0 0" FontWeight="Bold"/>
            </StackPanel>
        </Border>


        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <!-- Set Background and Foreground Colors -->
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="Product Version" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="100" />
                <DataGridTextColumn Header="Date Submitted" Binding="{Binding DateSubmitted}" Width="150" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OS Version" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="View Status" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="150" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="150" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="100" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="150" />
                <DataGridTextColumn Header=" Iteration(DB Browser)" Binding="{Binding IterationDBBrowser}" Width="150" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="150" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="3" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>



</Window>    



using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {

        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filterCategory;
        private string _filePath;
        

        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                TempData = new ObservableCollection<ExcelData>(data);
            }
        }

        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

      

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}

I need to add the following requirements in gui and the code also Add filter conditions and update bug details table based on filter conditions.
 
Show all column names in the filter conditions. When selecting a column name, then show unique row content like Excel filter.


<!-- Filter Conditions Section -->
<Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        
        <!-- Filters -->
        <StackPanel Orientation="Vertical" Grid.Column="0">
            <!-- Label -->
            <TextBlock Text="Filter Conditions" FontWeight="Bold" Margin="0,0,0,10"/>
            
            <!-- Filter Rows -->
            <StackPanel Orientation="Horizontal" Margin="0,5,0,5">
                <TextBlock Text="Column name 1" Width="100" VerticalAlignment="Center"/>
                <ComboBox Width="200" Height="30" ItemsSource="{Binding Column1Filters}" SelectedItem="{Binding SelectedColumn1Filter}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,5,0,5">
                <TextBlock Text="Column name 2" Width="100" VerticalAlignment="Center"/>
                <ComboBox Width="200" Height="30" ItemsSource="{Binding Column2Filters}" SelectedItem="{Binding SelectedColumn2Filter}" />
            </StackPanel>
            <!-- Repeat for additional filters -->
        </StackPanel>
        
        <!-- Buttons -->
        <StackPanel Orientation="Vertical" Grid.Column="1" HorizontalAlignment="Right">
            <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Command="{Binding ApplyFilterCommand}" />
            <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Command="{Binding ResetFilterCommand}" />
            <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Command="{Binding ImportFilterCommand}" />
            <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Command="{Binding ExportFilterCommand}" />
        </StackPanel>
    </Grid>



<Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!-- Label -->
        <TextBlock Text="Filter Conditions" FontWeight="Bold" Margin="0,0,0,10" Grid.Row="0" Grid.Column="0" />

        <!-- Filter Section -->
        <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.Column="0">
            <!-- Column Selector -->
            <ComboBox Width="200" Height="30" 
                      ItemsSource="{Binding ColumnNames}" 
                      SelectedItem="{Binding SelectedColumn}" 
                      Margin="0,0,10,0" 
                      VerticalAlignment="Top" />

            <!-- Filter Values (Displayed Dynamically) -->
            <ListBox Width="300" Height="200" 
                     ItemsSource="{Binding FilterValues}" 
                     SelectionMode="Multiple" 
                     Margin="0,0,10,0">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <CheckBox Content="{Binding}" IsChecked="{Binding IsSelected}" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </StackPanel>

        <!-- Buttons -->
        <StackPanel Orientation="Vertical" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right">
            <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Command="{Binding ApplyFilterCommand}" />
            <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Command="{Binding ResetFilterCommand}" />
            <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Command="{Binding ImportFilterCommand}" />
            <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Command="{Binding ExportFilterCommand}" />
        </StackPanel>
    </Grid>
</Border>

</Border>




<Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="10">
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- Label -->
            <TextBlock Text="Filter Conditions" FontWeight="Bold" Margin="0,0,0,10"/>

            <!-- Dynamic Filter Rows -->
            <ItemsControl ItemsSource="{Binding ColumnFilters}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,5">
                            <!-- ComboBox for Column Selection -->
                            <ComboBox Width="200" Height="30" 
                                      ItemsSource="{Binding ColumnNames}" 
                                      SelectedItem="{Binding SelectedColumn}" 
                                      VerticalAlignment="Center" 
                                      Margin="0,0,10,0" />

                            <!-- ListBox for Unique Values -->
                            <ListBox Width="300" Height="150" 
                                     ItemsSource="{Binding FilterValues}" 
                                     SelectionMode="Multiple" 
                                     Margin="0,0,10,0">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding Value}" 
                                                  IsChecked="{Binding IsSelected}" />
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- Buttons -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Command="{Binding ApplyFilterCommand}" />
                <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Command="{Binding ResetFilterCommand}" />
                <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Command="{Binding ImportFilterCommand}" />
                <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Command="{Binding ExportFilterCommand}" />
            </StackPanel>
        </StackPanel>
    </ScrollViewer>
</Border>


