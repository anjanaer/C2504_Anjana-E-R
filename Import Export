Bug Tracker
Requirement 1
Read and display Quest Mantis exported CSV file. 
[…] button
When […] is clicked, show Open file dialog. Display selected file path in the [File name] textbox. Show error message if file type is not csv.
Show Details button
When the [Show Details] button is clicked, read the csv file mentioned in the [File name] text box and display content in the Bug details table.
This button should be disabled if [File name] text box is empty.
Big Detail table
The number of columns and column names in the table shall be same as the CSV file header. The number of rows should be equal to the number of rows in the CSV file.
e.g.
 
Column name1 = Id, Column name 2 = Project etc. 
 
 <Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">

                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" SelectionMode="Multiple" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" RowHeight="30"  >
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    

Requirement 2
Add filter conditions and update bug details table based on filter conditions.
 
Show all column names in the filter conditions. When selecting a column name, then show unique row content like Excel filter.
Apply Filter button
When [Apply Filter] button is clicked, update bug details table with all filter conditions.
Reset Filter button
When [Reset Filter] button is clicked, update bug details table.
Import Filter button
When [Import Filter] button is clicked, import filter conditions from selected XML file. 
Export Filter button
When [Export Filter] button is clicked, save filter conditions in the XML format.
 
Requirement 3
Show trend chart dialog. <TODO>
 










ChatGPT

You said:
How to import the filter conditions from selected xmlfile in to the excel datagrid 
ChatGPT said:
ChatGPT
To import filter conditions from a selected XML file into an Excel DataGrid in your WPF application, you can follow these steps:

1. Define the XML Structure for Filters
Design your XML file to store filter conditions. For example:

<Filters>
  <Filter>
    <Column>Project</Column>
    <Condition>Contains</Condition>
    <Value>ProjectName</Value>
  </Filter>
  <Filter>
    <Column>Status</Column>
    <Condition>Equals</Condition>
    <Value>Completed</Value>
  </Filter>
</Filters>
2. Read the XML File
Use the System.Xml.Linq namespace to parse the XML and extract filter conditions.

using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

public class FilterCondition
{
    public string Column { get; set; }
    public string Condition { get; set; }
    public string Value { get; set; }
}

public List<FilterCondition> LoadFiltersFromXml(string filePath)
{
    var filters = new List<FilterCondition>();
    var xmlDoc = XDocument.Load(filePath);

    filters = xmlDoc.Descendants("Filter")
        .Select(f => new FilterCondition
        {
            Column = f.Element("Column")?.Value,
            Condition = f.Element("Condition")?.Value,
            Value = f.Element("Value")?.Value
        })
        .ToList();

    return filters;
}
3. Apply Filters to the DataGrid
Once you load the filters, apply them to the DataGrid's ItemsSource. Assuming the data is in a CollectionView, you can use its Filter property.

Example of applying filters:
using System.Windows.Data;

// Assume 'dataGrid' is your DataGrid and 'filters' is the list of FilterCondition loaded from the XML file.

void ApplyFilters(DataGrid dataGrid, List<FilterCondition> filters)
{
    if (dataGrid.ItemsSource is CollectionView collectionView)
    {
        collectionView.Filter = item =>
        {
            foreach (var filter in filters)
            {
                var propertyValue = item.GetType().GetProperty(filter.Column)?.GetValue(item, null)?.ToString();
                if (propertyValue == null) continue;

                switch (filter.Condition)
                {
                    case "Contains":
                        if (!propertyValue.Contains(filter.Value)) return false;
                        break;
                    case "Equals":
                        if (!propertyValue.Equals(filter.Value)) return false;
                        break;
                    // Add more conditions as needed
                }
            }
            return true;
        };
    }
}
4. Load XML and Bind Filters
Invoke the XML reading and filtering logic when the user selects an XML file.

Example for a Button Click:
private void ImportFiltersButton_Click(object sender, RoutedEventArgs e)
{
    var openFileDialog = new Microsoft.Win32.OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml",
        Title = "Select Filter XML"
    };

    if (openFileDialog.ShowDialog() == true)
    {
        var filters = LoadFiltersFromXml(openFileDialog.FileName);
        ApplyFilters(dataGrid, filters);
    }
}
5. Updating the UI
Once the filters are applied, the DataGrid will automatically refresh to show the filtered data.

Notes:
Ensure your XML file follows a consistent structure.
Extend the filter logic to handle more conditions as needed.
Use ObservableCollection or CollectionView for efficient filtering if your data source is dynamic.





You said:
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Command="{Binding SelectAllCommand}" Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True" RowHeight="30">
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    

// ----------------------------------------------------------------------------------------
// Project Name  : ExcelProject
// File Name     : MainWindow.xaml.cs
// Description   : Represents the mainwindow class
// Author        : Anjana E R
// Date          : 16-12-2024
// ----------------------------------------------------------------------------------------
using System.Windows;
using ExcelProject.ExcelRepo;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Main entry point for the application UI.
    /// Defines interaction logic for the main window and binds to the <see cref="MainViewModel"/> for data operations.
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainWindow"/> class.
        /// Sets the DataContext to the <see cref="MainViewModel"/>.
        /// </summary>
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(new ExcelRepository());

        }
   
    }

    
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;


namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private ObservableCollection<ExcelData> data;
        private ObservableCollection<ExcelData> filteredData;
        private string filePath;
        private string selectedColumnFilter;
        private ObservableCollection<string> columnFilters;
        private ObservableCollection<FilterItem> filterValues;
        private bool isSelectAllChecked;
        private bool isFilterApplied;
        private bool isFileValid;
        private string fileNameErrorMessage;

        private  IRepo repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo excelrepo)
        {
            repo = excelrepo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            data = new ObservableCollection<ExcelData>();
            isFileValid = true;
        }

        public ObservableCollection<ExcelData> Data
        {
            get => data;
            set { data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => filteredData;
            set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => filePath;
            set { filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public bool IsFileValid
        {
            get => isFileValid;
            set { isFileValid = value; OnPropertyChanged(nameof(IsFileValid)); }
        }

        public string FileNameErrorMessage
        {
            get => fileNameErrorMessage;
            set { fileNameErrorMessage = value; OnPropertyChanged(nameof(FileNameErrorMessage)); }
        }

        public string SelectedColumnFilter
        {
            get => selectedColumnFilter;
            set { selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => columnFilters;
            set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }
        public bool IsFilterApplied
        {
            get => isFilterApplied;
            set { isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => filterValues;
            set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => isSelectAllChecked;
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }


        // Command to load data from the selected Excel file.
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }

        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
              //// Initialize the ColumnFilters collection
ColumnFilters = new ObservableCollection<string>();

// Check if excelData is not empty
if (excelData.Any())
{
    // Get the first row data
    var firstRow = excelData.FirstOrDefault();

    // Get the properties of the first row object (ExcelData)
    var properties = firstRow.GetType().GetProperties();

    // Loop through each property and add the property name to the ColumnFilters
    foreach (var property in properties)
    {
        ColumnFilters.Add(property.Name);
    }
}

            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            );

            IsSelectAllChecked = true;
        }
        // New method to display data in Bug Details table
        private void ShowDetails()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                LoadData();
            }
        }

        // CanExecute logic for ShowDetailsCommand
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
                    FilterValues = new ObservableCollection<FilterItem>(importedFilters);
                }

                // Update the "Select All" checkbox based on imported data
                IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
            }
        }

        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, FilterValues.ToList());
                }
            }
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
} According to this logic I can only save the currently selected column and filter values but I need to save the currently selected columns and filter conditions and at that time I need to select other columns and filter conditions what is the code required to save the previous data
ChatGPT said:
ChatGPT
To support saving multiple columns and their respective filter conditions in your WPF application, you can extend the logic to track filters for all columns. Here's the step-by-step approach:

1. Introduce a Model to Store Filters by Column
Add a new class that maps column names to their respective filter values.

public class ColumnFilter
{
    public string ColumnName { get; set; }
    public List<FilterItem> FilterValues { get; set; }
}
2. Maintain a Collection of Column Filters
Add an ObservableCollection<ColumnFilter> property in your MainViewModel to store filters for all selected columns.

private ObservableCollection<ColumnFilter> allColumnFilters = new ObservableCollection<ColumnFilter>();
public ObservableCollection<ColumnFilter> AllColumnFilters
{
    get => allColumnFilters;
    set { allColumnFilters = value; OnPropertyChanged(nameof(AllColumnFilters)); }
}
3. Modify the Import and Export Methods
Update your ImportFilter and ExportFilter methods to handle multiple columns.

Import Filters
private void ImportFilter()
{
    var dialog = new OpenFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Deserialize XML to column filters
        var serializer = new XmlSerializer(typeof(List<ColumnFilter>));
        using (var reader = new StreamReader(filePath))
        {
            var importedFilters = (List<ColumnFilter>)serializer.Deserialize(reader);
            AllColumnFilters = new ObservableCollection<ColumnFilter>(importedFilters);
        }

        // Automatically update the UI for the currently selected column
        if (!string.IsNullOrEmpty(SelectedColumnFilter))
        {
            var currentColumnFilter = AllColumnFilters.FirstOrDefault(cf => cf.ColumnName == SelectedColumnFilter);
            FilterValues = currentColumnFilter != null
                ? new ObservableCollection<FilterItem>(currentColumnFilter.FilterValues)
                : new ObservableCollection<FilterItem>();
        }
    }
}
Export Filters
private void ExportFilter()
{
    var dialog = new SaveFileDialog
    {
        Filter = "XML Files (*.xml)|*.xml"
    };

    if (dialog.ShowDialog() == true)
    {
        var filePath = dialog.FileName;

        // Serialize column filters to XML
        var serializer = new XmlSerializer(typeof(List<ColumnFilter>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, AllColumnFilters.ToList());
        }
    }
}
4. Update the Filter Application Logic
Before switching columns, save the current filter conditions into the AllColumnFilters collection.

Save Current Filters
Add a helper method to save filters for the currently selected column.

private void SaveCurrentColumnFilters()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Find existing column filter or create a new one
    var existingFilter = AllColumnFilters.FirstOrDefault(cf => cf.ColumnName == SelectedColumnFilter);
    if (existingFilter != null)
    {
        existingFilter.FilterValues = FilterValues.ToList();
    }
    else
    {
        AllColumnFilters.Add(new ColumnFilter
        {
            ColumnName = SelectedColumnFilter,
            FilterValues = FilterValues.ToList()
        });
    }
}
Load Filters for the Newly Selected Column
Update LoadFilterValues to check AllColumnFilters for existing filters.

private void LoadFilterValues()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Save filters for the previous column
    SaveCurrentColumnFilters();

    // Load filters for the newly selected column
    var existingFilter = AllColumnFilters.FirstOrDefault(cf => cf.ColumnName == SelectedColumnFilter);
    if (existingFilter != null)
    {
        FilterValues = new ObservableCollection<FilterItem>(existingFilter.FilterValues);
    }
    else
    {
        // Get distinct values from the data for the new column
        FilterValues = new ObservableCollection<FilterItem>(Data
            .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
            .Distinct()
            .OrderBy(value => value)
            .Select(value => new FilterItem { Value = value, IsSelected = true })
        );
    }

    IsSelectAllChecked = FilterValues.All(f => f.IsSelected);
}
5. Ensure All Filters are Applied
When applying filters, use AllColumnFilters to process data for all columns.

private void ApplyFilter()
{
    ObservableCollection<ExcelData> filtered = new ObservableCollection<ExcelData>(Data);

    foreach (var columnFilter in AllColumnFilters)
    {
        var columnName = columnFilter.ColumnName;
        var selectedValues = columnFilter.FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

        if (selectedValues.Any())
        {
            filtered = new ObservableCollection<ExcelData>(
                filtered.Where(dataItem =>
                {
                    var propertyValue = dataItem.GetType().GetProperty(columnName)?.GetValue(dataItem)?.ToString();
                    return selectedValues.Contains(propertyValue);
                })
            );
        }
    }

    FilteredData = filtered;
}
6. Test the Workflow
Apply filters for one column, switch to another, and apply filters again.
Export the filters to an XML file.
Import the filters back into the application.
Verify that all previously applied filters persist across columns.
7. Optional: UI Improvements
You could enhance the UI to show all saved filters for columns, perhaps as a summary below the filter sections.






