using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Input;
using Microsoft.Win32;

namespace YourNamespace
{
    /// <summary>
    /// The MainViewModel class handles the interaction logic for filtering and managing Excel data.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _selectedFilter;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private ObservableCollection<FilterItem> _filterValues;
        private bool _isSelectAllChecked;

        // Commands
        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }
        public ICommand ResetFilterCommand { get; }

        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set
            {
                _data = value;
                OnPropertyChanged(nameof(Data));
            }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set
            {
                _filteredData = value;
                OnPropertyChanged(nameof(FilteredData));
            }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedFilter
        {
            get => _selectedFilter;
            set
            {
                _selectedFilter = value;
                OnPropertyChanged(nameof(SelectedFilter));
                LoadFilterValues(); // Automatically load filter values when the filter is selected
            }
        }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get => _filterValues;
            set
            {
                _filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get => _isSelectAllChecked;
            set
            {
                _isSelectAllChecked = value;
                SelectAllFilters(_isSelectAllChecked);
                OnPropertyChanged(nameof(IsSelectAllChecked));
            }
        }

        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
        public MainViewModel()
        {
            // Initialize commands
            LoadCommand = new RelayCommand(LoadData);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
        }

        /// <summary>
        /// Displays a dialog to select an Excel file.
        /// </summary>
        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        /// <summary>
        /// Loads data from the selected Excel file.
        /// </summary>
        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath); // Assuming _repository is defined
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Loads unique filter values for the selected column.
        /// </summary>
        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Retrieve unique values for the selected filter column
            var columnData = BugTrackerDatas.GetColumnData(SelectedFilter, Data);

            // Convert to FilterItem objects
            FilterValues = new ObservableCollection<FilterItem>(
                columnData.Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            // Reset the "Select All" checkbox when loading filter values
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Applies the selected filters to the data.
        /// </summary>
        private void ApplyFilter()
        {
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Get selected filter values
            var selectedValues = FilterValues
                .Where(filter => filter.IsSelected)
                .Select(filter => filter.Value)
                .ToList();

            if (selectedValues.Count > 0)
            {
                // Filter data based on selected values
                FilteredData = new ObservableCollection<ExcelData>(
                    Data.Where(dataItem =>
                    {
                        var propertyValue = dataItem.GetType().GetProperty(SelectedFilter)?.GetValue(dataItem)?.ToString();
                        return selectedValues.Contains(propertyValue);
                    })
                );
            }
            else
            {
                // Reset to original data if no filter values are selected
                FilteredData = new ObservableCollection<ExcelData>(Data);
            }
        }

        /// <summary>
        /// Resets all filters and clears the applied filter.
        /// </summary>
        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Invokes the PropertyChanged event for the specified property name.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
