<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Command="{Binding SelectAllCommand}" Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True" RowHeight="30">
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    

// ----------------------------------------------------------------------------------------
// Project Name  : ExcelProject
// File Name     : MainWindow.xaml.cs
// Description   : Represents the mainwindow class
// Author        : Anjana E R
// Date          : 16-12-2024
// ----------------------------------------------------------------------------------------
using System.Windows;
using ExcelProject.ExcelRepo;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Main entry point for the application UI.
    /// Defines interaction logic for the main window and binds to the <see cref="MainViewModel"/> for data operations.
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainWindow"/> class.
        /// Sets the DataContext to the <see cref="MainViewModel"/>.
        /// </summary>
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(new ExcelRepository());

        }
   
    }

    
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;


namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private ObservableCollection<ExcelData> data;
        private ObservableCollection<ExcelData> filteredData;
        private string filePath;
        private string selectedColumnFilter;
        private ObservableCollection<string> columnFilters;
        private ObservableCollection<FilterItem> filterValues;
        private bool isSelectAllChecked;
        private bool isFilterApplied;
        private bool isFileValid;
        private string fileNameErrorMessage;

        private  IRepo repo;

        public event PropertyChangedEventHandler PropertyChanged;

        public MainViewModel(IRepo excelrepo)
        {
            repo = excelrepo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            data = new ObservableCollection<ExcelData>();
            isFileValid = true;
        }

        public ObservableCollection<ExcelData> Data
        {
            get => data;
            set { data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => filteredData;
            set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => filePath;
            set { filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public bool IsFileValid
        {
            get => isFileValid;
            set { isFileValid = value; OnPropertyChanged(nameof(IsFileValid)); }
        }

        public string FileNameErrorMessage
        {
            get => fileNameErrorMessage;
            set { fileNameErrorMessage = value; OnPropertyChanged(nameof(FileNameErrorMessage)); }
        }

        public string SelectedColumnFilter
        {
            get => selectedColumnFilter;
            set { selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => columnFilters;
            set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }
        public bool IsFilterApplied
        {
            get => isFilterApplied;
            set { isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => filterValues;
            set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => isSelectAllChecked;
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }


        // Command to load data from the selected Excel file.
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }

        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            );

            IsSelectAllChecked = true;
        }
        // New method to display data in Bug Details table
        private void ShowDetails()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                LoadData();
            }
        }

        // CanExecute logic for ShowDetailsCommand
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
                    FilterValues = new ObservableCollection<FilterItem>(importedFilters);
                }

                // Update the "Select All" checkbox based on imported data
                IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
            }
        }

        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, FilterValues.ToList());
                }
            }
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}



// ----------------------------------------------------------------------------------------
// Project Name: ExcelProject
// File Name: IRepo.cs
// Description: Defines an interface for managing data operations in the ExcelProject.
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------
using System.Collections.Generic;
using ExcelProject.Model;

/// <summary>
/// Provides a contract for handling data operations in the ExcelProject.
/// </summary>
/// <remarks>
/// The IRepo interface defines the necessary methods for get data from excel,apply filter to the data
/// </remarks>

namespace ExcelProject.Repo
{
    public interface IRepo
    {
      
        List<ExcelData> GetData(string filePath);  
        List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues);  // Apply a filter to the data
    }
}


using System.ComponentModel;


namespace ExcelProject.Model
{
    public class FilterItem : INotifyPropertyChanged
    {

        private bool _isSelected;
        public string Value { get; set; }

        public bool IsSelected
        {
            get => _isSelected;
            set
            {
                _isSelected = value;
                OnPropertyChanged(nameof(IsSelected));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DocumentFormat.OpenXml.Math;
using System.IO;

namespace ExcelProject.Model
{
    public class ExcelData
    {
        [ExcelColumn("Id")]
        public string Id {  get; set; }

        [ExcelColumn("Project")]
        public string Project { get; set; }

        [ExcelColumn("Reporter")]
        public string Reporter { get; set; }

        [ExcelColumn("Assigned To")]
        public string AssignedTo { get; set; }

        [ExcelColumn("Priority")]
        public string Priority { get; set; }

        [ExcelColumn("Severity")]
        public string Severity { get; set; }

        [ExcelColumn("Reproducibility")]
        public string Reproducibility { get; set; }

        [ExcelColumn("Product Version")]
        public string ProductVersion { get; set; }

        [ExcelColumn("Category")]
        public string Category { get; set; }

        [ExcelColumn("Date Submitted")]

        public string DateSubmitted { get; set; }

        [ExcelColumn("OS")]
        public string OS { get; set; }

        [ExcelColumn("OS Version")]
        public string OSVersion { get; set; }

        [ExcelColumn("Platform")]

        public string Platform { get; set; }

        [ExcelColumn("View Status")]
        public string ViewStatus { get; set; }

        [ExcelColumn("Updated")]
        public string Updated { get; set; }

        [ExcelColumn("Summary")]
        public string Summary { get; set; }

        [ExcelColumn("Status")]
        public string Status { get; set; }

        [ExcelColumn("Resolution")]
        public string Resolution { get; set; }

        [ExcelColumn("Fixed in Version")]
        public string FixedInVersion { get; set; }

        [ExcelColumn("Description")]
        public string Description { get; set; }

        [ExcelColumn("Steps To Reproduce")]
        public string StepsToReproduce { get; set; }

        [ExcelColumn("Code Owner")]

        public string CodeOwner { get; set; }

        [ExcelColumn("Date Resolved")]
        public string DateResolved { get; set; }

        [ExcelColumn("Defect Impact to User")]

        public string DefectImpactToUser { get; set; }

        [ExcelColumn("Defect Type")]
        public string DefectType { get; set; }

        [ExcelColumn("Iteration")]

        public string Iteration { get; set; }

        [ExcelColumn("Iteration (Data Manager)")]
        public string IterationDataManager { get; set; }

        [ExcelColumn("Iteration (XRD Measurement)")]
        public string IterationXRDMeasurement { get; set; }

        [ExcelColumn("Module")]
        public string Module { get; set; }

        [ExcelColumn("Module(Common Plugins)")]

        public string ModuleCommonPlugins { get; set; }

        [ExcelColumn("ODC Period")]

        public string ODCPeriod { get; set; }

        [ExcelColumn("Phase of Origin")]
        public string PhaseOfOrigin { get; set; }

        [ExcelColumn("Responsibility")]
        public string Responsibility { get; set; }

        [ExcelColumn("Test Case Id")]
        public string TestCaseId { get; set; }

        [ExcelColumn("Tested By")]
        public string TestedBy { get; set; }

        [ExcelColumn("Testing Level")]
        public string TestingLevel { get; set; }

        [ExcelColumn("Version")]
        public string Version { get; set; }

        [ExcelColumn("Iteration (Powder XRD)")]
        public string IterationPowderXRD{ get; set; }

        [ExcelColumn("Iteration (SmartFlex)")]
        public string IterationSmartFlex { get; set; }

        [ExcelColumn("Iteration(DB Browser)")]

        public string IterationDBBrowser { get; set; }

        [ExcelColumn("Iteration(MDA)")]
        public string IterationMDA { get; set; }

        [ExcelColumn("Iteration(XRD DSC Analysis)")]

        public string IterationXRDDSCAnalysis { get; set; }

        [ExcelColumn("Scope")]

        public string Scope { get; set; }

        [ExcelColumn("Bug Analysis Status")]

        public string BugAnalysisStatus { get; set; }
 


    }

}


using System;

namespace ExcelProject.Model
{
    /// <summary>
    /// Custom attribute to map Excel column names to C# properties.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class ExcelColumnAttribute : Attribute
    {
        /// <summary>
        /// Gets the name of the Excel column that this property corresponds to.
        /// </summary>
        public string ColumnName { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExcelColumnAttribute"/> class with the specified Excel column name.
        /// </summary>
        /// <param name="columnName">The name of the Excel column to map to the property.</param>
        public ExcelColumnAttribute(string columnName)
        {
            ColumnName = columnName;
        }
    }
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ExcelProject.Model;
using ExcelProject.Repo;
using OfficeOpenXml;
using System.Reflection;


namespace ExcelProject.ExcelRepo
{
    /// <summary>
    /// Repository for handling Excel file operations.
    /// </summary>
    public class ExcelRepository : IRepo
    {

        public List<ExcelData> GetData(string filePath)
        {
            var result = new List<ExcelData>();

            // Open the Excel file using EPPlus
            using (var package = new ExcelPackage(new FileInfo(filePath)))
            {
                var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet
                if (worksheet == null)
                    throw new Exception("Worksheet is empty or not found.");

                // Read the header row (column names) once
                var headerRow = worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column]
                    .Select(cell => cell.Text.Trim()) // Trim spaces to avoid mismatches
                    .ToList();

                // Get properties with ExcelColumnAttribute once to improve performance
                var propertyMappings = typeof(ExcelData).GetProperties()
                    .Select(prop => new
                    {
                        Property = prop,
                        Attribute = prop.GetCustomAttribute<ExcelColumnAttribute>()
                    })
                    .Where(mapping => mapping.Attribute != null)
                    .ToDictionary(mapping => mapping.Attribute.ColumnName, mapping => mapping.Property);

                // Read data rows
                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                {
                    var rowData = new ExcelData();

                    // Map each cell to the corresponding property
                    for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                    {
                        var columnName = headerRow[col - 1]; // Get column name
                        if (propertyMappings.TryGetValue(columnName, out var property))
                        {
                            var cellValue = worksheet.Cells[row, col].Text?.Trim(); // Trim to avoid extra spaces
                            property.SetValue(rowData, cellValue);
                        }
                    }

                    result.Add(rowData);
                }
            }

            return result;
        }

        public List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues)
        {
            if (string.IsNullOrWhiteSpace(column) || selectedValues == null || !selectedValues.Any())
                return data;

            return data.Where(row =>
            {
                var property = row.GetType().GetProperty(column);
                if (property != null)
                {
                    var value = property.GetValue(row)?.ToString();
                    return selectedValues.Contains(value);
                }
                return false;
            }).ToList();
        }

        public List<string> GetFilterValues(List<ExcelData> data, string columnName)
        {
            if (string.IsNullOrWhiteSpace(columnName))
                return new List<string>();

            return data
                .Select(row =>
                {
                    var property = row.GetType().GetProperty(columnName);
                    return property?.GetValue(row)?.ToString();
                })
                .Where(value => !string.IsNullOrWhiteSpace(value)) // Exclude null or empty values
                .Distinct()
                .ToList();
        }
    }
}



private ObservableCollection<DataGridColumn> dataGridColumns; 
   public ObservableCollection<DataGridColumn> DataGridColumns // Property to bind columns dynamically
    {
        get => dataGridColumns;
        set { dataGridColumns = value; OnPropertyChanged(nameof(DataGridColumns)); }
    }

  private void LoadData()
    {
        if (!string.IsNullOrEmpty(FilePath))
        {
            var excelData = repo.GetData(FilePath);
            Data = new ObservableCollection<ExcelData>(excelData);
            FilteredData = new ObservableCollection<ExcelData>(excelData);

            // Dynamically generate columns for the DataGrid based on the first row of data
            DataGridColumns.Clear(); // Clear any existing columns
            var firstRow = excelData.FirstOrDefault();

            if (firstRow != null)
            {
                foreach (var property in firstRow.GetType().GetProperties())
                {
                    var column = new DataGridTextColumn
                    {
                        Header = property.Name,
                        Binding = new Binding(property.Name)
                    };
                    DataGridColumns.Add(column);
                }
            }

            // Dynamically set the ColumnFilters (for filter dropdowns)
            ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
        }
    }














