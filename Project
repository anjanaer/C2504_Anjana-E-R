using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    public interface IRepo
    {
        List<ExcelData> ReadExcelFile(string filePath);
    }
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;
using ExcelProject.Repo;
using ClosedXML.Excel;
using System.Collections.ObjectModel;


namespace ExcelProject.ExcelRepo
{
    /// <summary>
    /// Repository for handling Excel file operations.
    /// </summary>
    public class ExcelRepository : IRepo
    {

        /// <summary>
        /// Reads data from an Excel file and maps it to a list of <see cref="ExcelData"/>.
        /// </summary>
        /// <param name="filePath">The path of the Excel file to read.</param>
        /// <returns>A list of <see cref="ExcelData"/> populated with data from the Excel file.</returns>
        public List<ExcelData> ReadExcelFile(string filePath)
        {
            var data = new List<ExcelData>();

            if (File.Exists(filePath))
            {
                using (var workbook = new XLWorkbook(filePath))
                {
                    var worksheet = workbook.Worksheet(1); // Read the first worksheet
                    foreach (var row in worksheet.RowsUsed().Skip(1)) // Skip header row
                    {
                        data.Add(new ExcelData
                        {
                            Id = row.Cell(1).Value.ToString(),
                            Project = row.Cell(2).Value.ToString(),
                            Reporter = row.Cell(3).Value.ToString(),
                            AssignedTo = row.Cell(4).Value.ToString(),
                            Priority = row.Cell(5).Value.ToString(),
                            Severity = row.Cell(6).Value.ToString(),
                            Reproducibility = row.Cell(7).Value.ToString(),
                            ProductVersion = row.Cell(8).Value.ToString(),
                            Category = row.Cell(9).Value.ToString(),
                            DateSubmitted = row.Cell(10).Value.ToString(),
                            OS = row.Cell(11).Value.ToString(),
                            OSVersion = row.Cell(12).Value.ToString(),
                            Platform = row.Cell(13).Value.ToString(),
                            ViewStatus = row.Cell(14).Value.ToString(),
                            Updated = row.Cell(15).Value.ToString(),
                            Summary = row.Cell(16).Value.ToString(),
                            Status = row.Cell(17).Value.ToString(),
                            Resolution = row.Cell(18).Value.ToString(),
                            FixedInVersion = row.Cell(19).Value.ToString(),
                            Description = row.Cell(20).Value.ToString(),
                            StepsToReproduce = row.Cell(21).Value.ToString(),
                            CodeOwner = row.Cell(22).Value.ToString(),
                            DateResolved = row.Cell(23).Value.ToString(),
                            DefectImpactToUser = row.Cell(24).Value.ToString(),
                            DefectType = row.Cell(25).Value.ToString(),
                            Iteration = row.Cell(26).Value.ToString(),
                            IterationDataManager = row.Cell(27).Value.ToString(),
                            IterationXRDMeasurement = row.Cell(28).Value.ToString(),
                            Module = row.Cell(29).Value.ToString(),
                            ModuleCommonPlugins = row.Cell(30).Value.ToString(),
                            ODCPeriod = row.Cell(31).Value.ToString(),
                            PhaseOfOrigin = row.Cell(32).Value.ToString(),
                            Responsibility = row.Cell(33).Value.ToString(),
                            TestCaseId = row.Cell(34).Value.ToString(),
                            TestedBy = row.Cell(35).Value.ToString(),
                            TestingLevel = row.Cell(36).Value.ToString(),
                            Version = row.Cell(37).Value.ToString(),
                            IterationPowderXRD = row.Cell(38).Value.ToString(),
                            IterationSmartFlex = row.Cell(39).Value.ToString(),
                            IterationDBBrowser = row.Cell(40).Value.ToString(),
                            IterationMDA = row.Cell(41).Value.ToString(),
                            IterationXRDDSCAnalysis = row.Cell(42).Value.ToString(),
                            Scope = row.Cell(43).Value.ToString(),
                            BugAnalysisStatus = row.Cell(44).Value.ToString(),
                        });
                    }
                }
            }

            return data;
        }
    }

}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using ExcelProject.ExcelRepo;
using Microsoft.Win32;
using System.IO;
using DocumentFormat.OpenXml.Office2021.Excel.NamedSheetViews;
using System.Runtime.InteropServices;
using DocumentFormat.OpenXml.Office2010.Excel;
using System.Reflection;
using System.Xml.Serialization;
using System.Data.Common;

namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {
        // Fields and Properties
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        private string _filePath;
        private string selectedFilter;
        private ObservableCollection<FilterItem> filterValues;
        private bool isSelectAllChecked;
        private readonly IRepo _repository;
        public bool IsFilterApplied { get; private set; }

        public MainViewModel()
        {
            _repository = new ExcelRepository();

            // Commands
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);




            // Initialize Collections
            ColumnFilters = new ObservableCollection<string>(BugTrackerDatas.ColumnNames);
            ColumnNames = new ObservableCollection<string>();
            FilteredData = new ObservableCollection<ExcelData>();
            FilterValues = new ObservableCollection<FilterItem>();
        }

        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedFilter
        {
            get => selectedFilter;
            set
            {
                selectedFilter = value;
                LoadFilterValues();
                OnPropertyChanged(nameof(SelectedFilter));
            }
        }

        public ObservableCollection<string> ColumnFilters { get; set; }
        public ObservableCollection<string> ColumnNames { get; set; }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get
            {
                return isSelectAllChecked;
            }
            set
            {
                isSelectAllChecked = value;
                SelectAllFilters(isSelectAllChecked);
                OnPropertyChanged(nameof(IsSelectAllChecked));
            }
        }

        // Command to load data from the selected Excel file.
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }

        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        /// <summary>
        /// Loads data from the selected Excel file.
        /// </summary>
        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Loads unique filter values for the selected column.
        /// </summary>
        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Get column data as strings
            var columnData = BugTrackerDatas.GetColumnData(SelectedFilter, Data);

            // Convert to FilterItem objects
            FilterValues = new ObservableCollection<FilterItem>(
                columnData.Select(value => new FilterItem { Value = value, IsSelected = false })
            );

            // Reset the Select All checkbox when loading filter values
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Applies filters based on user-selected criteria.
        /// </summary>
        private void ApplyFilter()
        {    // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        /// <summary>
        /// Resets all filters and clears filtered data.
        /// </summary>
        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
                    FilterValues = new ObservableCollection<FilterItem>(importedFilters);
                }

                // Update the "Select All" checkbox based on imported data
                IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
            }
        }

        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, FilterValues.ToList());
                }
            }
        }


        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Invokes the PropertyChanged event for the specified property name.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }


}














