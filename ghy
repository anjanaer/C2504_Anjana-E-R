<StackPanel Grid.Row="1" Orientation="Vertical" Margin="10">
    <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
        <TextBlock Text="Column: " VerticalAlignment="Center" Width="60" />
        <ComboBox x:Name="columnSelector" Width="150" ItemsSource="{Binding ColumnNames}" SelectedItem="{Binding SelectedColumn}" />
        <Button Content="Apply Filter" Width="100" Margin="10,0,0,0" Command="{Binding ApplyFilterCommand}" />
        <Button Content="Reset Filter" Width="100" Margin="10,0,0,0" Command="{Binding ResetFilterCommand}" />
    </StackPanel>
    <ListBox x:Name="filterValues" ItemsSource="{Binding FilterValues}" SelectionMode="Multiple" Margin="0,5,0,0">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <CheckBox Content="{Binding}" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" />
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>
</StackPanel>


using System.Collections.ObjectModel;
using System.Linq;

public class MainViewModel : ViewModelBase
{
    public ObservableCollection<string> ColumnNames { get; set; }
    public ObservableCollection<string> FilterValues { get; set; }
    public string SelectedColumn { get; set; }
    public ObservableCollection<ExcelData> FilteredData { get; set; }

    public RelayCommand ApplyFilterCommand { get; }
    public RelayCommand ResetFilterCommand { get; }

    public MainViewModel()
    {
        // Initialize commands
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);

        // Load data and set column names
        var data = new ExcelRepository().ReadExcelFile("path/to/your/excel/file.xlsx");
        FilteredData = new ObservableCollection<ExcelData>(data);
        ColumnNames = new ObservableCollection<string>(typeof(ExcelData).GetProperties().Select(p => p.Name));
    }

    private void ApplyFilter()
    {
        if (!string.IsNullOrEmpty(SelectedColumn) && FilterValues.Any())
        {
            var propertyInfo = typeof(ExcelData).GetProperty(SelectedColumn);
            FilteredData = new ObservableCollection<ExcelData>(
                FilteredData.Where(item => FilterValues.Contains(propertyInfo.GetValue(item)?.ToString())));
        }
    }

    private void ResetFilter()
    {
        FilteredData = new ObservableCollection<ExcelData>(new ExcelRepository().ReadExcelFile("path/to/your/excel/file.xlsx"));
    }
}





private string _selectedColumn;
public string SelectedColumn
{
    get => _selectedColumn;
    set
    {
        _selectedColumn = value;
        OnPropertyChanged(nameof(SelectedColumn));

        // Load unique values for the selected column
        if (!string.IsNullOrEmpty(_selectedColumn))
        {
            var propertyInfo = typeof(ExcelData).GetProperty(_selectedColumn);
            FilterValues = new ObservableCollection<string>(
                FilteredData.Select(item => propertyInfo.GetValue(item)?.ToString()).Distinct());
        }
    }
}

public RelayCommand ImportFilterCommand { get; }
public RelayCommand ExportFilterCommand { get; }

private void ImportFilter()
{
    // Load filter conditions from XML
}

private void ExportFilter()
{
    // Save filter conditions to XML
}
