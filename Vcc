// ----------------------------------------------------------------------------------------
// Project Name: ExcelDataProject
// File Name: MainViewModel.cs
// Description: The MainViewModel class handles the interaction between the View and the Model
// which serves as a ViewModel for managing Excel data
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;




namespace ExcelProject.ViewModel
{
    /// <summary>
    /// ViewModel for managing Excel data and filters
    /// Implements INotifyPropertyChanged to notify UI updates
    /// </summary>

    public class MainViewModel : INotifyPropertyChanged
    {
        // File path of the selected Excel file
        private string filePath;
            
        // The column currently selected for filtering
        private string selectedColumnFilter;

        // Indicates whether the "Select All" checkbox for filters is checked
        private bool isSelectAllChecked;

        // Indicates whether a filter has been applied to the data
        private bool isFilterApplied;

        // Indicates whether the selected file is a valid Excel file
        private bool isFileValid;

        // Error message to show if the selected file is invalid
        private string fileNameErrorMessage;

        // Holds all the Excel data loaded from the file
        private ObservableCollection<ExcelData> data;

        // Holds the filtered data after applying filters
        private ObservableCollection<ExcelData> filteredData;

        // List of available columns for filtering, based on the Excel data
        private ObservableCollection<string> columnFilters;

        // List of filter options for the selected column
        private ObservableCollection<FilterItem> filterValues;


        // Repository interface to fetch and manage Excel data
        private IRepo repo;

        ///<summary>
        ///Constructor for initializing commands and properties
        ///</summary>

        public MainViewModel(IRepo excelrepo)
        {
            // Initialize repository interface for interacting with Excel data
            repo = excelrepo;

            // Initialize commands


            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties

            // List of available columns for filtering
            ColumnFilters = new ObservableCollection<string>();
            // Filter options for the selected column
            FilterValues = new ObservableCollection<FilterItem>();
            // Data after filters have been applied
            FilteredData = new ObservableCollection<ExcelData>();
            // All loaded Excel data
            Data = new ObservableCollection<ExcelData>();
            // Flag indicating whether the selected file is a valid Excel file
            isFileValid = true;
        }

        
        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        public string FilePath
        {
            get 
            {
                return filePath;
            } 
            set
            {
                filePath = value; 
                OnPropertyChanged(nameof(FilePath)); 
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the selected file is valid.
        /// This property indicates whether the Excel file has a valid format.
        /// </summary>
        public bool IsFileValid
        {
            get
            {
               return isFileValid;
            }
            set 
            { 
                isFileValid = value;
                OnPropertyChanged(nameof(IsFileValid)); 
            }
        }

        /// <summary>
        /// Gets or sets the error message when the selected file is invalid.
        /// This property holds an error message if the file is not a valid Excel file.
        /// </summary>
        public string FileNameErrorMessage
        {
            get
            {
               return fileNameErrorMessage;
            
            }

            set
            { 
                fileNameErrorMessage = value;
                OnPropertyChanged(nameof(FileNameErrorMessage)); 
            }
        }


        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>  
        public ObservableCollection<ExcelData> Data
        {
            get 
            { 
                return data;
            } 
            set 
            {
                data = value; 
                OnPropertyChanged(nameof(Data));
            }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get 
            {
                return filteredData;
            } 
            set 
            { 
                filteredData = value;
                OnPropertyChanged(nameof(FilteredData));
            }
        }

       

        /// <summary>
        /// Gets or sets the collection of available column filters.
        /// This collection holds the list of column names available for filtering the data.
        /// </summary>
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;
            }
            set 
            {
                columnFilters = value;
                OnPropertyChanged(nameof(ColumnFilters)); 
            }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedColumnFilter
        {
            get
            {
                return selectedColumnFilter;

            }
            set
            {
                selectedColumnFilter = value;
                OnPropertyChanged(nameof(SelectedColumnFilter)); 
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get
            {
                return isSelectAllChecked;

            }
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }



        /// <summary>
        /// Gets or sets a value indicating whether a filter has been applied to the data.
        /// This property indicates if any filter has been applied to the data set.
        /// </summary>
        public bool IsFilterApplied
        {
            get
            {
                return isFilterApplied;
            }
            set
            {
                isFilterApplied = value;
                OnPropertyChanged(nameof(IsFilterApplied)); }
        }
        private ObservableCollection<ColumnFilter> allColumnFilters = new ObservableCollection<ColumnFilter>();
        public ObservableCollection<ColumnFilter> AllColumnFilters
        {
            get => allColumnFilters;
            set { allColumnFilters = value; OnPropertyChanged(nameof(AllColumnFilters)); }
        }


        // Command to load data from the Excel file
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }

        // Command to import filter settings from an XML file
        public ICommand ImportFilterCommand { get; }

        // Command to export current filter settings to an XML file
        public ICommand ExportFilterCommand { get; }

        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        //// <summary>
        /// Loads data from the Excel file and populates the Data and FilteredData collections.
        /// It also dynamically generates the column filters based on the first row's property names.
        /// </summary>
        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                // Retrieve data from the repository
                var excelData = repo.GetData(FilePath);

                // Populate the Data and FilteredData collections
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row's properties
                ColumnFilters = new ObservableCollection<string>();

                // Check if excelData is not empty
                if (excelData.Any())
                {
                    // Get the first row data
                    var firstRow = excelData.FirstOrDefault();

                    // Get the properties of the first row object (ExcelData)
                    var properties = firstRow.GetType().GetProperties();

                    // Loop through each property and add the property name to the ColumnFilters
                    foreach (var property in properties)
                    {
                        ColumnFilters.Add(property.Name);
                    }
                }
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Determines if the "Show Details" command can execute. It returns true if a file is loaded, otherwise false.
        /// </summary>
        /// <returns>True if a file is loaded, otherwise false.</returns>
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }

        /// <summary>
        /// Loads the distinct filter values from the selected column to be used in the filter options.
        /// It populates the FilterValues collection with the available distinct values and marks them as selected by default.
        /// </summary>
        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Where(value => value != null)
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            );

            IsSelectAllChecked = true;
        }

        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        

        /// <summary>
        /// Applies the selected filters to the data. It filters the Data collection based on the selected filter values
        /// and updates the FilteredData collection with the filtered results.
        /// </summary>
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        /// <summary>
        /// Resets the filters to their default state, unselecting all filters and restoring the original data to FilteredData.
        /// It also unchecks the "Select All" checkbox.
        /// </summary>
        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            // Restore the original data to FilteredData
            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Opens a file dialog to import filter conditions from an XML file.
        /// The filter conditions are deserialized from the XML file and applied to the FilterValues collection.
        /// It also updates the "Select All" checkbox based on the imported data.
        /// </summary>
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to column filters
                var serializer = new XmlSerializer(typeof(List<ColumnFilter>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<ColumnFilter>)serializer.Deserialize(reader);
                    AllColumnFilters = new ObservableCollection<ColumnFilter>(importedFilters);
                }

                // Automatically update the UI for the currently selected column
                if (!string.IsNullOrEmpty(SelectedColumnFilter))
                {
                    var currentColumnFilter = AllColumnFilters.FirstOrDefault(cf => cf.ColumnName == SelectedColumnFilter);
                    FilterValues = currentColumnFilter != null
                        ? new ObservableCollection<FilterItem>(currentColumnFilter.FilterValues)
                        : new ObservableCollection<FilterItem>();
                }
            }
        }

        /// <summary>
        /// Opens a file dialog to export the current filter conditions to an XML file.
        /// The filter conditions are serialized and saved to the selected XML file.
        /// </summary>
        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize column filters to XML
                var serializer = new XmlSerializer(typeof(List<ColumnFilter>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, AllColumnFilters.ToList());
                }
            }
        }
        private void SaveCurrentColumnFilters()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Find existing column filter or create a new one
            var existingFilter = AllColumnFilters.FirstOrDefault(cf => cf.ColumnName == SelectedColumnFilter);
            if (existingFilter != null)
            {
                existingFilter.FilterValues = FilterValues.ToList();
            }
            else
            {
                AllColumnFilters.Add(new ColumnFilter
                {
                    ColumnName = SelectedColumnFilter,
                    FilterValues = FilterValues.ToList()
                });
            }
        }

        /// <summary>
        /// Event triggered when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event for a given property name.
        /// </summary>
        /// <param name="propertyName">Name of the property that changed.</param>
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}



How to combine this above logic and the solution overview to ensurevthat the filter conditions and seelcted filtervalues for each column remain intact when switching between columns
Give me the modified complete mainviewmodel code and also i need to import the filter conditions that saved to display on to the fitervalues list and also need to export the filterconditions after apllying filter in to the xml file

Solution Overview
Maintain a Dictionary for Filters:
Use a Dictionary<string, List<FilterItem>> where the key is the column name, and the value is the list of FilterItem objects for that column.

Bind FilterValues Dynamically:
Update the FilterValues property dynamically based on the selected column.

Preserve Filters:
When switching columns, save the current state of FilterValues back to the dictionary.

Implementation
1. Add a Dictionary for Column Filters
Add a dictionary in your MainViewModel to store filter values for each column:

csharp
Copy code
private Dictionary<string, List<FilterItem>> columnFilters = new Dictionary<string, List<FilterItem>>();

public Dictionary<string, List<FilterItem>> ColumnFilters
{
    get => columnFilters;
    set
    {
        columnFilters = value;
        OnPropertyChanged(nameof(ColumnFilters));
    }
}
2. Update FilterValues Dynamically
Modify the FilterValues property to reflect the filters for the selected column:

csharp
Copy code
private List<FilterItem> filterValues;

public List<FilterItem> FilterValues
{
    get => filterValues;
    set
    {
        filterValues = value;
        OnPropertyChanged(nameof(FilterValues));
    }
}

private string selectedColumnFilter;

public string SelectedColumnFilter
{
    get => selectedColumnFilter;
    set
    {
        if (selectedColumnFilter != value)
        {
            // Save the current filter values before switching columns
            if (!string.IsNullOrEmpty(selectedColumnFilter))
            {
                ColumnFilters[selectedColumnFilter] = new List<FilterItem>(FilterValues);
            }

            selectedColumnFilter = value;

            // Load the filter values for the newly selected column
            if (ColumnFilters.ContainsKey(selectedColumnFilter))
            {
                FilterValues = new List<FilterItem>(ColumnFilters[selectedColumnFilter]);
            }
            else
            {
                FilterValues = new List<FilterItem>(); // Initialize if no filter exists
            }

            OnPropertyChanged(nameof(SelectedColumnFilter));
        }
    }
}
3. Apply Filter Logic
Update your ApplyFilter method to use ColumnFilters:

csharp
Copy code
private void ApplyFilter()
{
    if (!ColumnFilters.Any()) return;

    FilteredData = new ObservableCollection<ExcelData>(
        Data.Where(dataItem =>
        {
            foreach (var columnFilter in ColumnFilters)
            {
                var propertyValue = dataItem.GetType().GetProperty(columnFilter.Key)?.GetValue(dataItem)?.ToString();
                if (columnFilter.Value.Any(f => f.IsSelected) && 
                    !columnFilter.Value.Any(f => f.IsSelected && f.Value == propertyValue))
                {
                    return false;
                }
            }
            return true;
        })
    );

    IsFilterApplied = ColumnFilters.Values.Any(f => f.Any(item => item.IsSelected));
}
4. Reset Specific Column Filter
To reset filters for the currently selected column:

csharp
Copy code
private void ResetColumnFilter()
{
    if (!string.IsNullOrEmpty(SelectedColumnFilter))
    {
        if (ColumnFilters.ContainsKey(SelectedColumnFilter))
        {
            ColumnFilters[SelectedColumnFilter].Clear();
            FilterValues.Clear();
        }
    }

    ApplyFilter();
}
5. Initialize ColumnFilters
Ensure ColumnFilters is initialized for all available columns:

csharp
Copy code
foreach (var columnName in Data.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name) ?? new List<string>())
{
    ColumnFilters[columnName] = new List<FilterItem>();
}
How It Works
Switching Columns:

When switching columns (SelectedColumnFilter), save the current filter values into the ColumnFilters dictionary.
Load the saved filter values for the newly selected column into FilterValues.
Applying Filters:

The ApplyFilter method processes all filters stored in the ColumnFilters dictionary, ensuring filters for all columns are applied simultaneously.
Resetting Filters:

Use ResetColumnFilter to clear the filters for a specific column or reset all filters by clearing the ColumnFilters dictionary.
This approach ensures that:

Filters for each column are saved independently.
Switching columns does not affect the previously applied filters for other columns.
The UI reflects the saved state of filters for the currently selected column.





You said:
foreach (var columnName in Data.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name) ?? new List<string>())
{
    ColumnFilters[columnName] = new List<FilterItem>();
}Where does it initializw
ChatGPT said:
ChatGPT
The code snippet you provided initializes the ColumnFilters dictionary by adding an entry for each column in your data source. This initialization should be done when your data (Data collection) is first loaded or whenever it changes (e.g., after fetching the data from a file or database).

Here’s where and how you can initialize it:

Initialization Location
You can place the initialization logic in the following scenarios:

In the ViewModel Constructor:
If your data is already available when the ViewModel is created.

After Data is Loaded:
If your data is being loaded asynchronously or at runtime.

Example 1: Initialization in the Constructor
csharp
Copy code
public MainViewModel()
{
    // Assuming Data is already initialized
    InitializeColumnFilters();
}
Example 2: Initialization After Data Load
csharp
Copy code
private ObservableCollection<ExcelData> data;
public ObservableCollection<ExcelData> Data
{
    get => data;
    set
    {
        data = value;
        OnPropertyChanged(nameof(Data));
        InitializeColumnFilters(); // Reinitialize filters whenever data changes
    }
}
InitializeColumnFilters Method
Here’s how you can define the InitializeColumnFilters method:

csharp
Copy code
private void InitializeColumnFilters()
{
    ColumnFilters.Clear(); // Clear any existing filters

    if (Data?.Any() == true)
    {
        // Create an empty list of filters for each column
        foreach (var columnName in Data.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name) ?? new List<string>())
        {
            if (!ColumnFilters.ContainsKey(columnName))
            {
                ColumnFilters[columnName] = new List<FilterItem>();
            }
        }
    }
}
Example Workflow
Data is Loaded:
The Data collection is populated, either at initialization or after being fetched.

ColumnFilters Initialization:

InitializeColumnFilters iterates through the properties of the Data objects.
Each property name is treated as a column name, and an empty filter list is assigned to it.
Filters Are Ready:
You can now add FilterItem objects to the lists in ColumnFilters for each column.

Why Initialize Here?
It ensures that ColumnFilters always matches the structure of your Data collection.
If your Data changes dynamically (e.g., file import), ColumnFilters is reinitialized accordingly.
This setup maintains flexibility and synchronization between your data and filters.
<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">

                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Command="{Binding SelectAllCommand}" Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" RowHeight="30"  >
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    



this is the xaml of my code give me the mainviewmodel code How to combine this above logic and the solution overview to ensurevthat the filter conditions and seelcted filtervalues for each column remain intact when switching between columns
Give me the modified complete mainviewmodel code and also i need to import the filter conditions that saved to display on to the fitervalues list and also need to export the filterconditions after apllying filter in to the xml file











