public class MainViewModel : INotifyPropertyChanged
{
    private IRepo _repository;
    private ObservableCollection<ExcelData> _data;
    private ObservableCollection<ExcelData> _filteredData;
    private string _filterCategory;
    private string _filePath;

    public MainViewModel()
    {
        _repository = new ExcelRepository();
        ShowDialogCommand = new RelayCommand(ShowDialog);
        LoadCommand = new RelayCommand(LoadData);
        CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);
        ImportFilterCommand = new RelayCommand(ImportFilter);
        ExportFilterCommand = new RelayCommand(ExportFilter);

        ColumnFilters = new ObservableCollection<string>(BugTrackerDatas.ColumnNames);
        ColumnNames = new ObservableCollection<string>();
        ColumnFilterOptions = new ObservableCollection<ColumnFilter>();
    }

    public ObservableCollection<ExcelData> Data
    {
        get => _data;
        set { _data = value; OnPropertyChanged(nameof(Data)); }
    }

    public ObservableCollection<ExcelData> FilteredData
    {
        get => _filteredData;
        set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
    }

    public string FilterCategory
    {
        get => _filterCategory;
        set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
    }

    public string FilePath
    {
        get => _filePath;
        set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
    }

    public ObservableCollection<string> ColumnNames { get; set; }
    public ObservableCollection<FilterValue> FilterValues { get; set; }
    public ObservableCollection<ColumnFilter> ColumnFilterOptions { get; set; }
    public ObservableCollection<string> ColumnFilters { get; set; }
    public bool IsFilterApplied { get; private set; }
    public ICommand LoadCommand { get; }
    public ICommand ShowDialogCommand { get; }
    public ICommand CloseCommand { get; }
    public ICommand ApplyFilterCommand { get; }
    public ICommand ResetFilterCommand { get; }
    public ICommand ImportFilterCommand { get; }
    public ICommand ExportFilterCommand { get; }

    private void LoadData()
    {
        if (!string.IsNullOrEmpty(FilePath))
        {
            var data = _repository.ReadExcelFile(FilePath);
            Data = new ObservableCollection<ExcelData>(data);
            FilteredData = new ObservableCollection<ExcelData>(data);
            PopulateColumnFilters();
        }
    }

    private void PopulateColumnFilters()
    {
        ColumnFilterOptions.Clear();
        foreach (var columnName in ColumnFilters)
        {
            var filterValues = GetUniqueValuesForColumn(columnName)
                .Select(value => new FilterValue { Value = value, IsSelected = false })
                .ToList();

            ColumnFilterOptions.Add(new ColumnFilter
            {
                ColumnName = columnName,
                FilterValues = new ObservableCollection<FilterValue>(filterValues)
            });
        }
    }

    private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
    {
        return Data?
            .Select(item =>
            {
                var property = item.GetType().GetProperty(columnName);
                return property?.GetValue(item)?.ToString();
            })
            .Where(value => !string.IsNullOrEmpty(value))
            .Distinct()
            .OrderBy(value => value)
            .ToList();
    }

    private void ApplyFilter()
    {
        FilteredData = new ObservableCollection<ExcelData>(
            Data.Where(item =>
            {
                foreach (var filter in ColumnFilterOptions)
                {
                    var property = item.GetType().GetProperty(filter.ColumnName);
                    var value = property?.GetValue(item)?.ToString();
                    if (filter.FilterValues.Any(f => f.IsSelected && f.Value == value) == false)
                        return false;
                }
                return true;
            }));
    }

    private void ResetFilter()
    {
        foreach (var filter in ColumnFilterOptions)
        {
            foreach (var value in filter.FilterValues)
            {
                value.IsSelected = false;
            }
        }
        FilteredData = new ObservableCollection<ExcelData>(Data);
    }

    private void ImportFilter()
    {
        // Logic for importing filters
    }

    private void ExportFilter()
    {
        // Logic for exporting filters
    }

    public void ShowDialog()
    {
        var dialog = new OpenFileDialog
        {
            Filter = "Excel Files (*.xlsx)|*.xlsx"
        };

        if (dialog.ShowDialog() == true)
        {
            FilePath = dialog.FileName;
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class FilterValue
    {
        public string Value { get; set; }
        public bool IsSelected { get; set; }
    }

    public class ColumnFilter
    {
        public string ColumnName { get; set; }
        public ObservableCollection<FilterValue> FilterValues { get; set; }
    }
}
