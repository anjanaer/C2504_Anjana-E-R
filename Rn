<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />


                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230"  SelectedItem="{Binding SelectedColumnFilter}" Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical" >
                    <!-- Select All Checkbox -->
                    <CheckBox Content="Select All" 
          IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
          Command="{Binding SelectAllCommand}" Margin="0,0,0,10"  />
                    <!-- Filter Values ListBox -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">
                        <ListBox.ItemTemplate>
                            <DataTemplate>


                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                          IsChecked="{Binding IsSelected, Mode=TwoWay}" />

                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10" >
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal"  Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExcelProject.Model;
using ExcelProject.Repo;
using ClosedXML.Excel;
using OfficeOpenXml;


namespace ExcelProject.ExcelRepo
{
    /// <summary>
    /// Repository for handling Excel file operations.
    /// </summary>
    public class ExcelRepository : IRepo
    {
        public List<ExcelData> GetData(string filePath)
        {
            var result = new List<ExcelData>();

            // Open the Excel file using EPPlus
            using (var package = new ExcelPackage(new FileInfo(filePath)))
            {
                var worksheet = package.Workbook.Worksheets[0];  // Get the first worksheet

                // Read the header row (column names)
                var headerRow = worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column]
                    .Select(cell => cell.Text).ToList();

                // Read each row of data
                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                {
                    var rowData = new ExcelData();

                    // Map columns from Excel to the ExcelData object
                    for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                    {
                        var columnName = headerRow[col - 1];

                        // Use reflection to set the property corresponding to the column name
                        var property = rowData.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(rowData, worksheet.Cells[row, col].Text);
                        }
                    }

                    result.Add(rowData);
                }
            }

            return result;
        }

        public List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues)
        {
            if (selectedValues == null || !selectedValues.Any())
                return data;

            return data.Where(row =>
            {
                var property = row.GetType().GetProperty(column);
                if (property != null)
                {
                    var value = property.GetValue(row)?.ToString();
                    return selectedValues.Contains(value);
                }
                return false;
            }).ToList();
        }
    }



mmmmmmm

}
using System;

namespace ExcelProject.Model
{
    /// <summary>
    /// Custom attribute to map Excel column names to C# properties.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class ExcelColumnAttribute : Attribute
    {
        /// <summary>
        /// Gets the name of the Excel column that this property corresponds to.
        /// </summary>
        public string ColumnName { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExcelColumnAttribute"/> class with the specified Excel column name.
        /// </summary>
        /// <param name="columnName">The name of the Excel column to map to the property.</param>
        public ExcelColumnAttribute(string columnName)
        {
            ColumnName = columnName;
        }
    }
}



public class ExcelData
{
    [ExcelColumn("Assigned To")]
    public string AssignedTo { get; set; }

    [ExcelColumn("Iiternation (DataManager)")]
    public string IterationDataManager { get; set; }

    [ExcelColumn("Project")]
    public string Project { get; set; }
}




