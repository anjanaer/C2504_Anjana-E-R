using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        public ObservableCollection<ColumnFilter> ColumnFilters { get; set; }
        public ObservableCollection<string> ColumnNames { get; set; } // List of 44 column names
        public ObservableCollection<ExcelData> OriginalData { get; set; }
        private string _filterCategory;
        private string _filePath;

        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ColumnFilters = new ObservableCollection<ColumnFilter>();
            ColumnNames = new ObservableCollection<string>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                TempData = new ObservableCollection<ExcelData>(data);
                OriginalData = new ObservableCollection<ExcelData>(data);

                // Initialize column filters after loading data
                InitializeFilters();
            }
        }

        private void ApplyFilter()
        {
            if (ColumnFilters == null || !ColumnFilters.Any())
            {
                FilteredData = new ObservableCollection<ExcelData>(OriginalData);
                return;
            }

            var filtered = OriginalData.AsEnumerable();

            foreach (var filter in ColumnFilters)
            {
                if (filter.FilterValues != null && filter.FilterValues.Any(f => f.IsSelected))
                {
                    var selectedValues = filter.FilterValues
                                                .Where(f => f.IsSelected)
                                                .Select(f => f.Value)
                                                .ToList();

                    filtered = filtered.Where(item =>
                    {
                        var property = item.GetType().GetProperty(filter.SelectedColumn);
                        var value = property?.GetValue(item)?.ToString();
                        return selectedValues.Contains(value);
                    });
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(filtered);
        }

        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        public class ColumnFilter
        {
            public string SelectedColumn { get; set; } // Selected column name
            public ObservableCollection<FilterItem> FilterValues { get; set; } // Unique values for the selected column
        }

        public class FilterItem
        {
            public string Value { get; set; } // Display value
            public bool IsSelected { get; set; } // Whether the item is checked
        }

        public void InitializeFilters()
        {
            ColumnFilters = new ObservableCollection<ColumnFilter>();
            foreach (var columnName in ColumnNames)
            {
                var filter = new ColumnFilter
                {
                    SelectedColumn = columnName,
                    FilterValues = new ObservableCollection<FilterItem>()
                };

                UpdateFilterValues(filter);
                ColumnFilters.Add(filter);
            }
        }

        private void UpdateFilterValues(ColumnFilter filter)
        {
            if (filter.SelectedColumn != null)
            {
                // Fetch unique values for the selected column
                var uniqueValues = GetUniqueValuesForColumn(filter.SelectedColumn);
                filter.FilterValues.Clear();
                foreach (var value in uniqueValues)
                {
                    filter.FilterValues.Add(new FilterItem { Value = value, IsSelected = false });
                }
            }
        }

        private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
        {
            // Use reflection to get values for the specified column
            return OriginalData
                .Select(item =>
                {
                    var property = item.GetType().GetProperty(columnName);
                    return property?.GetValue(item)?.ToString();
                })
                .Where(value => !string.IsNullOrEmpty(value)) // Exclude null or empty values
                .Distinct() // Get unique values
                .OrderBy(value => value) // Optional: sort the values
                .ToList();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


gggggggggggggggggggghhhhhbbbbbhhhkkkllllll
<Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="10">
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- Label -->
            <TextBlock Text="Filter Conditions" FontWeight="Bold" Margin="0,0,0,10" />

            <!-- Dynamic Filter Rows -->
            <ItemsControl ItemsSource="{Binding Filters}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,5">
                            <!-- ComboBox for Column Selection -->
                            <ComboBox Width="200" Height="30" 
                                      ItemsSource="{Binding DataContext.ColumnNames, RelativeSource={RelativeSource AncestorType=Window}}" 
                                      SelectedItem="{Binding SelectedColumn}" 
                                      VerticalAlignment="Center" 
                                      Margin="0,0,10,0" />

                            <!-- ListBox for Unique Values -->
                            <ListBox Width="300" Height="150" 
                                     ItemsSource="{Binding UniqueValues}" 
                                     SelectionMode="Multiple" 
                                     Margin="0,0,10,0">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding}" />
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- Buttons -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Command="{Binding ApplyFilterCommand}" />
                <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Command="{Binding ResetFilterCommand}" />
                <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Command="{Binding ImportFilterCommand}" />
                <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Command="{Binding ExportFilterCommand}" />
            </StackPanel>
        </StackPanel>
    </ScrollViewer>
</Border>



<Window x:Class="BugTrackerSurvey.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BugTrackerSurvey"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!-- Title Bar -->
            <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
                <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
            </Border>

            <!-- Upload Section -->
            <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
                <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
                <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
                <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
                <Button Content="Show Details" Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
            </StackPanel>


            <!-- Filter Conditions Section -->

            <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
                <StackPanel Orientation="Horizontal" Margin="10" >
                    <!-- Dynamic Filter Rows -->
                    <ListBox ItemsSource="{Binding ColumnFilters}" Height="100" SelectedItem="{Binding SelectedFilter}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}"/>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <StackPanel Orientation="Vertical" Margin="10">

                        <!-- Select All Checkbox -->
                        <CheckBox Content="Select All" 
        IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
              />
                        <!-- Dynamic Checkbox Filters -->
                        <ListBox ItemsSource="{Binding FilterValues}" Height="100">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />

                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </StackPanel>
                    <!-- Buttons -->
                    <StackPanel Orientation="Vertical" HorizontalAlignment="Right" Margin="0,10,0,0">
                        <Button Content="Apply Filter" Width="100" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                        <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                        <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                        <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                    </StackPanel>
                </StackPanel>

            </GroupBox>

            <!-- DataGrid Section -->

            <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="True" RowHeight="30" IsReadOnly="True">
                <!-- Define Column Header Style -->
                <DataGrid.ColumnHeaderStyle>
                    <Style TargetType="DataGridColumnHeader">
                        <!-- Set Background and Foreground Colors -->
                        <Setter Property="Background" Value="Teal" />
                        <Setter Property="Foreground" Value="White" />
                        <Setter Property="FontWeight" Value="Bold" />
                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                    </Style>
                </DataGrid.ColumnHeaderStyle>
                
            </DataGrid>
            <!-- Close Button -->
            <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


        </Grid>
    </Grid>
</Window>

<GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" /> <!-- For the column filters -->
            <ColumnDefinition Width="3*" /> <!-- For the filter values -->
            <ColumnDefinition Width="2*" /> <!-- For the buttons -->
        </Grid.ColumnDefinitions>

        <!-- Column Filters -->
        <ListBox Grid.Column="0" ItemsSource="{Binding ColumnFilters}" Height="150" SelectedItem="{Binding SelectedFilter}" Margin="5">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Filter Values with Checkboxes -->
        <StackPanel Grid.Column="1" Orientation="Vertical" Margin="5">
            <!-- Select All Checkbox -->
            <CheckBox Content="Select All" IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" Margin="0,0,0,5" />
            
            <!-- Dynamic Filter Values -->
            <ListBox ItemsSource="{Binding FilterValues}" Height="120">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </StackPanel>

        <!-- Action Buttons -->
        <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Center" Margin="5">
            <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
            <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
            <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
            <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
        </StackPanel>
    </Grid>
</GroupBox>



<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" />
            <Button Content="Show Details" Width="95" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>


        <!-- Filter Conditions Section -->

        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*" />
                    <!-- For the column filters -->
                    <ColumnDefinition Width="3*" />
                    <!-- For the filter values -->
                    <ColumnDefinition Width="2*" />
                    <!-- For the buttons -->
                </Grid.ColumnDefinitions>
                
                    <!-- Column Filters -->
                    <ListBox Grid.Column="0" ItemsSource="{Binding ColumnFilters}" Height="200" SelectedItem="{Binding SelectedFilter}" Margin="5">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <!-- Filter Values with Checkboxes -->
                    <StackPanel Grid.Column="1" Orientation="Vertical" Margin="5">
                        <!-- Select All Checkbox -->
                        <CheckBox Content="Select All" IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" Margin="0,0,0,5" />

                        <!-- Dynamic Filter Values -->
                        <ListBox ItemsSource="{Binding FilterValues}" Height="200">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </StackPanel>
                
                <!-- Action Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Center" Margin="5">
                    <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->

        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="False" RowHeight="30">
            <!-- Define Column Header Style -->
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <!-- Set Background and Foreground Colors -->
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="100" />
                <DataGridTextColumn Header="Project" Binding="{Binding Project}" Width="150" />
                <DataGridTextColumn Header="Reporter" Binding="{Binding Reporter}" Width="150" />
                <DataGridTextColumn Header="Assigned To" Binding="{Binding AssignedTo}" Width="150" />
                <DataGridTextColumn Header="Priority" Binding="{Binding Priority}" Width="150" />
                <DataGridTextColumn Header="Severity" Binding="{Binding Severity}" Width="150" />
                <DataGridTextColumn Header="Reproducibility" Binding="{Binding Reproducibility}" Width="150" />
                <DataGridTextColumn Header="Product Version" Binding="{Binding ProductVersion}" Width="100" />
                <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="100" />
                <DataGridTextColumn Header="Date Submitted" Binding="{Binding DateSubmitted}" Width="150" />
                <DataGridTextColumn Header="OS" Binding="{Binding OS}" Width="150" />
                <DataGridTextColumn Header="OS Version" Binding="{Binding OSVersion}" Width="150" />
                <DataGridTextColumn Header="Platform" Binding="{Binding Platform}" Width="150" />
                <DataGridTextColumn Header="View Status" Binding="{Binding ViewStatus}" Width="150" />
                <DataGridTextColumn Header="Updated" Binding="{Binding Updated}" Width="150" />
                <DataGridTextColumn Header="Summary" Binding="{Binding Summary}" Width="150" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" />
                <DataGridTextColumn Header="Resolution" Binding="{Binding Resolution}" Width="150" />
                <DataGridTextColumn Header="Fixed in Version" Binding="{Binding FixedInVersion}" Width="150" />
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="150" />
                <DataGridTextColumn Header="Steps To Reproduce" Binding="{Binding StepsToReproduce}" Width="150" />
                <DataGridTextColumn Header="Code Owner" Binding="{Binding CodeOwner}" Width="150" />
                <DataGridTextColumn Header="Date Resolved" Binding="{Binding DateResolved}" Width="150" />
                <DataGridTextColumn Header="Defect Impact to User" Binding="{Binding DefectImpactToUser}" Width="150" />
                <DataGridTextColumn Header="Defect Type" Binding="{Binding DefectType}" Width="100" />
                <DataGridTextColumn Header="Iteration" Binding="{Binding Iteration}" Width="150" />
                <DataGridTextColumn Header="Iteration (Data Manager)" Binding="{Binding IterationDataManager}" Width="200" />
                <DataGridTextColumn Header="Iteration (XRD Measurement)" Binding="{Binding IterationXRDMeasurement}" Width="200" />
                <DataGridTextColumn Header="Module" Binding="{Binding Module}" Width="150" />
                <DataGridTextColumn Header="Module(Common Plugins)" Binding="{Binding ModuleCommonPlugins}" Width="150" />
                <DataGridTextColumn Header="ODC Period" Binding="{Binding ODCPeriod}" Width="150" />
                <DataGridTextColumn Header="Phase of Origin" Binding="{Binding PhaseOfOrigin}" Width="100" />
                <DataGridTextColumn Header="Responsibility" Binding="{Binding Responsibility}" Width="150" />
                <DataGridTextColumn Header="Test Case Id" Binding="{Binding TestCaseId}" Width="150" />
                <DataGridTextColumn Header="Tested By" Binding="{Binding TestedBy}" Width="150" />
                <DataGridTextColumn Header="Testing Level" Binding="{Binding TestingLevel}" Width="150" />
                <DataGridTextColumn Header="Version" Binding="{Binding Version}" Width="150" />
                <DataGridTextColumn Header="Iteration (Powder XRD)" Binding="{Binding IterationPowderXRD}" Width="230" />
                <DataGridTextColumn Header=" Iteration (SmartFlex)" Binding="{Binding IterationSmartFlex}" Width="230" />
                <DataGridTextColumn Header=" Iteration(DB Browser)" Binding="{Binding IterationDBBrowser}" Width="230" />
                <DataGridTextColumn Header="Iteration(MDA)" Binding="{Binding IterationMDA}" Width="150" />
                <DataGridTextColumn Header="Iteration(XRD DSC Analysis)" Binding="{Binding IterationXRDDSCAnalysis}" Width="200" />
                <DataGridTextColumn Header="Scope" Binding="{Binding Scope}" Width="150" />
                <DataGridTextColumn Header="Bug Analysis Status" Binding="{Binding BugAnalysisStatus}" Width="150" />


            </DataGrid.Columns>
        </DataGrid>
        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />


    </Grid>
</Window>    

<GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" /> <!-- Column for Column Filters -->
            <ColumnDefinition Width="3*" /> <!-- Column for Filter Values -->
            <ColumnDefinition Width="2*" /> <!-- Column for Buttons -->
        </Grid.ColumnDefinitions>
        
        <!-- Column Filters ListBox -->
        <ListBox Grid.Column="0" ItemsSource="{Binding ColumnFilters}" Height="200" SelectedItem="{Binding SelectedFilter}" Margin="5">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Filter Values ListBox -->
        <ListBox Grid.Column="1" ItemsSource="{Binding FilterValues}" Height="200" Margin="5">
            <ListBox.Header>
                <CheckBox Content="Select All" IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" Margin="5" />
            </ListBox.Header>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <CheckBox Content="{Binding Value}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Action Buttons -->
        <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Center" Margin="5">
            <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
            <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
            <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
            <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
        </StackPanel>
    </Grid>
</GroupBox>








