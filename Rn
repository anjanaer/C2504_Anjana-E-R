using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;

namespace ExcelProject.ViewModel
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private IRepo _repository;
        private ObservableCollection<ExcelData> _data;
        private ObservableCollection<ExcelData> _filteredData;
        public ObservableCollection<ColumnFilter> ColumnFilters { get; set; }
        public ObservableCollection<string> ColumnNames { get; set; } // List of 44 column names
        public ObservableCollection<ExcelData> OriginalData { get; set; }
        private string _filterCategory;
        private string _filePath;

        public MainViewModel()
        {
            _repository = new ExcelRepository();
            ShowDialogCommand = new RelayCommand(ShowDialog);
            LoadCommand = new RelayCommand(LoadData);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ColumnFilters = new ObservableCollection<ColumnFilter>();
            ColumnNames = new ObservableCollection<string>();
        }

        public ObservableCollection<ExcelData> Data
        {
            get => _data;
            set { _data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => _filteredData;
            set { _filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilterCategory
        {
            get => _filterCategory;
            set { _filterCategory = value; OnPropertyChanged(nameof(FilterCategory)); }
        }

        public string FilePath
        {
            get => _filePath;
            set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public bool IsFilterApplied { get; private set; }
        public ObservableCollection<ExcelData> TempData { get; private set; }

        public ICommand LoadCommand { get; }
        public ICommand ShowDialogCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand ApplyFilterCommand { get; }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var data = _repository.ReadExcelFile(FilePath);
                Data = new ObservableCollection<ExcelData>(data);
                FilteredData = new ObservableCollection<ExcelData>(data); // Initially, no filter is applied
                TempData = new ObservableCollection<ExcelData>(data);
                OriginalData = new ObservableCollection<ExcelData>(data);

                // Initialize column filters after loading data
                InitializeFilters();
            }
        }

        private void ApplyFilter()
        {
            if (ColumnFilters == null || !ColumnFilters.Any())
            {
                FilteredData = new ObservableCollection<ExcelData>(OriginalData);
                return;
            }

            var filtered = OriginalData.AsEnumerable();

            foreach (var filter in ColumnFilters)
            {
                if (filter.FilterValues != null && filter.FilterValues.Any(f => f.IsSelected))
                {
                    var selectedValues = filter.FilterValues
                                                .Where(f => f.IsSelected)
                                                .Select(f => f.Value)
                                                .ToList();

                    filtered = filtered.Where(item =>
                    {
                        var property = item.GetType().GetProperty(filter.SelectedColumn);
                        var value = property?.GetValue(item)?.ToString();
                        return selectedValues.Contains(value);
                    });
                }
            }

            FilteredData = new ObservableCollection<ExcelData>(filtered);
        }

        public void ShowDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;
            }
        }

        public class ColumnFilter
        {
            public string SelectedColumn { get; set; } // Selected column name
            public ObservableCollection<FilterItem> FilterValues { get; set; } // Unique values for the selected column
        }

        public class FilterItem
        {
            public string Value { get; set; } // Display value
            public bool IsSelected { get; set; } // Whether the item is checked
        }

        public void InitializeFilters()
        {
            ColumnFilters = new ObservableCollection<ColumnFilter>();
            foreach (var columnName in ColumnNames)
            {
                var filter = new ColumnFilter
                {
                    SelectedColumn = columnName,
                    FilterValues = new ObservableCollection<FilterItem>()
                };

                UpdateFilterValues(filter);
                ColumnFilters.Add(filter);
            }
        }

        private void UpdateFilterValues(ColumnFilter filter)
        {
            if (filter.SelectedColumn != null)
            {
                // Fetch unique values for the selected column
                var uniqueValues = GetUniqueValuesForColumn(filter.SelectedColumn);
                filter.FilterValues.Clear();
                foreach (var value in uniqueValues)
                {
                    filter.FilterValues.Add(new FilterItem { Value = value, IsSelected = false });
                }
            }
        }

        private IEnumerable<string> GetUniqueValuesForColumn(string columnName)
        {
            // Use reflection to get values for the specified column
            return OriginalData
                .Select(item =>
                {
                    var property = item.GetType().GetProperty(columnName);
                    return property?.GetValue(item)?.ToString();
                })
                .Where(value => !string.IsNullOrEmpty(value)) // Exclude null or empty values
                .Distinct() // Get unique values
                .OrderBy(value => value) // Optional: sort the values
                .ToList();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


gggggggggggggggggggghhhhhbbbbbhhhkkkllllll
<Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="10">
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="10">
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- Label -->
            <TextBlock Text="Filter Conditions" FontWeight="Bold" Margin="0,0,0,10" />

            <!-- Dynamic Filter Rows -->
            <ItemsControl ItemsSource="{Binding Filters}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,5">
                            <!-- ComboBox for Column Selection -->
                            <ComboBox Width="200" Height="30" 
                                      ItemsSource="{Binding DataContext.ColumnNames, RelativeSource={RelativeSource AncestorType=Window}}" 
                                      SelectedItem="{Binding SelectedColumn}" 
                                      VerticalAlignment="Center" 
                                      Margin="0,0,10,0" />

                            <!-- ListBox for Unique Values -->
                            <ListBox Width="300" Height="150" 
                                     ItemsSource="{Binding UniqueValues}" 
                                     SelectionMode="Multiple" 
                                     Margin="0,0,10,0">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding}" />
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- Buttons -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                <Button Content="Apply Filter" Width="100" Height="30" Margin="5" Command="{Binding ApplyFilterCommand}" />
                <Button Content="Reset Filter" Width="100" Height="30" Margin="5" Command="{Binding ResetFilterCommand}" />
                <Button Content="Import Filter..." Width="100" Height="30" Margin="5" Command="{Binding ImportFilterCommand}" />
                <Button Content="Export Filter..." Width="100" Height="30" Margin="5" Command="{Binding ExportFilterCommand}" />
            </StackPanel>
        </StackPanel>
    </ScrollViewer>
</Border>
