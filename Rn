using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;
using System.Windows.Controls;
using System.Windows.Data;


namespace ExcelProject.ViewModel
{
    /// <summary>
    /// Main ViewModel class that implements the MVVM pattern.
    /// </summary>
    public class MainViewModel : INotifyPropertyChanged
    {

        private string filePath;
        private string selectedColumnFilter;
        private bool isSelectAllChecked;
        private bool isFilterApplied;
        private bool isFileValid;
        private string fileNameErrorMessage;

        private ObservableCollection<ExcelData> data;
        private ObservableCollection<ExcelData> filteredData;
        private ObservableCollection<string> columnFilters;
        private ObservableCollection<FilterItem> filterValues;
        private ObservableCollection<DataGridColumn> dataGridColumns;
       

        private  IRepo repo;

       

        public MainViewModel(IRepo excelrepo)
        {
            repo = excelrepo;

            // Initialize commands
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties
            ColumnFilters = new ObservableCollection<string>();
            FilterValues = new ObservableCollection<FilterItem>();
            FilteredData = new ObservableCollection<ExcelData>();
            data = new ObservableCollection<ExcelData>();
            isFileValid = true;
        }

        public ObservableCollection<ExcelData> Data
        {
            get => data;
            set { data = value; OnPropertyChanged(nameof(Data)); }
        }

        public ObservableCollection<ExcelData> FilteredData
        {
            get => filteredData;
            set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
        }

        public string FilePath
        {
            get => filePath;
            set { filePath = value; OnPropertyChanged(nameof(FilePath)); }
        }

        public bool IsFileValid
        {
            get => isFileValid;
            set { isFileValid = value; OnPropertyChanged(nameof(IsFileValid)); }
        }

        public string FileNameErrorMessage
        {
            get => fileNameErrorMessage;
            set { fileNameErrorMessage = value; OnPropertyChanged(nameof(FileNameErrorMessage)); }
        }

        public string SelectedColumnFilter
        {
            get => selectedColumnFilter;
            set { selectedColumnFilter = value; OnPropertyChanged(nameof(SelectedColumnFilter)); LoadFilterValues(); }
        }

        public ObservableCollection<string> ColumnFilters
        {
            get => columnFilters;
            set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
        }
        public bool IsFilterApplied
        {
            get => isFilterApplied;
            set { isFilterApplied = value; OnPropertyChanged(nameof(IsFilterApplied)); }
        }

        public ObservableCollection<FilterItem> FilterValues
        {
            get => filterValues;
            set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
        }

        public bool IsSelectAllChecked
        {
            get => isSelectAllChecked;
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }
        public ObservableCollection<DataGridColumn> DataGridColumns // Property to bind columns dynamically
        {
            get => dataGridColumns;
            set { dataGridColumns = value; OnPropertyChanged(nameof(DataGridColumns)); }
        }


        public event PropertyChangedEventHandler PropertyChanged;
        // Command to load data from the selected Excel file.
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }
        public ICommand ImportFilterCommand { get; }
        public ICommand ExportFilterCommand { get; }

        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                var excelData = repo.GetData(FilePath);
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate columns for the DataGrid based on the first row of data
                DataGridColumns.Clear(); // Clear any existing columns
                var firstRow = excelData.FirstOrDefault();

                if (firstRow != null)
                {
                    foreach (var property in firstRow.GetType().GetProperties())
                    {
                        var column = new DataGridTextColumn
                        {
                            Header = property.Name,
                            Binding = new Binding(property.Name)
                        };
                        DataGridColumns.Add(column);
                    }
                }

                // Dynamically set the ColumnFilters (for filter dropdowns)
                ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.GetType().GetProperties().Select(p => p.Name));
            }
        }

        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            );

            IsSelectAllChecked = true;
        }

        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        // New method to display data in Bug Details table
        private void ShowDetails()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                LoadData();
            }
        }

        // CanExecute logic for ShowDetailsCommand
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }

        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

      
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
                    FilterValues = new ObservableCollection<FilterItem>(importedFilters);
                }

                // Update the "Select All" checkbox based on imported data
                IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
            }
        }

        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, FilterValues.ToList());
                }
            }
        }

        protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}



<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Command="{Binding SelectAllCommand}" Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" AutoGenerateColumns="False" RowHeight="30"  >
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    




private void LoadFilterValues()
{
    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

    // Ensure that the column exists and has valid data
    var distinctValues = Data
        .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
        .Where(value => value != null)  // Ensure no null values are included
        .Distinct()
        .OrderBy(value => value)
        .ToList();

    // Check if distinct values are found for the selected column
    if (distinctValues.Any())
    {
        // Populate FilterValues
        FilterValues = new ObservableCollection<FilterItem>(distinctValues.Select(value => new FilterItem { Value = value, IsSelected = true }));
        IsSelectAllChecked = true; // Set "Select All" to checked if filter items are found
    }
    else
    {
        // If no values are found, reset the FilterValues
        FilterValues.Clear();
        IsSelectAllChecked = false;
    }
}
-------------------------------
public interface IRepo
{
    IEnumerable<ExcelData> GetData(string filePath);
    void SaveFilters(List<FilterItem> filters, string filePath);
    List<FilterItem> ImportFilters(string filePath);
}
using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class ExcelRepo : IRepo
{
    public IEnumerable<ExcelData> GetData(string filePath)
    {
        var excelData = new List<ExcelData>();

        using (var workbook = new XLWorkbook(filePath))
        {
            var worksheet = workbook.Worksheet(1);
            var rows = worksheet.RowsUsed().Skip(1);  // Skipping the header row

            foreach (var row in rows)
            {
                var data = new ExcelData
                {
                    ColumnData = new Dictionary<string, object>()
                };

                foreach (var cell in row.Cells())
                {
                    data.ColumnData[cell.Address.ColumnLetter] = cell.Value;
                }

                excelData.Add(data);
            }
        }

        return excelData;
    }

    public void SaveFilters(List<FilterItem> filters, string filePath)
    {
        var serializer = new System.Xml.Serialization.XmlSerializer(typeof(List<FilterItem>));
        using (var writer = new StreamWriter(filePath))
        {
            serializer.Serialize(writer, filters);
        }
    }

    public List<FilterItem> ImportFilters(string filePath)
    {
        var serializer = new System.Xml.Serialization.XmlSerializer(typeof(List<FilterItem>));
        using (var reader = new StreamReader(filePath))
        {
            return (List<FilterItem>)serializer.Deserialize(reader);
        }
    }
}



using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;
using System.Xml.Serialization;
using System.IO;
using System.Collections.Generic;

public class MainViewModel : INotifyPropertyChanged
{
    private ObservableCollection<ExcelData> data;
    private ObservableCollection<ExcelData> filteredData;
    private string filePath;
    private ObservableCollection<string> columnFilters;
    private ObservableCollection<FilterItem> filterValues;
    private IRepo repo;

    public event PropertyChangedEventHandler PropertyChanged;

    public MainViewModel(IRepo excelRepo)
    {
        repo = excelRepo;
        LoadCommand = new RelayCommand(LoadData);
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
        ResetFilterCommand = new RelayCommand(ResetFilter);
        ExportFilterCommand = new RelayCommand(ExportFilter);
        ImportFilterCommand = new RelayCommand(ImportFilter);
        CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

        // Initialize collections
        ColumnFilters = new ObservableCollection<string>();
        FilterValues = new ObservableCollection<FilterItem>();
        FilteredData = new ObservableCollection<ExcelData>();
        data = new ObservableCollection<ExcelData>();
    }

    public ObservableCollection<ExcelData> Data
    {
        get => data;
        set { data = value; OnPropertyChanged(nameof(Data)); }
    }

    public ObservableCollection<ExcelData> FilteredData
    {
        get => filteredData;
        set { filteredData = value; OnPropertyChanged(nameof(FilteredData)); }
    }

    public ObservableCollection<string> ColumnFilters
    {
        get => columnFilters;
        set { columnFilters = value; OnPropertyChanged(nameof(ColumnFilters)); }
    }

    public ObservableCollection<FilterItem> FilterValues
    {
        get => filterValues;
        set { filterValues = value; OnPropertyChanged(nameof(FilterValues)); }
    }

    public string FilePath
    {
        get => filePath;
        set { filePath = value; OnPropertyChanged(nameof(FilePath)); }
    }

    public ICommand LoadCommand { get; }
    public ICommand ApplyFilterCommand { get; }
    public ICommand ResetFilterCommand { get; }
    public ICommand ExportFilterCommand { get; }
    public ICommand ImportFilterCommand { get; }
    public ICommand CloseCommand { get; }

    private void LoadData()
    {
        if (string.IsNullOrEmpty(FilePath)) return;

        var excelData = repo.GetData(FilePath);
        Data = new ObservableCollection<ExcelData>(excelData);
        FilteredData = new ObservableCollection<ExcelData>(excelData);

        ColumnFilters = new ObservableCollection<string>(excelData.FirstOrDefault()?.ColumnData.Keys);
    }

    private void ApplyFilter()
    {
        var selectedFilters = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
        if (!selectedFilters.Any()) return;

        var filteredData = Data.Where(d =>
            selectedFilters.All(s => d.ColumnData.Values.Contains(s)))
            .ToList();

        FilteredData = new ObservableCollection<ExcelData>(filteredData);
    }

    private void ResetFilter()
    {
        foreach (var filter in FilterValues)
            filter.IsSelected = false;

        FilteredData = new ObservableCollection<ExcelData>(Data);
    }

    private void ExportFilter()
    {
        var dialog = new SaveFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (dialog.ShowDialog() == true)
        {
            repo.SaveFilters(FilterValues.ToList(), dialog.FileName);
        }
    }

    private void ImportFilter()
    {
        var dialog = new OpenFileDialog
        {
            Filter = "XML Files (*.xml)|*.xml"
        };

        if (dialog.ShowDialog() == true)
        {
            var importedFilters = repo.ImportFilters(dialog.FileName);
            FilterValues = new ObservableCollection<FilterItem>(importedFilters);
        }
    }

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

using System.Windows;

namespace ExcelProject
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(new ExcelRepo()); // Initialize with the ExcelRepo
        }
    }
}










