using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using ExcelProject.Model;
using OfficeOpenXml;

namespace ExcelProject.ExcelRepo
{
    public class ExcelRepository : IRepo
    {
        public List<ExcelData> GetData(string filePath)
        {
            var result = new List<ExcelData>();

            // Open the Excel file using EPPlus
            using (var package = new ExcelPackage(new FileInfo(filePath)))
            {
                var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet
                if (worksheet == null)
                    throw new Exception("Worksheet is empty or not found.");

                // Read the header row (column names) once
                var headerRow = worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column]
                    .Select(cell => cell.Text.Trim()) // Trim spaces to avoid mismatches
                    .ToList();

                // Get properties with ExcelColumnAttribute once to improve performance
                var propertyMappings = typeof(ExcelData).GetProperties()
                    .Select(prop => new
                    {
                        Property = prop,
                        Attribute = prop.GetCustomAttribute<ExcelColumnAttribute>()
                    })
                    .Where(mapping => mapping.Attribute != null)
                    .ToDictionary(mapping => mapping.Attribute.ColumnName, mapping => mapping.Property);

                // Read data rows
                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                {
                    var rowData = new ExcelData();

                    // Map each cell to the corresponding property
                    for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                    {
                        var columnName = headerRow[col - 1]; // Get column name
                        if (propertyMappings.TryGetValue(columnName, out var property))
                        {
                            var cellValue = worksheet.Cells[row, col].Text?.Trim(); // Trim to avoid extra spaces
                            property.SetValue(rowData, cellValue);
                        }
                    }

                    result.Add(rowData);
                }
            }

            return result;
        }

        public List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues)
        {
            if (string.IsNullOrWhiteSpace(column) || selectedValues == null || !selectedValues.Any())
                return data;

            return data.Where(row =>
            {
                var property = row.GetType().GetProperty(column);
                if (property != null)
                {
                    var value = property.GetValue(row)?.ToString();
                    return selectedValues.Contains(value);
                }
                return false;
            }).ToList();
        }

        public List<string> GetFilterValues(List<ExcelData> data, string columnName)
        {
            if (string.IsNullOrWhiteSpace(columnName))
                return new List<string>();

            return data
                .Select(row =>
                {
                    var property = row.GetType().GetProperty(columnName);
                    return property?.GetValue(row)?.ToString();
                })
                .Where(value => !string.IsNullOrWhiteSpace(value)) // Exclude null or empty values
                .Distinct()
                .ToList();
        }
    }
}


using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.ExcelRepo;

public class MainViewModel : BaseViewModel
{
    private readonly ExcelRepository _repository = new ExcelRepository();

    public ObservableCollection<ExcelData> FilteredData { get; set; } = new ObservableCollection<ExcelData>();
    public ObservableCollection<string> ColumnFilters { get; set; } = new ObservableCollection<string>();
    public ObservableCollection<FilterValue> FilterValues { get; set; } = new ObservableCollection<FilterValue>();

    public ICommand LoadCommand { get; }
    public ICommand ApplyFilterCommand { get; }

    private string _filePath;
    public string FilePath
    {
        get => _filePath;
        set => SetProperty(ref _filePath, value);
    }

    private string _selectedColumnFilter;
    public string SelectedColumnFilter
    {
        get => _selectedColumnFilter;
        set
        {
            if (SetProperty(ref _selectedColumnFilter, value))
            {
                UpdateFilterValues();
            }
        }
    }

    public MainViewModel()
    {
        LoadCommand = new RelayCommand(LoadData);
        ApplyFilterCommand = new RelayCommand(ApplyFilter);
    }

    private void LoadData()
    {
        var data = _repository.GetData(FilePath);

        // Populate column filters
        ColumnFilters.Clear();
        foreach (var property in typeof(ExcelData).GetProperties())
        {
            ColumnFilters.Add(property.Name);
        }

        // Set initial data
        FilteredData.Clear();
        foreach (var item in data)
        {
            FilteredData.Add(item);
        }
    }

    private void UpdateFilterValues()
    {
        if (string.IsNullOrWhiteSpace(SelectedColumnFilter))
            return;

        var filterValues = _repository.GetFilterValues(FilteredData.ToList(), SelectedColumnFilter);

        FilterValues.Clear();
        foreach (var value in filterValues)
        {
            FilterValues.Add(new FilterValue { Value = value, IsSelected = false });
        }
    }

    private void ApplyFilter()
    {
        var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();
        var data = _repository.ApplyFilter(FilteredData.ToList(), SelectedColumnFilter, selectedValues);

        FilteredData.Clear();
        foreach (var item in data)
        {
            FilteredData.Add(item);
        }
    }
}

public class FilterValue
{
    public string Value { get; set; }
    public bool IsSelected { get; set; }
}
