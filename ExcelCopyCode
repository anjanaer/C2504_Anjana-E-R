// ----------------------------------------------------------------------------------------
// Project Name  : ExcelProject
// File Name     : ExcelDataRepository.cs
// Description   : Represents a repository for handling Excel data operations.
// Author        : Anjana E R
// Date          : 16-12-2024
// ----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ExcelProject.Repo;
using ExcelProject.Model;
using OfficeOpenXml;
using System.IO;
using System.Reflection;

/// <summary>
/// Repository for handling Excel file operations.
/// </summary>
public class ExcelRepository : IRepo
{
    /// <summary>
    /// Reads data from an Excel file and returns a list of ExcelData objects.
    /// Maps columns from the Excel sheet to properties of ExcelData using the ExcelColumn attribute.
    /// </summary>
    /// <param name="filePath">The file path of the Excel file.</param>
    /// <returns>A list of ExcelData objects.</returns>
    public List<ExcelData> GetData(string filePath)
    {
        var result = new List<ExcelData>();

        // Open the Excel file using EPPlus
        using (var package = new ExcelPackage(new FileInfo(filePath)))
        {
            var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet
            if (worksheet == null)
                throw new Exception("Worksheet is empty or not found.");

            // Read the header row (column names) once
            var headerRow = worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column]
                .Select(cell => cell.Text.Trim()) // Trim spaces to avoid mismatches
                .ToList();

            // Get properties with ExcelColumnAttribute once to improve performance
            var propertyMappings = typeof(ExcelData).GetProperties()
                .Select(prop => new
                {
                    Property = prop,
                    Attribute = prop.GetCustomAttribute<ExcelColumnAttribute>()
                })
                .Where(mapping => mapping.Attribute != null)
                .ToDictionary(mapping => mapping.Attribute.ColumnName, mapping => mapping.Property);

            // Read data rows
            for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
            {
                var rowData = new ExcelData();

                // Map each cell to the corresponding property
                for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                {
                    var columnName = headerRow[col - 1]; // Get column name
                    if (propertyMappings.TryGetValue(columnName, out var property))
                    {
                        var cellValue = worksheet.Cells[row, col].Text?.Trim(); // Trim to avoid extra spaces
                        property.SetValue(rowData, cellValue);
                    }
                }

                result.Add(rowData);
            }
        }

        return result;
    }
    public List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues)
    {
        if (selectedValues == null || !selectedValues.Any())
            return data;

        return data.Where(row =>
        {
            var property = row.GetType().GetProperty(column);
            if (property != null)
            {
                var value = property.GetValue(row)?.ToString();
                return selectedValues.Contains(value);
            }
            return false;
        }).ToList();
    }
}



using System;

namespace ExcelProject.Model
{
    /// <summary>
    /// Custom attribute to map Excel column names to C# properties.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class ExcelColumnAttribute : Attribute
    {
        /// <summary>
        /// Gets the name of the Excel column that this property corresponds to.
        /// </summary>
        public string ColumnName { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExcelColumnAttribute"/> class with the specified Excel column name.
        /// </summary>
        /// <param name="columnName">The name of the Excel column to map to the property.</param>
        public ExcelColumnAttribute(string columnName)
        {
            ColumnName = columnName;
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DocumentFormat.OpenXml.Math;
using System.IO;

namespace ExcelProject.Model
{
    /// <summary>
    /// Represents a row of data from an Excel sheet that is mapped to various properties using the ExcelColumn attribute.
    /// Each property corresponds to a column in the Excel sheet and contains the necessary data to represent a bug report or project issue.
    /// </summary>
    public class ExcelData
    {
        /// <summary>
        /// Gets or sets the unique identifier for the bug or project issue.
        /// </summary>
        [ExcelColumn("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the project associated with the issue or bug.
        /// </summary>
        [ExcelColumn("Project")]
        public string Project { get; set; }

        /// <summary>
        /// Gets or sets the reporter of the bug or issue.
        /// </summary>
        [ExcelColumn("Reporter")]
        public string Reporter { get; set; }

        /// <summary>
        /// Gets or sets the name of the person to whom the bug or issue is assigned.
        /// </summary>
        [ExcelColumn("Assigned To")]
        public string AssignedTo { get; set; }

        /// <summary>
        /// Gets or sets the priority of the bug or issue (e.g., High, Medium, Low).
        /// </summary>
        [ExcelColumn("Priority")]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or sets the severity of the bug or issue (e.g., Critical, Minor, Major).
        /// </summary>
        [ExcelColumn("Severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the reproducibility status of the bug or issue (e.g., Always, Sometimes).
        /// </summary>
        [ExcelColumn("Reproducibility")]
        public string Reproducibility { get; set; }

        /// <summary>
        /// Gets or sets the version of the product associated with the bug or issue.
        /// </summary>
        [ExcelColumn("Product Version")]
        public string ProductVersion { get; set; }

        /// <summary>
        /// Gets or sets the category of the bug or issue (e.g., UI, Backend).
        /// </summary>
        [ExcelColumn("Category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the date when the bug or issue was submitted.
        /// </summary>
        [ExcelColumn("Date Submitted")]
        public string DateSubmitted { get; set; }

        /// <summary>
        /// Gets or sets the operating system where the bug or issue was observed.
        /// </summary>
        [ExcelColumn("OS")]
        public string OS { get; set; }

        /// <summary>
        /// Gets or sets the version of the operating system.
        /// </summary>
        [ExcelColumn("OS Version")]
        public string OSVersion { get; set; }

        /// <summary>
        /// Gets or sets the platform on which the bug or issue was observed (e.g., Web, Mobile).
        /// </summary>
        [ExcelColumn("Platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets the status of the view or visibility of the bug or issue (e.g., Open, Closed).
        /// </summary>
        [ExcelColumn("View Status")]
        public string ViewStatus { get; set; }

        /// <summary>
        /// Gets or sets the date when the bug or issue was last updated.
        /// </summary>
        [ExcelColumn("Updated")]
        public string Updated { get; set; }

        /// <summary>
        /// Gets or sets the summary or brief description of the bug or issue.
        /// </summary>
        [ExcelColumn("Summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or sets the current status of the bug or issue (e.g., New, In Progress, Resolved).
        /// </summary>
        [ExcelColumn("Status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the resolution or outcome for the bug or issue (e.g., Fixed, Won't Fix).
        /// </summary>
        [ExcelColumn("Resolution")]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or sets the version in which the bug or issue was fixed, if applicable.
        /// </summary>
        [ExcelColumn("Fixed in Version")]
        public string FixedInVersion { get; set; }

        /// <summary>
        /// Gets or sets the detailed description of the bug or issue.
        /// </summary>
        [ExcelColumn("Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the steps to reproduce the bug or issue.
        /// </summary>
        [ExcelColumn("Steps To Reproduce")]
        public string StepsToReproduce { get; set; }

        /// <summary>
        /// Gets or sets the code owner for the bug or issue.
        /// </summary>
        [ExcelColumn("Code Owner")]
        public string CodeOwner { get; set; }

        /// <summary>
        /// Gets or sets the date when the bug or issue was resolved.
        /// </summary>
        [ExcelColumn("Date Resolved")]
        public string DateResolved { get; set; }

        /// <summary>
        /// Gets or sets the impact of the defect to the user.
        /// </summary>
        [ExcelColumn("Defect Impact to User")]
        public string DefectImpactToUser { get; set; }

        /// <summary>
        /// Gets or sets the type of the defect (e.g., Functional, Performance).
        /// </summary>
        [ExcelColumn("Defect Type")]
        public string DefectType { get; set; }

        /// <summary>
        /// Gets or sets the iteration of the defect or bug, which may refer to the sprint or release cycle.
        /// </summary>
        [ExcelColumn("Iteration")]
        public string Iteration { get; set; }

        /// <summary>
        /// Gets or sets the data manager iteration for the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration (Data Manager)")]
        public string IterationDataManager { get; set; }

        /// <summary>
        /// Gets or sets the iteration for the XRD measurement related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration (XRD Measurement)")]
        public string IterationXRDMeasurement { get; set; }

        /// <summary>
        /// Gets or sets the module associated with the bug or issue.
        /// </summary>
        [ExcelColumn("Module")]
        public string Module { get; set; }

        /// <summary>
        /// Gets or sets the module for common plugins associated with the bug or issue.
        /// </summary>
        [ExcelColumn("Module(Common Plugins)")]
        public string ModuleCommonPlugins { get; set; }

        /// <summary>
        /// Gets or sets the ODC period for the bug or issue.
        /// </summary>
        [ExcelColumn("ODC Period")]
        public string ODCPeriod { get; set; }

        /// <summary>
        /// Gets or sets the phase of origin for the bug or issue.
        /// </summary>
        [ExcelColumn("Phase of Origin")]
        public string PhaseOfOrigin { get; set; }

        /// <summary>
        /// Gets or sets the responsibility for the bug or issue (e.g., Developer, QA).
        /// </summary>
        [ExcelColumn("Responsibility")]
        public string Responsibility { get; set; }

        /// <summary>
        /// Gets or sets the ID of the test case associated with the bug or issue.
        /// </summary>
        [ExcelColumn("Test Case Id")]
        public string TestCaseId { get; set; }

        /// <summary>
        /// Gets or sets the person who tested the bug or issue.
        /// </summary>
        [ExcelColumn("Tested By")]
        public string TestedBy { get; set; }

        /// <summary>
        /// Gets or sets the level of testing applied to the bug or issue (e.g., Unit Testing, Integration Testing).
        /// </summary>
        [ExcelColumn("Testing Level")]
        public string TestingLevel { get; set; }

        /// <summary>
        /// Gets or sets the version associated with the bug or issue.
        /// </summary>
        [ExcelColumn("Version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the iteration for the Powder XRD test related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration (Powder XRD)")]
        public string IterationPowderXRD { get; set; }

        /// <summary>
        /// Gets or sets the iteration for SmartFlex related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration (SmartFlex)")]
        public string IterationSmartFlex { get; set; }

        /// <summary>
        /// Gets or sets the iteration for the DB Browser related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration(DB Browser)")]
        public string IterationDBBrowser { get; set; }

        /// <summary>
        /// Gets or sets the iteration for MDA related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration(MDA)")]
        public string IterationMDA { get; set; }

        /// <summary>
        /// Gets or sets the iteration for XRD DSC Analysis related to the defect or issue.
        /// </summary>
        [ExcelColumn("Iteration(XRD DSC Analysis)")]
        public string IterationXRDDSCAnalysis { get; set; }

        /// <summary>
        /// Gets or sets the scope of the defect or issue.
        /// </summary>
        [ExcelColumn("Scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the status of the bug analysis (e.g., Pending, Completed).
        /// </summary>
        [ExcelColumn("Bug Analysis Status")]
        public string BugAnalysisStatus { get; set; }
    }
}



// ----------------------------------------------------------------------------------------
// Project Name: ExcelDataProject
// File Name: ExcelData.cs
// Description: Defines a class for Excel data that represents an item used for filtering data
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------
using System.ComponentModel;

namespace ExcelProject.Model
{
    /// <summary>
    /// Represents an item used for filtering data. It contains a value and a flag indicating whether the item is selected for filtering.
    /// Implements INotifyPropertyChanged to notify UI or other listeners when the selected state changes.
    /// </summary>
    public class FilterItem : INotifyPropertyChanged
    {
        // Private field to store the selection state
        private bool isSelected;

        /// <summary>
        /// Gets or sets the value of the filter item.
        /// This value represents the actual data that the filter item is associated with.
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets whether the filter item is selected for filtering.
        /// When set to true, this item will be included in the filtering criteria.
        /// </summary>
        public bool IsSelected
        {
            get
            {
                return isSelected;
            }
            set
            {
                // Update the selection state and notify listeners of the change
                isSelected = value;

                // Notify the UI of the change in IsSelected
                OnPropertyChanged(nameof(IsSelected));
            }
        }

        /// <summary>
        /// Event triggered when a property of this object changes, allowing data binding systems to update the UI.
        /// </summary>

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notifies listeners (e.g., UI) that a property has changed.
        /// This method is called automatically when the IsSelected property changes.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        protected virtual void OnPropertyChanged(string propertyName)
        {
            // Trigger the PropertyChanged event if there are any listeners
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}




// ----------------------------------------------------------------------------------------
// Project Name: ExcelProject
// File Name: IRepo.cs
// Description: Defines an interface for managing data operations in the ExcelProject.
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------
using System.Collections.Generic;
using ExcelProject.Model;

namespace ExcelProject.Repo
{
    /// <summary>
    /// Provides a contract for handling data operations in the ExcelProject.
    /// </summary>
    /// <remarks>
    /// The IRepo interface defines the necessary methods for get data from excel.
    /// </remarks>
    public interface IRepo
    {
        /// <summary>
        /// Retrieves data from an Excel file at the specified file path.
        /// The data is returned as a list of ExcelData objects.
        /// </summary>
        /// <param name="filePath">The file path to the Excel file to retrieve data from.</param>
        /// <returns>A list of ExcelData objects representing the rows of data in the Excel file.</returns>
        List<ExcelData> GetData(string filePath);
        List<ExcelData> ApplyFilter(List<ExcelData> data, string column, List<string> selectedValues);  // Apply a filter to the data


    }
}





// ----------------------------------------------------------------------------------------
// Project Name: Excel2
// File Name: MainViewModel.cs
// Description: The MainViewModel class handles the interaction between the View and the Model
// which serves as a ViewModel for managing Excel data
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;




namespace ExcelProject.ViewModel
{
    /// <summary>
    /// ViewModel for managing Excel data and filters
    /// Implements INotifyPropertyChanged to notify UI updates
    /// </summary>

    public class MainViewModel : INotifyPropertyChanged
    {
        // File path of the selected Excel file
        private string filePath;
            
        // The column currently selected for filtering
        private string selectedColumnFilter;

        // Indicates whether the "Select All" checkbox for filters is checked
        private bool isSelectAllChecked;

        // Indicates whether a filter has been applied to the data
        private bool isFilterApplied;

        // Indicates whether the selected file is a valid Excel file
        private bool isFileValid;

        // Error message to show if the selected file is invalid
        private string fileNameErrorMessage;

        // Holds all the Excel data loaded from the file
        private ObservableCollection<ExcelData> data;

        // Holds the filtered data after applying filters
        private ObservableCollection<ExcelData> filteredData;

        // List of available columns for filtering, based on the Excel data
        private ObservableCollection<string> columnFilters;

        // List of filter options for the selected column
        private ObservableCollection<FilterItem> filterValues;

        private Dictionary<string, ObservableCollection<FilterItem>> columnFiltersDictionary;


        // Repository interface to fetch and manage Excel data
        private IRepo repo;

        ///<summary>
        ///Constructor for initializing commands and properties
        ///</summary>

        public MainViewModel(IRepo excelrepo)
        {
            // Initialize repository interface for interacting with Excel data
            repo = excelrepo;

            // Initialize commands

            columnFiltersDictionary = new Dictionary<string, ObservableCollection<FilterItem>>();
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties

            // List of available columns for filtering
            ColumnFilters = new ObservableCollection<string>();
            // Filter options for the selected column
            FilterValues = new ObservableCollection<FilterItem>();
            // Data after filters have been applied
            FilteredData = new ObservableCollection<ExcelData>();
            // All loaded Excel data
            Data = new ObservableCollection<ExcelData>();
            // Flag indicating whether the selected file is a valid Excel file
            isFileValid = true;
        }

        
        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        public string FilePath
        {
            get 
            {
                return filePath;
            } 
            set
            {
                filePath = value; 
                OnPropertyChanged(nameof(FilePath)); 
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the selected file is valid.
        /// This property indicates whether the Excel file has a valid format.
        /// </summary>
        public bool IsFileValid
        {
            get
            {
               return isFileValid;
            }
            set 
            { 
                isFileValid = value;
                OnPropertyChanged(nameof(IsFileValid)); 
            }
        }

        /// <summary>
        /// Gets or sets the error message when the selected file is invalid.
        /// This property holds an error message if the file is not a valid Excel file.
        /// </summary>
        public string FileNameErrorMessage
        {
            get
            {
               return fileNameErrorMessage;
            
            }

            set
            { 
                fileNameErrorMessage = value;
                OnPropertyChanged(nameof(FileNameErrorMessage)); 
            }
        }


        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>  
        public ObservableCollection<ExcelData> Data
        {
            get 
            { 
                return data;
            } 
            set 
            {
                data = value; 
                OnPropertyChanged(nameof(Data));
            }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get 
            {
                return filteredData;
            } 
            set 
            { 
                filteredData = value;
                OnPropertyChanged(nameof(FilteredData));
            }
        }

       

        /// <summary>
        /// Gets or sets the collection of available column filters.
        /// This collection holds the list of column names available for filtering the data.
        /// </summary>
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;
            }
            set 
            {
                columnFilters = value;
                OnPropertyChanged(nameof(ColumnFilters)); 
            }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedColumnFilter
        {
            get
            {
                return selectedColumnFilter;

            }
            set
            {
                selectedColumnFilter = value;
                OnPropertyChanged(nameof(SelectedColumnFilter)); 
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get
            {
                return isSelectAllChecked;

            }
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }



        /// <summary>
        /// Gets or sets a value indicating whether a filter has been applied to the data.
        /// This property indicates if any filter has been applied to the data set.
        /// </summary>
        public bool IsFilterApplied
        {
            get
            {
                return isFilterApplied;
            }
            set
            {
                isFilterApplied = value;
                OnPropertyChanged(nameof(IsFilterApplied)); }
        }
     

        // Command to load data from the Excel file
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }

        // Command to import filter settings from an XML file
        public ICommand ImportFilterCommand { get; }

        // Command to export current filter settings to an XML file
        public ICommand ExportFilterCommand { get; }

        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        //// <summary>
        /// Loads data from the Excel file and populates the Data and FilteredData collections.
        /// It also dynamically generates the column filters based on the first row's property names.
        /// </summary>
        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                // Retrieve data from the repository
                var excelData = repo.GetData(FilePath);

                // Populate the Data and FilteredData collections
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row's properties
                ColumnFilters = new ObservableCollection<string>();

                // Check if excelData is not empty
                if (excelData.Any())
                {
                    // Get the first row data
                    var firstRow = excelData.FirstOrDefault();

                    // Get the properties of the first row object (ExcelData)
                    var properties = firstRow.GetType().GetProperties();

                    // Loop through each property and add the property name to the ColumnFilters
                    foreach (var property in properties)
                    {
                        ColumnFilters.Add(property.Name);
                    }
                }
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Determines if the "Show Details" command can execute. It returns true if a file is loaded, otherwise false.
        /// </summary>
        /// <returns>True if a file is loaded, otherwise false.</returns>
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }

        /// <summary>
        /// Loads the distinct filter values from the selected column to be used in the filter options.
        /// It populates the FilterValues collection with the available distinct values and marks them as selected by default.
        /// </summary>
        //private void LoadFilterValues()
        //{
        //    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

        //    // Get distinct values from the selected column for the filter
        //    FilterValues = new ObservableCollection<FilterItem>(Data
        //        .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
        //        .Where(value => value != null)
        //        .Distinct()
        //        .OrderBy(value => value)
        //        .Select(value => new FilterItem { Value = value, IsSelected = true })
        //    );

        //    IsSelectAllChecked = true;
        //}
        private void LoadFilterValues()
        {
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Check if the column has filter values already saved
            if (columnFiltersDictionary.ContainsKey(SelectedColumnFilter))
            {
                // Load saved filter values
                FilterValues = new ObservableCollection<FilterItem>(columnFiltersDictionary[SelectedColumnFilter]);
                IsSelectAllChecked = FilterValues.All(f => f.IsSelected);
            }
            else
            {
                // Otherwise, load new filter values
                FilterValues = new ObservableCollection<FilterItem>(
                    Data.Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                        .Distinct()
                        .OrderBy(value => value)
                        .Select(value => new FilterItem { Value = value, IsSelected = true })
                );
                IsSelectAllChecked = true;
            }
        }
        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }



        /// <summary>
        /// Applies the selected filters to the data. It filters the Data collection based on the selected filter values
        /// and updates the FilteredData collection with the filtered results.
        /// </summary>
        private void ApplyFilter()
        {
            // Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                
                // Save the current filter state
                columnFiltersDictionary[SelectedColumnFilter] = new ObservableCollection<FilterItem>(FilterValues);
                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }
        //private void ApplyFilter()
        //{
        //    if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

        //    var selectedValues = FilterValues.Where(f => f.IsSelected).Select(f => f.Value).ToList();

        //    if (selectedValues.Any())
        //    {
        //        // Filter the data based on the selected values
        //        var filteredData = repo.ApplyFilter(Data.ToList(), SelectedColumnFilter, selectedValues);
        //        FilteredData = new ObservableCollection<ExcelData>(filteredData);

        //        // Save the current filter state
        //        columnFiltersDictionary[SelectedColumnFilter] = new ObservableCollection<FilterItem>(FilterValues);

        //        IsFilterApplied = true;
        //    }
        //    else
        //    {
        //        // If no filter values are selected, reset to original data
        //        FilteredData = new ObservableCollection<ExcelData>(Data);
        //        IsFilterApplied = false;
        //    }
        //}

        /// <summary>
        /// Resets the filters to their default state, unselecting all filters and restoring the original data to FilteredData.
        /// It also unchecks the "Select All" checkbox.
        /// </summary>
        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            // Restore the original data to FilteredData
            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Opens a file dialog to import filter conditions from an XML file.
        /// The filter conditions are deserialized from the XML file and applied to the FilterValues collection.
        /// It also updates the "Select All" checkbox based on the imported data.
        /// </summary>
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize the XML to restore the filter states
                var serializer = new XmlSerializer(typeof(Dictionary<string, ObservableCollection<FilterItem>>));
                using (var reader = new StreamReader(filePath))
                {
                    columnFiltersDictionary = (Dictionary<string, ObservableCollection<FilterItem>>)serializer.Deserialize(reader);
                }

                // Optionally, you can reload the current selected column filter's filter values
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Opens a file dialog to export the current filter conditions to an XML file.
        /// The filter conditions are serialized and saved to the selected XML file.
        /// </summary>
        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize the column filters dictionary to XML
                var serializer = new XmlSerializer(typeof(Dictionary<string, ObservableCollection<FilterItem>>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, columnFiltersDictionary);
                }
            }
        }
       

        /// <summary>
        /// Event triggered when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event for a given property name.
        /// </summary>
        /// <param name="propertyName">Name of the property that changed.</param>
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


<Window x:Class="ExcelProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Border Background="Teal" Grid.Row="0" Height="40" HorizontalAlignment="Stretch" VerticalAlignment="Top" CornerRadius="5">
            <TextBlock Text="Bug Tracker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Margin="10,0,0,0" />
        </Border>

        <!-- Upload Section -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="FileName: " VerticalAlignment="Center" Width="60" />
            <TextBox Width="400" Height="30" Margin="10 0 0 0" Padding="4 4 4 4" IsEnabled="False" Text="{Binding FilePath}" />
            <Button Content="..." Width="70" Margin="10,0,0,0" Background="Teal" Command="{Binding ShowDialogCommand}" IsEnabled="{Binding IsFileValid}" />
            <Button Content="Show Details" Width="100" Margin="10,0,0,0" Background="Teal" Command="{Binding LoadCommand}" />
        </StackPanel>

        <!-- Filter Conditions Section -->
        <GroupBox Header="Filter Conditions" Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="0,0,0,10">
            <Grid Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="300" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Column Filters ListBox -->
                <ListBox ItemsSource="{Binding ColumnFilters}" Height="230" SelectedItem="{Binding SelectedColumnFilter}"  Grid.Column="0">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Column="1" Orientation="Vertical">

                    <CheckBox Content="Select All" 
                               IsChecked="{Binding IsSelectAllChecked, Mode=TwoWay}" 
                               Margin="0,0,0,10" />
                    <!-- Filter Values ListBox with Select All checkbox included -->
                    <ListBox ItemsSource="{Binding FilterValues}" Height="230" Grid.Column="1">

                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <!-- Individual Filter Checkbox -->
                                <CheckBox Content="{Binding Value}" 
                                      IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>

                <!-- Buttons -->
                <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10">
                    <Button Content="Apply Filter" Width="150" Height="33" Margin="5" Background="Teal" Command="{Binding ApplyFilterCommand}" />
                    <Button Content="Reset Filter" Width="150" Height="22" Margin="5" Background="Teal" Command="{Binding ResetFilterCommand}" />
                    <Button Content="Import Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ImportFilterCommand}" />
                    <Button Content="Export Filter..." Width="150" Height="30" Margin="5" Background="Teal" Command="{Binding ExportFilterCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- DataGrid Section -->
        <DataGrid x:Name="dataGrid" Grid.Row="3" ItemsSource="{Binding FilteredData}" RowHeight="30"  >
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Teal" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Height" Value="20" />
                    <Setter Property="MinWidth" Value="100" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <!-- Close Button -->
        <Button Content="Close" Grid.Row="4" Background="Teal" Width="100" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding CloseCommand}" />
    </Grid>
</Window>    



// ----------------------------------------------------------------------------------------
// Project Name  : ExcelProject
// File Name     : MainWindow.xaml.cs
// Description   : Represents the mainwindow class
// Author        : Anjana E R
// Date          : 16-12-2024
// ----------------------------------------------------------------------------------------
using System.Windows;
using ExcelProject.ViewModel;

namespace ExcelProject
{
    /// <summary>
    /// Main entry point for the application UI.
    /// Defines interaction logic for the main window and binds to the <see cref="MainViewModel"/> for data operations.
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainWindow"/> class.
        /// Sets the DataContext to the <see cref="MainViewModel"/>.
        /// </summary>
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(new ExcelRepository());
            

        }
   
    }

    
}

// ----------------------------------------------------------------------------------------
// Project Name: ExcelProject
// File Name: RelayCommand.cs
// Description: Defines a class for executing commands
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------
using System;
using System.Windows.Input;

namespace ExcelProject
{
    public class RelayCommand : ICommand
    {
        /// <summary>
        /// The action to execute when the command is invoked.
        /// </summary>
        private readonly Action _execute;

        /// <summary>
        /// A function that determines whether the command can be executed.
        /// </summary>
        private readonly Func<bool> _canExecute;

        /// <summary>
        /// Initializes a new instance of the RelayCommand class.
        /// </summary>
        /// <param name="execute">The action to execute when the command is invoked.</param>
        /// <param name="canExecute">A function that determines whether the command can be executed.</param>
        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        /// <summary>
        /// Occurs when the CanExecute method of the command changes.
        /// </summary>
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        /// <summary>
        /// Determines whether the command can be executed.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the CanExecute method.</param>
        /// <returns>True if the command can be executed; otherwise, false.</returns>
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the Execute method.</param>
        public void Execute(object parameter)
        {
            _execute();
        }
       
    }
}



-----------------------------------------------
// ----------------------------------------------------------------------------------------
// Project Name: Excel2
// File Name: MainViewModel.cs
// Description: The MainViewModel class handles the interaction between the View and the Model
// which serves as a ViewModel for managing Excel data
// Author: Anjana E R
// Date: 16-12-2024
// ----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using ExcelProject.Model;
using ExcelProject.Repo;
using Microsoft.Win32;
using System.IO;
using System.Xml.Serialization;


namespace ExcelProject.ViewModel
{
    /// <summary>
    /// ViewModel for managing Excel data and filters
    /// Implements INotifyPropertyChanged to notify UI updates
    /// </summary>

    public class MainViewModel : INotifyPropertyChanged
    {
        // File path of the selected Excel file
        private string filePath;
            
        // The column currently selected for filtering
        private string selectedColumnFilter;
        // Holds all the Excel data loaded from the file
        private ObservableCollection<ExcelData> data;

        // Holds the filtered data after applying filters
        private ObservableCollection<ExcelData> filteredData;

        // List of available columns for filtering, based on the Excel data
        private ObservableCollection<string> columnFilters;

        // List of filter options for the selected column
        private ObservableCollection<FilterItem> filterValues;

        // Indicates whether the "Select All" checkbox for filters is checked
        private bool isSelectAllChecked;

        // Indicates whether a filter has been applied to the data
        private bool isFilterApplied;

        // Indicates whether the selected file is a valid Excel file
        private bool isFileValid;

        // Error message to show if the selected file is invalid
        private string fileNameErrorMessage;

        // Repository interface to fetch and manage Excel data
        private IRepo repo;

        ///<summary>
        ///Constructor for initializing commands and properties
        ///</summary>
        ///
        public MainViewModel(IRepo excelrepo)
        {
            // Initialize repository interface for interacting with Excel data
            repo = excelrepo;

            // Initialize commands

           
            LoadCommand = new RelayCommand(LoadData, CanShowDetails);
            ShowDialogCommand = new RelayCommand(ShowDialog);
            ApplyFilterCommand = new RelayCommand(ApplyFilter);
            ResetFilterCommand = new RelayCommand(ResetFilter);
            ImportFilterCommand = new RelayCommand(ImportFilter);
            ExportFilterCommand = new RelayCommand(ExportFilter);
            CloseCommand = new RelayCommand(() => Application.Current.Shutdown());

            // Initialize properties

            // List of available columns for filtering
            ColumnFilters = new ObservableCollection<string>();
            // Filter options for the selected column
            FilterValues = new ObservableCollection<FilterItem>();
            // Data after filters have been applied
            FilteredData = new ObservableCollection<ExcelData>();
            // All loaded Excel data
            Data = new ObservableCollection<ExcelData>();
            // Flag indicating whether the selected file is a valid Excel file
            isFileValid = true;
        }

        
        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        public string FilePath
        {
            get 
            {
                return filePath;
            } 
            set
            {
                filePath = value; 
                OnPropertyChanged(nameof(FilePath)); 
            }
        }



        /// <summary>
        /// Gets or sets the collection of Excel data.
        /// </summary>  
        public ObservableCollection<ExcelData> Data
        {
            get 
            { 
                return data;
            } 
            set 
            {
                data = value; 
                OnPropertyChanged(nameof(Data));
            }
        }

        /// <summary>
        /// Gets or sets the filtered collection of Excel data.
        /// </summary>
        public ObservableCollection<ExcelData> FilteredData
        {
            get 
            {
                return filteredData;
            } 
            set 
            { 
                filteredData = value;
                OnPropertyChanged(nameof(FilteredData));
            }
        }

       

        /// <summary>
        /// Gets or sets the collection of available column filters.
        /// This collection holds the list of column names available for filtering the data.
        /// </summary>
        public ObservableCollection<string> ColumnFilters
        {
            get
            {
                return columnFilters;
            }
            set 
            {
                columnFilters = value;
                OnPropertyChanged(nameof(ColumnFilters)); 
            }
        }

        /// <summary>
        /// Gets or sets the selected filter column.
        /// </summary>
        public string SelectedColumnFilter
        {
            get
            {
                return selectedColumnFilter;

            }
            set
            {
                selectedColumnFilter = value;
                OnPropertyChanged(nameof(SelectedColumnFilter)); 
                LoadFilterValues();
            }
        }

        /// <summary>
        /// Gets or sets the filter values available for the selected filter column.
        /// </summary>
        public ObservableCollection<FilterItem> FilterValues
        {
            get
            {
                return filterValues;
            }
            set
            {
                filterValues = value;
                OnPropertyChanged(nameof(FilterValues));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the "Select All" checkbox is checked.
        /// </summary>
        public bool IsSelectAllChecked
        {
            get
            {
                return isSelectAllChecked;

            }
            set
            {
                isSelectAllChecked = value;
                OnPropertyChanged(nameof(IsSelectAllChecked));
                SelectAllFilters(value);
            }
        }



        /// <summary>
        /// Gets or sets a value indicating whether a filter has been applied to the data.
        /// This property indicates if any filter has been applied to the data set.
        /// </summary>
        public bool IsFilterApplied
        {
            get
            {
                return isFilterApplied;
            }
            set
            {
                isFilterApplied = value;
                OnPropertyChanged(nameof(IsFilterApplied));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the selected file is valid.
        /// This property indicates whether the Excel file has a valid format.
        /// </summary>
        public bool IsFileValid
        {
            get
            {
                return isFileValid;
            }
            set
            {
                isFileValid = value;
                OnPropertyChanged(nameof(IsFileValid));
            }
        }

        /// <summary>
        /// Gets or sets the error message when the selected file is invalid.
        /// This property holds an error message if the file is not a valid Excel file.
        /// </summary>
        public string FileNameErrorMessage
        {
            get
            {
                return fileNameErrorMessage;

            }

            set
            {
                fileNameErrorMessage = value;
                OnPropertyChanged(nameof(FileNameErrorMessage));
            }
        }

        // Command to load data from the Excel file
        public ICommand LoadCommand { get; }

        // Command to open a file dialog for selecting an Excel file.
        public ICommand ShowDialogCommand { get; }

        // Command to close the application or the current view.
        public ICommand CloseCommand { get; }

        // Command to apply the selected filter conditions to the data.
        public ICommand ApplyFilterCommand { get; }

        // Command to reset all filter conditions and clear any applied filters.
        public ICommand ResetFilterCommand { get; }

        // Command to import filter settings from an XML file
        public ICommand ImportFilterCommand { get; }

        // Command to export current filter settings to an XML file
        public ICommand ExportFilterCommand { get; }

        /// <summary>
        /// Opens a file dialog for selecting an Excel file.
        /// </summary>
        private void ShowDialog()
        {

            var dialog = new OpenFileDialog
            {
                Filter = "Excel Files (*.xlsx, *.xls)|*.xlsx;*.xls"
            };

            if (dialog.ShowDialog() == true)
            {
                FilePath = dialog.FileName;

                // Check if the file has a valid Excel extension (.xlsx or .xls)
                if (FilePath.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) || FilePath.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
                {
                    IsFileValid = true;
                    FileNameErrorMessage = string.Empty; // Clear any previous error message
                }
                else
                {
                    IsFileValid = false;
                    FileNameErrorMessage = "The selected file is not a valid Excel file. Please select a .xlsx or .xls file.";
                }
            }
        }

        /// <summary>
        /// Selects or deselects all filter items.
        /// </summary>
        /// <param name="selectAll">True to select all; false to deselect all.</param>
        private void SelectAllFilters(bool selectAll)
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = selectAll;
            }

            OnPropertyChanged(nameof(FilterValues));
        }

        /// <summary>
        /// Determines if the "Show Details" command can execute. It returns true if a file is loaded, otherwise false.
        /// </summary>
        /// <returns>True if a file is loaded, otherwise false.</returns>
        private bool CanShowDetails()
        {
            return !string.IsNullOrEmpty(FilePath);
        }


        //// <summary>
        /// Loads data from the Excel file and populates the Data and FilteredData collections.
        /// It also dynamically generates the column filters based on the first row's property names.
        /// </summary>
        private void LoadData()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                // Retrieve data from the repository
                var excelData = repo.ReadExcelFile(FilePath);

                // Populate the Data and FilteredData collections
                Data = new ObservableCollection<ExcelData>(excelData);
                FilteredData = new ObservableCollection<ExcelData>(excelData);

                // Dynamically generate the column names from the first row's properties
                ColumnFilters = new ObservableCollection<string>();

                // Check if excelData is not empty
                if (excelData.Any())
                {
                    // Get the first row data
                    var firstRow = excelData.FirstOrDefault();

                    // Get the properties of the first row object (ExcelData)
                    var properties = firstRow.GetType().GetProperties();

                    // Loop through each property and add the property name to the ColumnFilters
                    foreach (var property in properties)
                    {
                        ColumnFilters.Add(property.Name);
                    }
                }
                LoadFilterValues();
            }
        }
       
        private void LoadFilterValues()
        {

            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get distinct values from the selected column for the filter
            FilterValues = new ObservableCollection<FilterItem>(Data
                .Select(row => row.GetType().GetProperty(SelectedColumnFilter)?.GetValue(row)?.ToString())
                .Distinct()
                .OrderBy(value => value)
                .Select(value => new FilterItem { Value = value, IsSelected = true })
            );

            IsSelectAllChecked = true;
        }
     

        /// <summary>
        /// Applies the selected filters to the data. It filters the Data collection based on the selected filter values
        /// and updates the FilteredData collection with the filtered results.
        /// </summary>
        private void ApplyFilter()
        {// Check if a filter is selected
            if (string.IsNullOrEmpty(SelectedColumnFilter)) return;

            // Get selected filter values
            List<string> selectedValues = new List<string>();
            // Loop through the filtervalues
            foreach (var filter in FilterValues)
            {
                if (filter.IsSelected)
                {
                    selectedValues.Add(filter.Value);
                }
            }

            // Check if there are any selected values
            if (selectedValues.Count > 0)
            {
                // Create a new ObservableCollection for filtered data
                ObservableCollection<ExcelData> filteredData = new ObservableCollection<ExcelData>();

                // Filter the data based on the selected values
                foreach (var dataItem in Data)
                {
                    // Get the value of the property specified by SelectedFilter
                    var propertyValue = dataItem.GetType().GetProperty(SelectedColumnFilter)?.GetValue(dataItem)?.ToString();

                    // Check if the property value is in the selected values
                    if (selectedValues.Contains(propertyValue))
                    {
                        filteredData.Add(dataItem);
                    }
                }

                // Assign the filtered data to FilteredData
                FilteredData = filteredData;
                IsFilterApplied = true;
            }
            else
            {
                // If no filter values are selected, reset to original data
                FilteredData = new ObservableCollection<ExcelData>(Data);
                IsFilterApplied = false;
            }
        }
        

        /// <summary>
        /// Resets the filters to their default state, unselecting all filters and restoring the original data to FilteredData.
        /// It also unchecks the "Select All" checkbox.
        /// </summary>
        private void ResetFilter()
        {
            foreach (var filter in FilterValues)
            {
                filter.IsSelected = false;
            }

            // Restore the original data to FilteredData
            FilteredData = new ObservableCollection<ExcelData>(Data);
            IsSelectAllChecked = false;
        }

        /// <summary>
        /// Opens a file dialog to import filter conditions from an XML file.
        /// The filter conditions are deserialized from the XML file and applied to the FilterValues collection.
        /// It also updates the "Select All" checkbox based on the imported data.
        /// </summary>
        private void ImportFilter()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Deserialize XML to filter conditions
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var reader = new StreamReader(filePath))
                {
                    var importedFilters = (List<FilterItem>)serializer.Deserialize(reader);
                    FilterValues = new ObservableCollection<FilterItem>(importedFilters);
                }

                // Update the "Select All" checkbox based on imported data
                IsSelectAllChecked = FilterValues.All(filter => filter.IsSelected);
            }
        }

        /// <summary>
        /// Opens a file dialog to export the current filter conditions to an XML file.
        /// The filter conditions are serialized and saved to the selected XML file.
        /// </summary>
        private void ExportFilter()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };

            if (dialog.ShowDialog() == true)
            {
                var filePath = dialog.FileName;

                // Serialize filter conditions to XML
                var serializer = new XmlSerializer(typeof(List<FilterItem>));
                using (var writer = new StreamWriter(filePath))
                {
                    serializer.Serialize(writer, FilterValues.ToList());
                }
            }
        }
       

        /// <summary>
        /// Event triggered when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event for a given property name.
        /// </summary>
        /// <param name="propertyName">Name of the property that changed.</param>
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}






























